#!/usr/bin/env python3

import delegator
import os
import shutil
import signal
import sys
import time

from os import path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary


MAX_TIMEOUT = 1 * 60 * 60 # 1 hour

#BENCHMARKS = 'bzip2 mcf gobmk sjeng libquantum h264ref omnetpp astar milc namd soplex povray lbm sphinx3'.split()[:1]
BENCHMARKS = 'bzip2'.split()[:1]
#BENCHMARKS = ['libquantum']

SIZE = 'test'

CWD = path.abspath(os.getcwd())

SPEC_DIR = '/spec/cpu2006_asmjs'

CMP_PATH = path.join(CWD, 'hostbin', 'cmp')
CLEAN_PATH = path.join(CWD, 'hostbin', 'clean')
UNPACK_PATH = path.join(CWD, 'hostbin', 'unpack')
SERVER_JS = path.join(CWD, 'server.js')
SERVER_PATH = 'sudo node {}'.format(SERVER_JS)


def get_firefox():
    binary = FirefoxBinary('/opt/firefox-nightly/firefox')
    return webdriver.Firefox(firefox_binary=binary)


def get_chrome():
    options = Options()
    options.binary_location = '/opt/google/chrome-beta/chrome'
    # options.add_argument('--js-flags=--harmony-sharedarraybuffer')
    # options.add_argument('--enable-blink-feature=SharedArrayBuffer')

    return webdriver.Chrome('chromedriver', chrome_options=options)


BROWSERS = {
    'chrome': get_chrome,
    'firefox': get_firefox,
}


def run(browser, benchmark):
    # ensure we're in the directory we started
    os.chdir(CWD)

    c = delegator.run(SERVER_PATH, block=False)

    url = 'localhost:9000/?size={}&benchmark={}'.format(SIZE, benchmark)

    driver = BROWSERS[browser]()
    driver.get(url)
    assert 'Browsix' in driver.title

    try:
        time.sleep(.1)
        element = WebDriverWait(driver, MAX_TIMEOUT).until(
            EC.text_to_be_present_in_element((By.ID, 'completion'), 'DONE')
        )
    finally:
        time.sleep(1)
        driver.quit()

    try:
        c.terminate()
    except Exception as e:
        #print('ERROR: c.kill: {}'.format(e))
        pass
    finally:
        c.block()


def results_correct(browser, benchmark):
    os.chdir(SPEC_DIR)
    c = delegator.run([CLEAN_PATH, '-size=' + SIZE, '-benchmark=' + benchmark])
    if c.return_code != 0:
        print('ERROR: clean {}/{}:\n{}\n{}'.format(browser, benchmark, c.out, c.err))
        return False

    c = delegator.run([CMP_PATH, '-size=' + SIZE, '-benchmark=' + benchmark])
    if c.return_code == 0:
        print('ERROR: cmp1 {}/{}:\n{}\n{}'.format(browser, benchmark, c.out, c.err))
        return False

    c = delegator.run([UNPACK_PATH, path.join(CWD, 'results_{}_{}_{}.tar'.format(browser, SIZE, benchmark))])
    if c.return_code != 0:
        print('ERROR: unpack {}/{}:\n{}\n{}'.format(browser, benchmark, c.out, c.err))
        return False

    c = delegator.run([CMP_PATH, '-size=' + SIZE, '-benchmark=' + benchmark])
    if c.return_code != 0:
        print('ERROR: cmp2 {}/{}:\n{}\n{}'.format(browser, benchmark, c.out, c.err))
        return False

    return True


def main():
    for browser in BROWSERS:
        for benchmark in BENCHMARKS:
            print('testing {}/{}'.format(browser,benchmark))
            time.sleep(2)
            run(browser, benchmark)
            if not results_correct(browser, benchmark):
                print('ERROR: result incorrect for {}/{}, not recording'.format(browser, benchmark))
                for f in os.listdir(path.join(CWD, 'perf_data')):
                    os.remove(path.join(CWD, 'perf_data', f))
                continue
            print('\tOK: recording')
            os.chdir(CWD)
            for f in os.listdir(path.join(CWD, 'perf_data')):
                shutil.move(path.join(CWD, 'perf_data', f), path.join(CWD, 'perf_data_valid'))

    return 0

if __name__ == '__main__':
    sys.exit(main())
