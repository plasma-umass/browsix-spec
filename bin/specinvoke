// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
var ENVIRONMENT_IS_BROWSIX = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_BROWSIX = ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_WORKER = false;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER | ENVIRONMENT_IS_BROWSIX) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      if (ENVIRONMENT_IS_BROWSIX)
        debugger;
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;


var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var OnceEmitter = (function () {
    function OnceEmitter() {
        this.listeners = {};
    }
    OnceEmitter.prototype.once = function (event, cb) {
        var cbs = this.listeners[event];
        if (!cbs)
            cbs = [cb];
        else
            cbs.push(cb);
        this.listeners[event] = cbs;
    };
    OnceEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var cbs = this.listeners[event];
        this.listeners[event] = [];
        if (!cbs)
            return;
        for (var i = 0; i < cbs.length; i++) {
            cbs[i].apply(null, args);
        }
    };
    return OnceEmitter;
})();
var Process = (function (_super) {
    __extends(Process, _super);
    function Process(argv, environ) {
        _super.call(this);
        this.argv = argv;
        this.env = environ;
        this.syscall = null;
    }
    Process.prototype.exit = function (code) {
        //Module['noExitRuntime'] = false;
        if (code === void 0) { code = 0; }
        SYSCALLS.browsix.syscall.exit(code);
    };
    return Process;
})(OnceEmitter);

if (ENVIRONMENT_IS_BROWSIX) {
  Runtime['process'] = Runtime.process = new Process(null, null);
  if (typeof Atomics !== 'undefined' && !Atomics.wait && Atomics.futexWait)
    Atomics.wait = Atomics.futexWait;
  if (typeof Atomics !== 'undefined' && !Atomics.wake && Atomics.futexWake)
    Atomics.wake = Atomics.futexWake;
}



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  // needed when run under emterpreter.
  if (typeof asm !== 'undefined' && asm.update_heap) {
    asm.update_heap();
  } else {
    HEAP8 = Module['HEAP8'];
    HEAP16 = Module['HEAP16'];
    HEAP32 = Module['HEAP32'];
    HEAPU8 = Module['HEAPU8'];
    HEAPU16 = Module['HEAPU16'];
    HEAPU32 = Module['HEAPU32'];
    HEAPF32 = Module['HEAPF32'];
    HEAPF64 = Module['HEAPF64'];
  }
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  abort('Will not enlarge memory arrays');
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;




  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement) return false;

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();


  return true;
}

var byteLength = function(buffer) { return buffer.byteLength; };

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 15712;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([232,3,0,0,1,0,0,0,1,0,0,0,24,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,174,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,182,29,0,0,156,31,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,36,82,101,118,105,115,105,111,110,58,32,54,51,57,50,32,36,0,115,112,101,99,99,109,100,115,46,99,109,100,0,118,110,100,58,105,58,111,58,101,58,102,58,99,58,115,58,65,63,104,69,114,83,58,78,90,67,68,58,113,107,0,85,115,97,103,101,58,32,37,115,32,91,111,112,116,105,111,110,115,93,32,91,105,110,115,116,114,117,99,116,105,111,110,102,105,108,101,93,10,32,32,32,32,32,32,32,32,32,32,32,45,105,32,60,110,62,32,32,32,32,32,32,32,32,32,32,105,116,101,114,97,116,105,111,110,115,10,32,32,32,32,32,32,32,32,32,32,32,45,99,32,60,110,62,32,32,32,32,32,32,32,32,32,32,99,111,110,99,117,114,114,101,110,116,32,112,114,111,99,101,115,115,101,115,32,40,111,118,101,114,114,105,100,101,115,32,45,67,32,105,110,32,99,111,109,109,97,110,100,32,102,105,108,101,41,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,111,32,110,111,116,32,97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,116,104,105,115,32,102,108,97,103,32,102,111,114,32,114,97,116,101,32,114,117,110,115,46,10,32,32,32,32,32,32,32,32,32,32,32,45,69,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,111,110,45,122,101,114,111,32,101,120,105,116,32,99,111,100,101,32,105,102,32,99,104,105,108,100,32,100,111,101,115,10,32,32,32,32,32,32,32,32,32,32,32,45,115,32,115,104,101,108,108,32,32,32,32,32,32,32,32,115,104,101,108,108,32,116,111,32,105,110,118,111,107,101,10,32,32,32,32,32,32,32,32,32,32,32,45,102,32,102,105,108,101,32,32,32,32,32,32,32,32,32,105,110,115,116,114,117,99,116,105,111,110,32,102,105,108,101,10,32,32,32,32,32,32,32,32,32,32,32,45,111,32,102,105,108,101,32,32,32,32,32,32,32,32,32,111,117,116,112,117,116,32,102,105,108,101,10,32,32,32,32,32,32,32,32,32,32,32,45,101,32,102,105,108,101,32,32,32,32,32,32,32,32,32,101,114,114,111,114,32,102,105,108,101,10,32,32,32,32,32,32,32,32,32,32,32,45,100,32,100,105,114,32,32,32,32,32,32,32,32,32,32,99,104,97,110,103,101,32,116,111,32,100,105,114,32,102,105,114,115,116,10,32,32,32,32,32,32,32,32,32,32,32,45,110,91,110,93,32,32,32,32,32,32,32,32,32,32,32,112,114,105,110,116,32,97,32,39,100,114,121,95,114,117,110,39,32,111,102,32,99,111,109,109,97,110,100,115,10,32,32,32,32,32,32,32,32,32,32,32,45,65,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,48,32,101,114,114,111,114,32,99,111,100,101,10,32,32,32,32,32,32,32,32,32,32,32,45,83,32,109,115,101,99,115,32,32,32,32,32,32,32,32,115,108,101,101,112,32,98,101,116,119,101,101,110,32,115,112,97,119,110,105,110,103,32,99,111,112,105,101,115,32,40,105,110,32,109,105,108,108,105,115,101,99,111,110,100,115,41,10,32,32,32,32,32,32,32,32,32,32,32,45,114,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,110,39,116,32,100,111,32,73,47,79,32,114,101,100,105,114,101,99,116,105,111,110,32,40,36,99,111,109,109,97,110,100,32,97,108,114,101,97,100,121,32,104,97,115,32,105,116,41,10,32,32,32,32,32,32,32,32,32,32,32,45,78,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,112,101,110,32,110,117,108,108,32,100,101,118,105,99,101,32,119,104,101,110,32,110,111,32,105,110,112,117,116,32,102,105,108,101,32,105,115,32,115,112,101,99,105,102,105,101,100,10,32,32,32,32,32,32,32,32,32,32,32,45,90,32,32,32,32,32,32,32,32,32,32,32,32,32,32,117,115,101,32,122,101,114,111,45,108,101,110,103,116,104,32,102,105,108,101,32,119,104,101,110,32,110,111,32,105,110,112,117,116,32,102,105,108,101,32,105,115,32,115,112,101,99,105,102,105,101,100,10,32,32,32,32,32,32,32,32,32,32,32,45,67,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,100,101,102,97,117,108,116,41,32,99,108,111,115,101,32,115,116,100,105,110,32,119,104,101,110,32,110,111,32,105,110,112,117,116,32,102,105,108,101,32,105,115,32,115,112,101,99,105,102,105,101,100,10,32,32,32,32,32,32,32,32,32,32,32,45,68,32,60,110,62,32,32,32,32,32,32,32,32,32,32,84,117,114,110,32,111,110,32,100,101,98,117,103,103,105,110,103,32,97,116,32,108,101,118,101,108,32,60,110,62,10,32,32,32,32,32,32,32,32,32,32,32,45,113,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,116,111,112,32,105,115,115,117,105,110,103,32,99,111,109,109,97,110,100,115,32,97,115,32,115,111,111,110,32,97,115,32,111,110,101,32,102,97,105,108,115,32,40,100,101,102,97,117,108,116,41,10,32,32,32,32,32,32,32,32,32,32,32,45,107,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,111,110,116,105,110,117,101,32,105,115,115,117,105,110,103,32,99,111,109,109,97,110,100,115,32,101,118,101,110,32,105,102,32,111,110,101,32,102,97,105,108,115,10,32,32,32,32,32,32,32,32,32,32,32,45,104,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,32,109,101,115,115,97,103,101,10,0,69,110,97,98,108,101,100,32,100,101,98,117,103,103,105,110,103,32,97,116,32,108,101,118,101,108,32,37,100,10,0,115,112,101,99,105,110,118,111,107,101,32,114,37,115,10,0,32,32,86,67,32,73,68,58,32,37,115,10,0,36,73,100,58,32,115,112,101,99,105,110,118,111,107,101,46,99,32,54,51,57,50,32,50,48,49,49,45,48,51,45,50,54,32,48,48,58,48,48,58,48,48,90,32,99,108,111,121,99,101,32,36,0,73,116,101,114,97,116,105,111,110,115,32,109,117,115,116,32,98,101,32,62,61,32,49,33,0,67,97,110,39,116,32,99,104,100,105,114,32,116,111,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,119,0,67,97,110,39,116,32,111,112,101,110,32,110,101,119,32,115,116,100,101,114,114,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,67,97,110,39,116,32,111,112,101,110,32,110,101,119,32,115,116,100,111,117,116,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,102,111,114,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,99,111,109,109,97,110,100,32,102,105,108,101,32,110,97,109,101,0,46,99,109,100,0,46,111,117,116,0,67,97,110,39,116,32,111,112,101,110,32,114,101,115,117,108,116,32,111,117,116,112,117,116,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,114,0,67,97,110,39,116,32,111,112,101,110,32,99,111,109,109,97,110,100,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,95,95,69,78,68,95,95,0,69,114,114,111,114,32,99,111,117,110,116,105,110,103,32,101,110,116,114,105,101,115,32,105,110,32,99,111,109,109,97,110,100,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,78,111,32,39,45,67,39,32,108,105,110,101,115,32,105,110,32,99,111,109,109,97,110,100,32,102,105,108,101,32,111,114,32,39,45,99,39,32,102,108,97,103,32,111,110,32,99,111,109,109,97,110,100,32,108,105,110,101,33,0,78,111,32,99,111,109,109,97,110,100,115,32,116,111,32,105,115,115,117,101,33,0,69,114,114,111,114,32,97,108,108,111,99,97,116,105,110,103,32,109,101,109,111,114,121,32,102,111,114,32,99,111,109,109,97,110,100,32,115,116,114,117,99,116,117,114,101,115,58,32,37,115,32,40,37,100,41,10,0,69,114,114,111,114,32,97,108,108,111,99,97,116,105,110,103,32,109,101,109,111,114,121,32,102,111,114,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,115,58,32,37,115,32,40,37,100,41,10,0,76,105,110,101,32,37,100,32,116,111,111,32,108,111,110,103,10,0,73,108,108,101,103,97,108,108,121,32,102,111,114,109,97,116,116,101,100,32,111,112,116,105,111,110,32,39,37,99,39,32,111,110,32,108,105,110,101,32,37,100,32,40,109,105,115,115,105,110,103,32,115,112,97,99,101,41,10,0,87,65,82,78,73,78,71,58,32,73,103,110,111,114,105,110,103,32,45,67,32,105,110,32,99,111,109,109,97,110,100,32,102,105,108,101,32,105,110,32,102,97,118,111,114,32,111,102,32,45,99,32,111,110,32,116,104,101,32,99,111,109,109,97,110,100,32,108,105,110,101,46,10,0,45,67,32,105,115,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,99,101,32,97,116,32,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,32,97,32,108,105,110,101,33,0,87,65,82,78,73,78,71,58,32,73,103,110,111,114,105,110,103,32,45,98,32,105,110,32,99,111,109,109,97,110,100,32,102,105,108,101,32,105,110,32,102,97,118,111,114,32,111,102,32,45,99,32,111,110,32,116,104,101,32,99,111,109,109,97,110,100,32,108,105,110,101,46,10,0,45,98,32,105,115,32,111,110,108,121,32,97,108,108,111,119,101,100,32,111,110,99,101,32,97,116,32,116,104,101,32,98,101,103,105,110,110,105,110,103,32,111,102,32,97,32,108,105,110,101,33,0,84,111,111,32,109,97,110,121,32,101,110,118,105,114,111,110,109,101,110,116,32,115,101,116,116,105,110,103,115,33,32,32,69,120,112,101,99,116,101,100,32,111,110,108,121,32,37,100,10,0,73,108,108,101,103,97,108,32,111,112,116,105,111,110,32,39,37,99,39,32,111,110,32,108,105,110,101,32,37,100,10,0,69,114,114,111,114,58,32,84,111,111,32,102,101,119,32,99,111,109,109,97,110,100,115,32,114,101,97,100,32,102,114,111,109,32,116,104,101,32,99,111,109,109,97,110,100,32,102,105,108,101,59,32,37,100,32,114,101,97,100,44,32,115,104,111,117,108,100,32,98,101,32,37,100,10,0,69,114,114,111,114,32,114,101,97,100,105,110,103,32,101,110,116,114,105,101,115,32,105,110,32,99,111,109,109,97,110,100,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,35,32,0,37,115,115,112,101,99,105,110,118,111,107,101,32,114,37,115,10,0,37,115,32,73,110,118,111,107,101,100,32,97,115,58,0,32,37,115,0,37,115,116,105,109,101,114,32,116,105,99,107,115,32,111,118,101,114,32,101,118,101,114,121,32,37,108,117,32,110,115,10,0,37,115,32,78,111,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,115,32,100,101,102,105,110,101,100,32,102,111,114,32,116,104,101,115,101,32,114,117,110,115,10,0,32,69,110,118,105,114,111,110,109,101,110,116,32,105,110,32,101,102,102,101,99,116,32,102,111,114,32,116,104,101,115,101,32,114,117,110,115,58,10,0,32,35,37,50,100,58,32,37,115,10,0,35,32,69,110,118,105,114,111,110,109,101,110,116,32,105,110,32,101,102,102,101,99,116,32,102,111,114,32,116,104,101,115,101,32,114,117,110,115,58,0,37,115,61,37,115,10,0,101,120,112,111,114,116,0,10,101,120,112,111,114,116,0,114,117,110,110,105,110,103,32,99,111,109,109,97,110,100,115,32,105,110,32,37,115,32,37,100,32,116,105,109,101,115,10,0,114,117,110,115,32,115,116,97,114,116,101,100,32,97,116,32,37,117,44,32,37,117,44,32,37,115,0,114,117,110,32,37,100,32,115,116,97,114,116,101,100,32,97,116,32,37,117,44,32,37,117,44,32,37,115,0,35,32,70,97,107,101,32,111,117,116,112,117,116,32,102,111,114,32,114,97,116,101,32,114,117,110,115,32,119,105,108,108,32,110,111,116,32,110,101,99,101,115,115,97,114,105,108,121,32,99,108,101,97,114,108,121,32,114,101,112,114,101,115,101,110,116,32,116,104,101,32,111,114,100,101,114,0,35,32,116,104,97,116,32,119,111,114,107,108,111,97,100,115,32,119,111,117,108,100,32,98,101,32,114,117,110,32,105,110,32,97,32,114,101,97,108,32,114,117,110,46,0,35,32,85,115,101,32,97,110,111,116,104,101,114,32,45,110,32,111,110,32,116,104,101,32,99,111,109,109,97,110,100,32,108,105,110,101,32,116,111,32,115,101,101,32,99,104,100,105,114,32,99,111,109,109,97,110,100,115,32,97,110,100,32,101,110,118,32,100,117,109,112,0,35,32,115,108,101,101,112,32,102,111,114,32,37,108,100,32,109,105,108,108,105,115,101,99,111,110,100,115,10,0,119,97,105,116,95,102,111,114,95,110,101,120,116,32,114,101,116,117,114,110,101,100,32,37,100,58,32,37,115,32,40,37,100,41,10,0,99,104,105,108,100,32,102,105,110,105,115,104,101,100,58,32,37,117,44,32,37,117,44,32,37,117,44,32,115,101,99,61,37,117,44,32,110,115,101,99,61,37,117,44,32,112,105,100,61,37,108,100,44,32,114,99,61,37,117,10,0,99,104,105,108,100,32,119,105,116,104,32,117,110,107,110,111,119,110,32,112,105,100,32,37,100,32,101,120,105,116,101,100,33,10,0,101,114,114,111,114,58,32,37,100,32,99,104,105,108,100,114,101,110,32,102,105,110,105,115,104,101,100,32,119,105,116,104,32,101,114,114,111,114,115,10,0,114,117,110,32,37,100,32,102,105,110,105,115,104,101,100,32,97,116,58,32,37,117,44,32,37,117,44,32,37,115,0,114,117,110,32,37,100,32,101,108,97,112,115,101,100,32,116,105,109,101,58,32,37,117,44,32,37,117,44,32,37,117,46,37,48,57,117,10,0,114,117,110,115,32,102,105,110,105,115,104,101,100,32,97,116,32,37,117,44,32,37,117,44,32,37,115,0,114,117,110,115,32,101,108,97,112,115,101,100,32,116,105,109,101,58,32,37,117,44,32,37,117,44,32,37,117,46,37,48,57,117,10,0,101,114,114,111,114,58,32,97,32,116,111,116,97,108,32,111,102,32,37,100,32,99,104,105,108,100,114,101,110,32,102,105,110,105,115,104,101,100,32,119,105,116,104,32,101,114,114,111,114,115,10,0,35,32,83,116,97,114,116,105,110,103,32,114,117,110,32,102,111,114,32,99,111,112,121,32,35,37,117,10,0,99,100,32,37,115,10,0,67,97,110,39,116,32,109,97,108,108,111,99,32,37,100,32,98,121,116,101,115,58,32,37,115,40,37,117,41,10,0,67,97,110,39,116,32,114,101,97,108,108,111,99,32,37,100,32,98,121,116,101,115,32,102,111,114,32,37,112,58,32,37,115,40,37,100,41,10,0,37,117,0,37,115,0,32,60,32,37,115,0,32,62,32,37,115,0,32,50,62,62,32,37,115,0,67,111,117,108,100,32,110,111,116,32,97,108,108,111,99,97,116,101,32,115,116,111,114,97,103,101,32,102,111,114,32,115,116,97,116,101,32,115,116,114,117,99,116,117,114,101,58,32,37,115,40,37,100,41,10,0,47,98,105,110,47,115,104,0,45,99,0,114,101,112,108,97,99,101,95,109,101,0,36,66,73,78,68,0,36,83,80,69,67,67,79,80,89,78,85,77,0,67,97,110,39,116,32,102,111,114,107,58,32,37,115,40,37,100,41,10,0,67,97,110,39,116,32,99,104,97,110,103,101,32,100,105,114,101,99,116,111,114,121,32,116,111,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,67,97,110,39,116,32,111,112,101,110,32,101,114,114,111,114,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,67,97,110,39,116,32,111,112,101,110,32,105,110,112,117,116,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,47,100,101,118,47,110,117,108,108,0,67,97,110,39,116,32,111,112,101,110,32,47,100,101,118,47,110,117,108,108,32,102,111,114,32,115,116,100,105,110,58,32,37,115,40,37,100,41,10,0,115,112,101,99,95,101,109,112,116,121,95,102,105,108,101,46,37,117,46,37,108,100,0,67,97,110,39,116,32,99,114,101,97,116,101,32,37,115,32,102,111,114,32,115,116,100,105,110,58,32,37,115,40,37,100,41,10,0,67,97,110,39,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,32,39,37,115,39,58,32,37,115,40,37,100,41,10,0,99,104,105,108,100,32,115,116,97,114,116,101,100,58,32,37,117,44,32,37,117,44,32,37,117,44,32,112,105,100,61,37,108,100,44,32,39,37,115,39,10,0,116,105,109,101,32,100,101,108,116,97,32,102,111,114,32,105,116,101,114,97,116,105,111,110,32,37,100,58,32,37,108,100,117,115,32,40,37,100,32,114,111,117,110,100,115,41,10,0,115,112,101,99,105,110,118,111,107,101,58,32,99,97,108,99,117,108,97,116,101,100,32,116,105,109,101,114,32,114,101,115,111,108,117,116,105,111,110,32,40,37,100,32,105,116,101,114,97,116,105,111,110,115,41,58,32,37,108,100,32,110,115,32,40,37,100,32,97,118,103,32,114,111,117,110,100,115,41,10,0,115,112,101,99,105,110,118,111,107,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,101,114,114,111,114,58,32,110,97,110,111,115,108,101,101,112,40,50,41,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,33,10,0,45,45,0,37,115,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,32,45,45,32,37,99,10,0,37,115,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,99,10,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(72392);
//assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,5,136,2,0,0,0,0,2,200,0,0,76,2,0,0,2,201,0,0,0,202,154,59,2,202,0,0,114,27,0,0,1,203,0,0,143,203,134,2,136,204,0,0,0,203,204,0,143,203,135,2,136,203,0,0,1,204,112,2,3,203,203,204,137,203,0,0,141,203,135,2,1,204,24,2,3,203,203,204,25,53,203,40,141,204,135,2,3,203,204,200,143,203,57,1,141,204,135,2,1,205,64,2,3,204,204,205,25,203,204,12,143,203,227,1,141,203,135,2,3,203,203,200,25,75,203,9,1,203,0,0,143,203,254,1,1,203,0,0,143,203,48,2,1,203,0,0,143,203,52,2,0,203,1,0,143,203,81,2,1,203,255,255,141,204,254,1,15,88,203,204,121,88,21,0,2,204,0,0,255,255,255,127,141,203,254,1,4,92,204,203,141,203,48,2,15,98,92,203,121,98,8,0,134,106,0,0,28,21,1,0,1,203,75,0,85,106,203,0,1,203,255,255,143,203,255,1,119,0,10,0,141,203,48,2,141,204,254,1,3,110,203,204,0,204,110,0,143,204,255,1,119,0,4,0,141,203,254,1,0,204,203,0,143,204,255,1,141,204,81,2,78,115,204,0,41,204,115,24,42,204,204,24,32,204,204,0,121,204,10,0,141,203,255,1,0,204,203,0,143,204,0,2,141,203,52,2,0,204,203,0,143,204,53,2,1,204,244,0,143,204,134,2,119,0,42,16,0,123,115,0,141,203,81,2,0,204,203,0,143,204,83,2,41,204,123,24,42,204,204,24,1,203,0,0,1,205,38,0,138,204,203,205,8,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,4,2,0,0,36,2,0,0,119,0,17,0,141,205,83,2,0,203,205,0,143,203,86,2,141,205,83,2,0,203,205,0,143,203,119,2,119,0,17,0,141,205,83,2,0,203,205,0,143,203,87,2,141,205,83,2,0,203,205,0,143,203,120,2,1,203,9,0,143,203,134,2,119,0,8,0,141,204,83,2,25,128,204,1,78,45,128,0,0,123,45,0,0,204,128,0,143,204,83,2,119,0,190,255,141,204,134,2,32,204,204,9,121,204,38,0,1,204,0,0,143,204,134,2,141,204,87,2,25,134,204,1,78,138,134,0,41,204,138,24,42,204,204,24,32,204,204,37,120,204,8,0,141,203,87,2,0,204,203,0,143,204,86,2,141,203,120,2,0,204,203,0,143,204,119,2,119,0,22,0,141,204,120,2,25,146,204,1,141,204,87,2,25,151,204,2,78,156,151,0,41,204,156,24,42,204,204,24,32,204,204,37,121,204,8,0,0,204,151,0,143,204,87,2,0,204,146,0,143,204,120,2,1,204,9,0,143,204,134,2,119,0,225,255,0,204,151,0,143,204,86,2,0,204,146,0,143,204,119,2,119,0,1,0,141,204,119,2,0,168,204,0,141,204,81,2,0,174,204,0,1,204,0,0,46,204,0,204,68,3,0,0,82,191,0,0,38,204,191,32,32,204,204,0,121,204,6,0,141,203,81,2,4,205,168,174,134,204,0,0,128,206,0,0,203,205,0,0,141,205,119,2,141,203,81,2,13,204,205,203,143,204,3,1,141,204,3,1,120,204,16,0,141,203,52,2,0,204,203,0,143,204,54,2,141,203,255,1,0,204,203,0,143,204,254,1,4,204,168,174,143,204,48,2,141,203,86,2,0,204,203,0,143,204,81,2,141,203,54,2,0,204,203,0,143,204,52,2,119,0,67,255,141,203,86,2,25,204,203,1,143,204,7,1,141,203,7,1,78,204,203,0,143,204,14,1,141,204,14,1,41,204,204,24,42,204,204,24,26,204,204,48,35,204,204,10,121,204,52,0,141,203,86,2,25,204,203,2,143,204,19,1,141,203,19,1,78,204,203,0,143,204,23,1,141,203,86,2,25,204,203,3,143,204,31,1,141,204,23,1,41,204,204,24,42,204,204,24,32,204,204,36,141,203,31,1,141,205,7,1,125,30,204,203,205,0,0,0,141,205,23,1,41,205,205,24,42,205,205,24,32,205,205,36,1,203,1,0,141,204,52,2,125,37,205,203,204,0,0,0,141,205,23,1,41,205,205,24,42,205,205,24,32,205,205,36,121,205,7,0,141,205,14,1,41,205,205,24,42,205,205,24,26,205,205,48,0,203,205,0,119,0,3,0,1,205,255,255,0,203,205,0,0,204,203,0,143,204,41,2,78,48,30,0,0,204,48,0,143,204,40,1,141,203,41,2,0,204,203,0,143,204,251,1,0,204,37,0,143,204,55,2,0,204,30,0,143,204,105,2,119,0,12,0,141,203,14,1,0,204,203,0,143,204,40,1,1,204,255,255,143,204,251,1,141,203,52,2,0,204,203,0,143,204,55,2,141,203,7,1,0,204,203,0,143,204,105,2,141,203,40,1,41,203,203,24,42,203,203,24,0,204,203,0,143,204,34,1,141,204,34,1,38,204,204,224,32,204,204,32,121,204,83,0,141,203,34,1,0,204,203,0,143,204,70,1,141,203,40,1,0,204,203,0,143,204,93,1,1,204,0,0,143,204,20,2,141,203,105,2,0,204,203,0,143,204,108,2,141,203,70,1,26,204,203,32,143,204,64,1,1,204,1,0,141,203,64,1,22,204,204,203,2,203,0,0,137,40,1,0,19,204,204,203,32,204,204,0,121,204,11,0,141,203,93,1,0,204,203,0,143,204,140,1,141,203,20,2,0,204,203,0,143,204,21,2,141,203,108,2,0,204,203,0,143,204,107,2,119,0,59,0,141,203,93,1,41,203,203,24,42,203,203,24,0,204,203,0,143,204,90,1,1,203,1,0,141,205,90,1,26,205,205,32,22,203,203,205,141,205,20,2,20,203,203,205,0,204,203,0,143,204,107,1,141,203,108,2,25,204,203,1,143,204,113,1,141,203,113,1,78,204,203,0,143,204,122,1,141,204,122,1,41,204,204,24,42,204,204,24,38,204,204,224,32,204,204,32,121,204,16,0,141,203,122,1,41,203,203,24,42,203,203,24,0,204,203,0,143,204,70,1,141,203,122,1,0,204,203,0,143,204,93,1,141,203,107,1,0,204,203,0,143,204,20,2,141,203,113,1,0,204,203,0,143,204,108,2,119,0,196,255,141,203,122,1,0,204,203,0,143,204,140,1,141,203,107,1,0,204,203,0,143,204,21,2,141,203,113,1,0,204,203,0,143,204,107,2,119,0,9,0,141,203,40,1,0,204,203,0,143,204,140,1,1,204,0,0,143,204,21,2,141,203,105,2,0,204,203,0,143,204,107,2,141,203,140,1,41,203,203,24,42,203,203,24,32,204,203,42,143,204,146,1,141,204,146,1,121,204,158,0,141,203,107,2,25,204,203,1,143,204,151,1,141,203,151,1,78,204,203,0,143,204,157,1,141,204,157,1,41,204,204,24,42,204,204,24,26,204,204,48,35,204,204,10,121,204,50,0,141,203,107,2,25,204,203,2,143,204,167,1,141,203,167,1,78,204,203,0,143,204,173,1,141,204,173,1,41,204,204,24,42,204,204,24,32,204,204,36,121,204,36,0,141,204,157,1,41,204,204,24,42,204,204,24,26,204,204,48,41,204,204,2,1,203,10,0,97,4,204,203,141,204,151,1,78,203,204,0,143,203,194,1,141,204,194,1,41,204,204,24,42,204,204,24,26,204,204,48,41,204,204,3,3,203,3,204,143,203,216,1,141,204,216,1,82,203,204,0,143,203,223,1,141,204,216,1,106,203,204,4,143,203,224,1,141,204,107,2,25,203,204,3,143,203,225,1,1,203,1,0,143,203,56,2,141,204,225,1,0,203,204,0,143,203,106,2,141,204,223,1,0,203,204,0,143,203,112,2,119,0,6,0,1,203,24,0,143,203,134,2,119,0,3,0,1,203,24,0,143,203,134,2,141,203,134,2,32,203,203,24,121,203,52,0,1,203,0,0,143,203,134,2,141,204,55,2,32,203,204,0,143,203,226,1,141,203,226,1,120,203,3,0,1,7,255,255,119,0,151,14,1,203,0,0,53,203,0,203,204,7,0,0,141,204,21,2,0,203,204,0,143,203,22,2,1,203,0,0,143,203,57,2,141,204,151,1,0,203,204,0,143,203,88,2,1,203,0,0,143,203,113,2,119,0,136,0,82,203,2,0,143,203,249,1,141,204,249,1,1,205,0,0,25,205,205,4,26,205,205,1,3,204,204,205,1,205,0,0,25,205,205,4,26,205,205,1,40,205,205,255,19,204,204,205,0,203,204,0,143,203,228,1,141,204,228,1,82,203,204,0,143,203,229,1,141,203,228,1,25,203,203,4,85,2,203,0,1,203,0,0,143,203,56,2,141,204,151,1,0,203,204,0,143,203,106,2,141,204,229,1,0,203,204,0,143,203,112,2,141,204,112,2,34,203,204,0,143,203,230,1,141,203,230,1,121,203,23,0,141,204,21,2,1,205,0,32,20,204,204,205,0,203,204,0,143,203,231,1,1,204,0,0,141,205,112,2,4,203,204,205,143,203,232,1,141,205,231,1,0,203,205,0,143,203,22,2,141,205,56,2,0,203,205,0,143,203,57,2,141,205,106,2,0,203,205,0,143,203,88,2,141,205,232,1,0,203,205,0,143,203,113,2,119,0,81,0,141,205,21,2,0,203,205,0,143,203,22,2,141,205,56,2,0,203,205,0,143,203,57,2,141,205,106,2,0,203,205,0,143,203,88,2,141,205,112,2,0,203,205,0,143,203,113,2,119,0,68,0,141,205,140,1,41,205,205,24,42,205,205,24,0,203,205,0,143,203,233,1,141,203,233,1,26,203,203,48,35,203,203,10,121,203,48,0,141,203,107,2,0,55,203,0,1,203,0,0,143,203,31,2,141,205,233,1,26,203,205,48,143,203,42,2,141,205,31,2,27,203,205,10,143,203,234,1,141,205,234,1,141,204,42,2,3,203,205,204,143,203,235,1,25,54,55,1,78,56,54,0,41,203,56,24,42,203,203,24,26,203,203,48,35,203,203,10,121,203,10,0,0,55,54,0,141,204,235,1,0,203,204,0,143,203,31,2,41,204,56,24,42,204,204,24,26,203,204,48,143,203,42,2,119,0,234,255,141,203,235,1,34,203,203,0,121,203,3,0,1,7,255,255,119,0,25,14,141,204,21,2,0,203,204,0,143,203,22,2,141,204,55,2,0,203,204,0,143,203,57,2,0,203,54,0,143,203,88,2,141,204,235,1,0,203,204,0,143,203,113,2,119,0,12,0,141,204,21,2,0,203,204,0,143,203,22,2,141,204,55,2,0,203,204,0,143,203,57,2,141,204,107,2,0,203,204,0,143,203,88,2,1,203,0,0,143,203,113,2,141,203,88,2,78,57,203,0,41,203,57,24,42,203,203,24,32,203,203,46,121,203,120,0,141,203,88,2,25,58,203,1,78,59,58,0,41,203,59,24,42,203,203,24,32,203,203,42,120,203,43,0,41,203,59,24,42,203,203,24,26,203,203,48,35,203,203,10,121,203,9,0,0,76,58,0,1,203,0,0,143,203,32,2,41,204,59,24,42,204,204,24,26,203,204,48,143,203,43,2,119,0,6,0,1,203,0,0,143,203,59,2,0,203,58,0,143,203,89,2,119,0,100,0,141,203,32,2,27,72,203,10,141,203,43,2,3,73,72,203,25,74,76,1,78,77,74,0,41,203,77,24,42,203,203,24,26,203,203,48,35,203,203,10,121,203,9,0,0,76,74,0,0,203,73,0,143,203,32,2,41,204,77,24,42,204,204,24,26,203,204,48,143,203,43,2,119,0,238,255,0,203,73,0,143,203,59,2,0,203,74,0,143,203,89,2,119,0,76,0,141,203,88,2,25,60,203,2,78,61,60,0,41,203,61,24,42,203,203,24,26,203,203,48,35,203,203,10,121,203,29,0,141,203,88,2,25,62,203,3,78,63,62,0,41,203,63,24,42,203,203,24,32,203,203,36,121,203,22,0,41,203,61,24,42,203,203,24,26,203,203,48,41,203,203,2,1,204,10,0,97,4,203,204,78,64,60,0,41,204,64,24,42,204,204,24,26,204,204,48,41,204,204,3,3,65,3,204,82,66,65,0,106,67,65,4,141,204,88,2,25,68,204,4,0,204,66,0,143,204,59,2,0,204,68,0,143,204,89,2,119,0,40,0,141,204,57,2,32,69,204,0,120,69,3,0,1,7,255,255,119,0,162,13,1,204,0,0,46,204,0,204,200,11,0,0,82,204,2,0,143,204,250,1,141,204,250,1,1,203,0,0,25,203,203,4,26,203,203,1,3,204,204,203,1,203,0,0,25,203,203,4,26,203,203,1,40,203,203,255,19,204,204,203,0,70,204,0,82,71,70,0,25,204,70,4,85,2,204,0,0,204,71,0,143,204,59,2,0,204,60,0,143,204,89,2,119,0,11,0,1,204,0,0,143,204,59,2,0,204,60,0,143,204,89,2,119,0,6,0,1,204,255,255,143,204,59,2,141,203,88,2,0,204,203,0,143,204,89,2,141,203,89,2,0,204,203,0,143,204,90,2,1,204,0,0,143,204,103,2,141,204,90,2,78,78,204,0,1,204,57,0,41,203,78,24,42,203,203,24,26,203,203,65,48,204,204,203,44,12,0,0,1,7,255,255,119,0,113,13,141,204,90,2,25,79,204,1,1,204,250,17,141,203,103,2,27,203,203,58,3,204,204,203,41,203,78,24,42,203,203,24,26,203,203,65,3,80,204,203,78,81,80,0,1,203,255,0,19,203,81,203,26,203,203,1,35,203,203,8,121,203,8,0,0,203,79,0,143,203,90,2,1,204,255,0,19,204,81,204,0,203,204,0,143,203,103,2,119,0,224,255,141,204,90,2,0,203,204,0,143,203,91,2,141,204,103,2,0,203,204,0,143,203,104,2,119,0,1,0,41,203,81,24,42,203,203,24,32,203,203,0,121,203,3,0,1,7,255,255,119,0,77,13,1,203,255,255,141,204,251,1,15,82,203,204,41,204,81,24,42,204,204,24,32,204,204,19,121,204,7,0,121,82,3,0,1,7,255,255,119,0,67,13,1,204,52,0,143,204,134,2,119,0,31,0,121,82,19,0,141,204,251,1,41,204,204,2,3,83,4,204,1,204,255,0,19,204,81,204,85,83,204,0,141,204,251,1,41,204,204,3,3,84,3,204,82,85,84,0,106,86,84,4,141,204,135,2,85,204,85,0,141,204,135,2,109,204,4,86,1,204,52,0,143,204,134,2,119,0,12,0,1,204,0,0,53,204,0,204,80,13,0,0,1,7,0,0,119,0,40,13,141,203,135,2,1,205,255,0,19,205,81,205,134,204,0,0,232,163,0,0,203,205,2,0,141,204,134,2,32,204,204,52,121,204,17,0,1,204,0,0,143,204,134,2,1,204,0,0,53,204,0,204,180,13,0,0,141,205,255,1,0,204,205,0,143,204,254,1,4,204,168,174,143,204,48,2,141,205,57,2,0,204,205,0,143,204,52,2,0,204,79,0,143,204,81,2,119,0,188,252,141,204,91,2,78,87,204,0,141,203,104,2,33,203,203,0,41,206,87,24,42,206,206,24,38,206,206,15,32,206,206,3,19,203,203,206,121,203,6,0,41,203,87,24,42,203,203,24,38,203,203,223,0,205,203,0,119,0,4,0,41,203,87,24,42,203,203,24,0,205,203,0,0,204,205,0,143,204,109,2,141,204,22,2,1,205,0,32,19,204,204,205,0,89,204,0,141,204,22,2,2,205,0,0,255,255,254,255,19,204,204,205,0,90,204,0,32,205,89,0,141,203,22,2,125,204,205,203,90,0,0,0,143,204,23,2,141,204,109,2,1,206,65,0,1,207,56,0,138,204,206,207,108,15,0,0,44,15,0,0,112,15,0,0,44,15,0,0,200,15,0,0,204,15,0,0,208,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,212,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,60,16,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,44,15,0,0,64,16,0,0,44,15,0,0,68,16,0,0,172,16,0,0,148,17,0,0,228,52,0,0,232,52,0,0,44,15,0,0,236,52,0,0,44,15,0,0,44,15,0,0,44,15,0,0,240,52,0,0,28,53,0,0,96,55,0,0,168,56,0,0,44,15,0,0,44,15,0,0,240,56,0,0,44,15,0,0,32,57,0,0,44,15,0,0,44,15,0,0,84,57,0,0,141,207,81,2,0,206,207,0,143,206,240,1,141,207,23,2,0,206,207,0,143,206,26,2,141,207,59,2,0,206,207,0,143,206,66,2,1,206,0,0,143,206,71,2,1,206,202,19,143,206,76,2,0,206,53,0,143,206,124,2,119,0,135,10,119,0,138,0,141,206,135,2,82,167,206,0,141,206,135,2,106,169,206,4,141,206,135,2,109,206,8,167,141,206,135,2,25,206,206,8,1,205,0,0,109,206,4,205,141,205,135,2,141,206,135,2,25,206,206,8,85,205,206,0,141,205,135,2,25,206,205,8,143,206,222,1,1,206,255,255,143,206,65,2,1,206,86,0,143,206,134,2,119,0,112,10,119,0,115,0,119,0,114,0,119,0,113,0,141,206,135,2,82,49,206,0,141,206,59,2,32,170,206,0,121,170,14,0,1,205,32,0,141,203,113,2,1,207,0,0,141,208,23,2,134,206,0,0,100,219,0,0,0,205,203,207,208,0,0,0,1,206,0,0,143,206,28,2,1,206,97,0,143,206,134,2,119,0,91,10,0,206,49,0,143,206,222,1,141,208,59,2,0,206,208,0,143,206,65,2,1,206,86,0,143,206,134,2,119,0,83,10,119,0,70,10,119,0,85,0,141,206,135,2,82,157,206,0,141,206,135,2,106,158,206,4,141,206,135,2,1,205,24,2,3,206,206,205,1,205,255,0,19,205,157,205,107,206,39,205,141,206,135,2,1,203,24,2,3,206,206,203,25,205,206,39,143,205,240,1,0,205,90,0,143,205,26,2,1,205,1,0,143,205,66,2,1,205,0,0,143,205,71,2,1,205,202,19,143,205,76,2,0,205,53,0,143,205,124,2,119,0,55,10,141,205,135,2,82,139,205,0,141,205,135,2,106,140,205,4,34,205,140,0,121,205,21,0,1,205,0,0,1,203,0,0,134,141,0,0,144,23,1,0,205,203,139,140,128,203,0,0,0,142,203,0,141,203,135,2,85,203,141,0,141,203,135,2,109,203,4,142,0,143,141,0,0,144,142,0,1,203,1,0,143,203,67,2,1,203,202,19,143,203,72,2,1,203,76,0,143,203,134,2,119,0,29,10,141,203,23,2,1,205,0,8,19,203,203,205,32,203,203,0,121,203,19,0,141,203,23,2,38,203,203,1,32,203,203,0,1,205,202,19,1,206,204,19,125,5,203,205,206,0,0,0,0,143,139,0,0,144,140,0,141,205,23,2,38,205,205,1,0,206,205,0,143,206,67,2,0,206,5,0,143,206,72,2,1,206,76,0,143,206,134,2,119,0,6,10,0,143,139,0,0,144,140,0,1,206,1,0,143,206,67,2,1,206,203,19,143,206,72,2,1,206,76,0,143,206,134,2,119,0,253,9,141,206,135,2,86,189,206,0,141,206,135,2,1,208,0,0,109,206,16,208,127,208,0,0,87,208,189,0,127,208,0,0,82,190,208,0,127,208,0,0,106,192,208,4,34,208,192,0,121,208,7,0,68,13,189,0,1,208,1,0,143,208,68,2,1,208,79,27,143,208,74,2,119,0,26,0,141,208,23,2,1,206,0,8,19,208,208,206,32,208,208,0,121,208,16,0,141,208,23,2,38,208,208,1,32,208,208,0,1,206,80,27,1,207,85,27,125,6,208,206,207,0,0,0,58,13,189,0,141,206,23,2,38,206,206,1,0,207,206,0,143,207,68,2,0,207,6,0,143,207,74,2,119,0,6,0,58,13,189,0,1,207,1,0,143,207,68,2,1,207,82,27,143,207,74,2,127,207,0,0,87,207,13,0,127,207,0,0,82,193,207,0,127,207,0,0,106,194,207,4,2,207,0,0,0,0,240,127,19,207,194,207,2,206,0,0,0,0,240,127,16,207,207,206,2,206,0,0,0,0,240,127,19,206,194,206,2,208,0,0,0,0,240,127,13,206,206,208,1,208,0,0,34,208,208,0,19,206,206,208,20,207,207,206,121,207,46,8,141,206,135,2,25,206,206,16,134,207,0,0,172,25,1,0,13,206,0,0,144,207,4,1,142,207,4,1,59,206,2,0,65,207,207,206,59,206,0,0,70,207,207,206,121,207,8,0,141,206,135,2,106,207,206,16,143,207,5,1,141,207,135,2,141,206,5,1,26,206,206,1,109,207,16,206,141,206,109,2,39,206,206,32,32,206,206,97,121,206,119,1,141,207,74,2,25,206,207,9,143,206,6,1,141,207,109,2,38,207,207,32,32,207,207,0,141,208,74,2,141,203,6,1,125,206,207,208,203,0,0,0,143,206,73,2,141,203,68,2,39,203,203,2,0,206,203,0,143,206,8,1,1,203,11,0,141,208,59,2,16,206,203,208,143,206,9,1,1,208,12,0,141,203,59,2,4,206,208,203,143,206,10,1,141,206,9,1,141,203,10,1,32,203,203,0,20,206,206,203,121,206,5,0,142,206,4,1,59,203,2,0,65,14,206,203,119,0,49,0,141,206,10,1,0,203,206,0,143,203,78,2,59,203,8,0,144,203,79,2,141,206,78,2,26,203,206,1,143,203,11,1,142,206,79,2,59,208,16,0,65,203,206,208,144,203,12,1,141,203,11,1,32,203,203,0,120,203,8,0,141,208,11,1,0,203,208,0,143,203,78,2,142,208,12,1,58,203,208,0,144,203,79,2,119,0,240,255,141,208,73,2,78,203,208,0,143,203,13,1,141,203,13,1,41,203,203,24,42,203,203,24,32,203,203,45,121,203,11,0,142,203,12,1,142,208,4,1,59,206,2,0,65,208,208,206,68,208,208,0,142,206,12,1,64,208,208,206,63,203,203,208,68,14,203,0,119,0,9,0,142,203,4,1,59,208,2,0,65,203,203,208,142,208,12,1,63,203,203,208,142,208,12,1,64,14,203,208,119,0,1,0,141,203,135,2,106,208,203,16,143,208,15,1,141,206,15,1,34,206,206,0,121,206,6,0,1,206,0,0,141,207,15,1,4,206,206,207,0,203,206,0,119,0,3,0,141,206,15,1,0,203,206,0,0,208,203,0,143,208,16,1,141,203,16,1,141,206,16,1,34,206,206,0,41,206,206,31,42,206,206,31,141,207,135,2,1,205,64,2,3,207,207,205,25,207,207,12,134,208,0,0,184,215,0,0,203,206,207,0,143,208,17,1,141,208,17,1,141,207,135,2,1,206,64,2,3,207,207,206,25,207,207,12,45,208,208,207,244,20,0,0,141,208,135,2,1,207,64,2,3,208,208,207,1,207,48,0,107,208,11,207,141,208,135,2,1,206,64,2,3,208,208,206,25,207,208,11,143,207,16,2,119,0,4,0,141,208,17,1,0,207,208,0,143,207,16,2,141,208,16,2,26,207,208,1,143,207,18,1,141,207,18,1,141,208,15,1,42,208,208,31,38,208,208,2,25,208,208,43,1,206,255,0,19,208,208,206,83,207,208,0,141,207,16,2,26,208,207,2,143,208,20,1,141,208,20,1,141,207,109,2,25,207,207,15,1,206,255,0,19,207,207,206,83,208,207,0,141,208,59,2,34,207,208,1,143,207,58,2,58,16,14,0,141,208,135,2,3,207,208,200,143,207,82,2,75,207,16,0,143,207,21,1,1,208,212,19,141,206,21,1,90,207,208,206,143,207,22,1,141,208,82,2,25,207,208,1,143,207,24,1,141,207,82,2,141,208,22,1,1,206,255,0,19,208,208,206,141,206,109,2,38,206,206,32,20,208,208,206,1,206,255,0,19,208,208,206,83,207,208,0,141,207,21,1,76,207,207,0,64,208,16,207,144,208,25,1,141,208,24,1,141,207,57,1,4,208,208,207,32,208,208,1,121,208,27,0,141,208,23,2,38,208,208,8,32,208,208,0,141,207,58,2,142,206,25,1,59,203,16,0,65,206,206,203,59,203,0,0,69,206,206,203,19,207,207,206,19,208,208,207,121,208,5,0,141,207,24,1,0,208,207,0,143,208,84,2,119,0,14,0,141,207,82,2,25,208,207,2,143,208,26,1,141,208,24,1,1,207,46,0,83,208,207,0,141,208,26,1,0,207,208,0,143,207,84,2,119,0,4,0,141,208,24,1,0,207,208,0,143,207,84,2,142,207,25,1,59,208,16,0,65,207,207,208,59,208,0,0,70,207,207,208,121,207,8,0,142,207,25,1,59,208,16,0,65,16,207,208,141,207,84,2,0,208,207,0,143,208,82,2,119,0,187,255,141,207,84,2,0,208,207,0,143,208,85,2,119,0,1,0,141,207,59,2,33,208,207,0,143,208,27,1,1,207,254,255,141,206,57,1,4,207,207,206,141,206,85,2,3,207,207,206,141,206,59,2,15,208,207,206,143,208,28,1,141,206,227,1,25,206,206,2,141,207,59,2,3,208,206,207,143,208,29,1,141,206,27,1,141,203,28,1,19,206,206,203,121,206,6,0,141,206,29,1,141,203,20,1,4,206,206,203,0,207,206,0,119,0,9,0,141,206,227,1,141,203,57,1,4,206,206,203,141,203,20,1,4,206,206,203,141,203,85,2,3,206,206,203,0,207,206,0,0,208,207,0,143,208,49,2,1,207,32,0,141,206,113,2,141,203,49,2,141,205,8,1,3,203,203,205,141,205,23,2,134,208,0,0,100,219,0,0,0,207,206,203,205,0,0,0,82,208,0,0,143,208,30,1,141,208,30,1,38,208,208,32,32,208,208,0,121,208,6,0,141,205,73,2,141,203,8,1,134,208,0,0,128,206,0,0,205,203,0,0,1,203,48,0,141,205,113,2,141,206,49,2,141,207,8,1,3,206,206,207,141,207,23,2,2,209,0,0,0,0,1,0,21,207,207,209,134,208,0,0,100,219,0,0,0,203,205,206,207,0,0,0,82,208,0,0,143,208,32,1,141,208,32,1,38,208,208,32,32,208,208,0,121,208,9,0,141,207,135,2,3,207,207,200,141,206,85,2,141,205,57,1,4,206,206,205,134,208,0,0,128,206,0,0,207,206,0,0,1,206,48,0,141,207,49,2,141,205,85,2,141,203,57,1,4,205,205,203,141,203,227,1,141,209,20,1,4,203,203,209,3,205,205,203,4,207,207,205,1,205,0,0,1,203,0,0,134,208,0,0,100,219,0,0,0,206,207,205,203,0,0,0,82,208,0,0,143,208,33,1,141,208,33,1,38,208,208,32,32,208,208,0,121,208,8,0,141,203,20,1,141,205,227,1,141,207,20,1,4,205,205,207,134,208,0,0,128,206,0,0,203,205,0,0,1,205,32,0,141,203,113,2,141,207,49,2,141,206,8,1,3,207,207,206,141,206,23,2,1,209,0,32,21,206,206,209,134,208,0,0,100,219,0,0,0,205,203,207,206,0,0,0,141,206,49,2,141,207,8,1,3,206,206,207,141,207,113,2,15,208,206,207,143,208,35,1,141,206,35,1,121,206,4,0,141,206,113,2,0,207,206,0,119,0,5,0,141,206,49,2,141,203,8,1,3,206,206,203,0,207,206,0,0,208,207,0,143,208,111,2,141,208,111,2,0,8,208,0,119,0,250,6,141,207,59,2,34,208,207,0,143,208,36,1,141,208,36,1,1,207,6,0,141,206,59,2,125,41,208,207,206,0,0,0,142,206,4,1,59,207,2,0,65,206,206,207,59,207,0,0,70,206,206,207,121,206,18,0,141,207,135,2,106,206,207,16,143,206,37,1,141,206,135,2,141,207,37,1,26,207,207,28,109,206,16,207,142,207,4,1,59,206,2,0,65,207,207,206,60,206,0,0,0,0,0,16,65,23,207,206,141,207,37,1,26,206,207,28,143,206,38,1,119,0,8,0,141,206,135,2,106,50,206,16,142,206,4,1,59,207,2,0,65,23,206,207,0,207,50,0,143,207,38,1,141,206,38,1,34,207,206,0,143,207,39,1,141,206,39,1,121,206,5,0,141,206,135,2,25,206,206,24,0,207,206,0,119,0,6,0,141,206,135,2,25,206,206,24,1,208,32,1,3,206,206,208,0,207,206,0,0,25,207,0,58,27,23,0,0,207,25,0,143,207,118,2,75,207,27,0,143,207,41,1,141,207,118,2,141,206,41,1,85,207,206,0,141,207,118,2,25,206,207,4,143,206,42,1,141,207,41,1,77,207,207,0,64,206,27,207,144,206,43,1,142,206,43,1,60,207,0,0,0,202,154,59,65,206,206,207,59,207,0,0,70,206,206,207,121,206,9,0,142,206,43,1,60,207,0,0,0,202,154,59,65,27,206,207,141,206,42,1,0,207,206,0,143,207,118,2,119,0,230,255,141,207,135,2,106,43,207,16,1,207,0,0,47,207,207,43,252,28,0,0,0,207,43,0,143,207,44,1,0,207,25,0,143,207,239,1,141,206,42,1,0,207,206,0,143,207,123,2,1,206,29,0,141,208,44,1,15,207,206,208,143,207,45,1,141,208,45,1,1,206,29,0,141,203,44,1,125,207,208,206,203,0,0,0,143,207,46,1,141,203,123,2,26,207,203,4,143,207,2,2,141,203,2,2,141,206,239,1,16,207,203,206,143,207,47,1,141,207,47,1,121,207,5,0,141,206,239,1,0,207,206,0,143,207,241,1,119,0,84,0,1,207,0,0,143,207,252,1,141,206,2,2,0,207,206,0,143,207,3,2,141,206,3,2,82,207,206,0,143,207,48,1,141,206,48,1,1,203,0,0,141,208,46,1,135,207,0,0,206,203,208,0,143,207,49,1,128,208,0,0,0,207,208,0,143,207,50,1,141,208,49,1,141,203,50,1,141,206,252,1,1,205,0,0,134,207,0,0,0,25,1,0,208,203,206,205,143,207,51,1,128,205,0,0,0,207,205,0,143,207,52,1,141,205,51,1,141,206,52,1,1,203,0,0,134,207,0,0,36,19,1,0,205,206,201,203,143,207,53,1,128,203,0,0,0,207,203,0,143,207,54,1,141,207,3,2,141,203,53,1,85,207,203,0,141,207,51,1,141,206,52,1,1,205,0,0,134,203,0,0,224,24,1,0,207,206,201,205,143,203,55,1,128,205,0,0,0,203,205,0,143,203,56,1,141,205,3,2,26,203,205,4,143,203,1,2,141,205,1,2,141,206,239,1,16,203,205,206,143,203,58,1,141,203,58,1,120,203,8,0,141,206,55,1,0,203,206,0,143,203,252,1,141,206,1,2,0,203,206,0,143,203,3,2,119,0,195,255,141,203,55,1,32,203,203,0,121,203,5,0,141,206,239,1,0,203,206,0,143,203,241,1,119,0,10,0,141,206,239,1,26,203,206,4,143,203,59,1,141,203,59,1,141,206,55,1,85,203,206,0,141,203,59,1,0,206,203,0,143,206,241,1,141,203,123,2,0,206,203,0,143,206,125,2,141,203,241,1,141,205,125,2,16,206,203,205,143,206,60,1,141,206,60,1,120,206,5,0,141,205,125,2,0,206,205,0,143,206,126,2,119,0,18,0,141,205,125,2,26,206,205,4,143,206,61,1,141,205,61,1,82,206,205,0,143,206,62,1,141,206,62,1,32,206,206,0,121,206,5,0,141,205,61,1,0,206,205,0,143,206,125,2,119,0,234,255,141,205,125,2,0,206,205,0,143,206,126,2,119,0,1,0,141,205,135,2,106,206,205,16,143,206,63,1,141,206,135,2,141,205,63,1,141,203,46,1,4,205,205,203,109,206,16,205,1,205,0,0,141,206,63,1,141,203,46,1,4,206,206,203,47,205,205,206,212,28,0,0,141,206,63,1,141,203,46,1,4,205,206,203,143,205,44,1,141,203,241,1,0,205,203,0,143,205,239,1,141,203,126,2,0,205,203,0,143,205,123,2,119,0,96,255,141,205,63,1,141,203,46,1,4,44,205,203,141,205,241,1,0,203,205,0,143,203,238,1,141,205,126,2,0,203,205,0,143,203,122,2,119,0,7,0,0,44,43,0,0,203,25,0,143,203,238,1,141,205,42,1,0,203,205,0,143,203,122,2,34,203,44,0,143,203,65,1,141,203,65,1,121,203,175,0,0,203,44,0,143,203,67,1,141,205,238,1,0,203,205,0,143,203,243,1,141,205,122,2,0,203,205,0,143,203,128,2,1,205,0,0,141,206,67,1,4,203,205,206,143,203,66,1,1,206,9,0,141,205,66,1,15,206,206,205,1,205,9,0,141,207,66,1,125,203,206,205,207,0,0,0,143,203,68,1,141,207,243,1,141,205,128,2,16,203,207,205,143,203,69,1,141,203,69,1,121,203,75,0,1,203,0,0,143,203,253,1,141,205,243,1,0,203,205,0,143,203,4,2,141,205,4,2,82,203,205,0,143,203,73,1,141,205,73,1,141,207,68,1,24,205,205,207,141,207,253,1,3,203,205,207,143,203,74,1,141,203,4,2,141,207,74,1,85,203,207,0,141,203,73,1,1,205,1,0,141,206,68,1,22,205,205,206,26,205,205,1,19,203,203,205,141,205,68,1,24,205,201,205,5,207,203,205,143,207,75,1,141,205,4,2,25,207,205,4,143,207,76,1,141,205,76,1,141,203,128,2,16,207,205,203,143,207,77,1,141,207,77,1,121,207,8,0,141,203,75,1,0,207,203,0,143,207,253,1,141,203,76,1,0,207,203,0,143,207,4,2,119,0,219,255,141,203,243,1,82,207,203,0,143,207,78,1,141,203,243,1,25,207,203,4,143,207,79,1,141,207,78,1,32,207,207,0,141,203,79,1,141,205,243,1,125,33,207,203,205,0,0,0,141,205,75,1,32,205,205,0,121,205,6,0,0,35,33,0,141,203,128,2,0,205,203,0,143,205,129,2,119,0,28,0,141,203,128,2,25,205,203,4,143,205,80,1,141,205,128,2,141,203,75,1,85,205,203,0,0,35,33,0,141,205,80,1,0,203,205,0,143,203,129,2,119,0,17,0,141,205,243,1,82,203,205,0,143,203,71,1,141,205,243,1,25,203,205,4,143,203,72,1,141,203,71,1,32,203,203,0,141,205,72,1,141,207,243,1,125,34,203,205,207,0,0,0,0,35,34,0,141,205,128,2,0,207,205,0,143,207,129,2,141,205,109,2,39,205,205,32,32,205,205,102,125,207,205,25,35,0,0,0,143,207,81,1,141,205,129,2,0,207,205,0,143,207,82,1,25,205,41,25,28,205,205,9,38,205,205,255,25,205,205,1,141,203,82,1,141,206,81,1,4,203,203,206,42,203,203,2,47,205,205,203,100,31,0,0,141,205,81,1,25,203,41,25,28,203,203,9,38,203,203,255,25,203,203,1,41,203,203,2,3,205,205,203,0,207,205,0,119,0,3,0,141,205,129,2,0,207,205,0,0,52,207,0,141,205,135,2,106,207,205,16,143,207,83,1,141,207,135,2,141,205,83,1,141,203,68,1,3,205,205,203,109,207,16,205,141,205,83,1,141,207,68,1,3,205,205,207,34,205,205,0,121,205,10,0,141,207,83,1,141,203,68,1,3,205,207,203,143,205,67,1,0,205,35,0,143,205,243,1,0,205,52,0,143,205,128,2,119,0,96,255,0,205,35,0,143,205,242,1,0,205,52,0,143,205,127,2,119,0,7,0,141,203,238,1,0,205,203,0,143,205,242,1,141,203,122,2,0,205,203,0,143,205,127,2,141,203,242,1,141,207,127,2,16,205,203,207,143,205,84,1,141,205,84,1,121,205,44,0,141,207,242,1,0,205,207,0,143,205,85,1,141,207,242,1,82,205,207,0,143,205,86,1,141,205,86,1,35,205,205,10,121,205,7,0,141,207,85,1,4,207,25,207,42,207,207,2,27,205,207,9,143,205,12,2,119,0,31,0,141,207,85,1,4,207,25,207,42,207,207,2,27,205,207,9,143,205,11,2,1,205,10,0,143,205,30,2,141,207,30,2,27,205,207,10,143,205,87,1,141,207,11,2,25,205,207,1,143,205,88,1,141,205,86,1,141,207,87,1,48,205,205,207,156,32,0,0,141,207,88,1,0,205,207,0,143,205,12,2,119,0,10,0,141,207,88,1,0,205,207,0,143,205,11,2,141,207,87,1,0,205,207,0,143,205,30,2,119,0,236,255,1,205,0,0,143,205,12,2,141,207,109,2,39,207,207,32,33,207,207,102,141,203,12,2,1,206,0,0,125,205,207,203,206,0,0,0,143,205,89,1,141,206,89,1,4,206,41,206,33,203,41,0,141,207,109,2,39,207,207,32,32,207,207,103,19,203,203,207,41,203,203,31,42,203,203,31,3,205,206,203,143,205,91,1,141,203,127,2,0,205,203,0,143,205,92,1,141,205,91,1,141,203,92,1,4,203,203,25,42,203,203,2,27,203,203,9,26,203,203,9,47,205,205,203,128,38,0,0,25,203,25,4,141,206,91,1,1,207,0,36,3,206,206,207,28,206,206,9,38,206,206,255,1,207,0,4,4,206,206,207,41,206,206,2,3,205,203,206,143,205,94,1,141,205,91,1,1,206,0,36,3,205,205,206,30,205,205,9,38,205,205,255,25,205,205,1,34,205,205,9,121,205,30,0,1,205,10,0,143,205,35,2,141,206,91,1,1,203,0,36,3,206,206,203,30,206,206,9,38,206,206,255,25,205,206,1,143,205,45,2,141,206,35,2,27,205,206,10,143,205,95,1,141,206,45,2,25,205,206,1,143,205,44,2,141,205,44,2,32,205,205,9,121,205,5,0,141,206,95,1,0,205,206,0,143,205,33,2,119,0,10,0,141,206,95,1,0,205,206,0,143,205,35,2,141,206,44,2,0,205,206,0,143,205,45,2,119,0,237,255,1,205,10,0,143,205,33,2,141,206,94,1,82,205,206,0,143,205,96,1,141,206,96,1,141,203,33,2,9,206,206,203,38,206,206,255,0,205,206,0,143,205,97,1,141,206,94,1,25,206,206,4,141,203,127,2,13,205,206,203,143,205,98,1,141,205,98,1,141,203,97,1,32,203,203,0,19,205,205,203,121,205,11,0,141,203,242,1,0,205,203,0,143,205,247,1,141,203,94,1,0,205,203,0,143,205,7,2,141,203,12,2,0,205,203,0,143,205,14,2,119,0,239,0,141,203,96,1,141,206,33,2,7,203,203,206,38,203,203,255,0,205,203,0,143,205,99,1,141,203,99,1,38,203,203,1,32,203,203,0,121,203,5,0,61,203,0,0,0,0,0,90,58,205,203,0,119,0,5,0,62,203,0,0,1,0,0,0,0,0,64,67,58,205,203,0,58,17,205,0,141,203,33,2,28,203,203,2,38,203,203,255,0,205,203,0,143,205,100,1,141,205,97,1,141,203,100,1,48,205,205,203,244,34,0,0,61,205,0,0,0,0,0,63,144,205,101,2,119,0,16,0,141,203,98,1,141,206,97,1,141,207,100,1,13,206,206,207,19,203,203,206,121,203,4,0,59,203,1,0,58,205,203,0,119,0,4,0,61,203,0,0,0,0,192,63,58,205,203,0,58,26,205,0,58,205,26,0,144,205,101,2,141,203,68,2,32,205,203,0,143,205,101,1,141,205,101,1,121,205,7,0,58,205,17,0,144,205,80,2,142,203,101,2,58,205,203,0,144,205,102,2,119,0,23,0,141,203,74,2,78,205,203,0,143,205,102,1,141,205,102,1,41,205,205,24,42,205,205,24,32,205,205,45,120,205,7,0,58,205,17,0,144,205,80,2,142,203,101,2,58,205,203,0,144,205,102,2,119,0,9,0,142,203,101,2,68,205,203,0,144,205,103,1,68,205,17,0,144,205,80,2,142,203,103,1,58,205,203,0,144,205,102,2,141,205,94,1,141,203,96,1,141,206,97,1,4,203,203,206,85,205,203,0,142,205,80,2,142,206,102,2,63,203,205,206,144,203,104,1,142,206,104,1,142,205,80,2,70,203,206,205,143,203,105,1,141,203,105,1,120,203,11,0,141,205,242,1,0,203,205,0,143,203,247,1,141,205,94,1,0,203,205,0,143,203,7,2,141,205,12,2,0,203,205,0,143,203,14,2,119,0,134,0,141,205,96,1,141,206,97,1,4,205,205,206,141,206,33,2,3,203,205,206,143,203,106,1,141,203,94,1,141,206,106,1,85,203,206,0,2,206,0,0,255,201,154,59,141,203,106,1,48,206,206,203,56,37,0,0,141,203,242,1,0,206,203,0,143,206,245,1,141,203,94,1,0,206,203,0,143,206,6,2,141,203,6,2,26,206,203,4,143,206,108,1,141,206,6,2,1,203,0,0,85,206,203,0,141,206,108,1,141,205,245,1,16,203,206,205,143,203,109,1,141,203,109,1,121,203,11,0,141,205,245,1,26,203,205,4,143,203,110,1,141,203,110,1,1,205,0,0,85,203,205,0,141,203,110,1,0,205,203,0,143,205,246,1,119,0,4,0,141,203,245,1,0,205,203,0,143,205,246,1,141,203,108,1,82,205,203,0,143,205,111,1,141,205,108,1,141,203,111,1,25,203,203,1,85,205,203,0,2,203,0,0,255,201,154,59,141,205,111,1,25,205,205,1,48,203,203,205,28,37,0,0,141,205,246,1,0,203,205,0,143,203,245,1,141,205,108,1,0,203,205,0,143,203,6,2,119,0,212,255,141,205,246,1,0,203,205,0,143,203,244,1,141,205,108,1,0,203,205,0,143,203,5,2,119,0,7,0,141,205,242,1,0,203,205,0,143,203,244,1,141,205,94,1,0,203,205,0,143,203,5,2,141,205,244,1,0,203,205,0,143,203,112,1,141,205,244,1,82,203,205,0,143,203,114,1,141,203,114,1,35,203,203,10,121,203,13,0,141,205,244,1,0,203,205,0,143,203,247,1,141,205,5,2,0,203,205,0,143,203,7,2,141,205,112,1,4,205,25,205,42,205,205,2,27,203,205,9,143,203,14,2,119,0,35,0,141,205,112,1,4,205,25,205,42,205,205,2,27,203,205,9,143,203,13,2,1,203,10,0,143,203,36,2,141,205,36,2,27,203,205,10,143,203,115,1,141,205,13,2,25,203,205,1,143,203,116,1,141,203,114,1,141,205,115,1,48,203,203,205,16,38,0,0,141,205,244,1,0,203,205,0,143,203,247,1,141,205,5,2,0,203,205,0,143,203,7,2,141,205,116,1,0,203,205,0,143,203,14,2,119,0,8,0,141,205,116,1,0,203,205,0,143,203,13,2,141,205,115,1,0,203,205,0,143,203,36,2,119,0,230,255,141,205,7,2,25,203,205,4,143,203,117,1,141,205,117,1,141,206,127,2,16,203,205,206,143,203,118,1,141,203,118,1,141,206,117,1,141,205,127,2,125,51,203,206,205,0,0,0,141,206,247,1,0,205,206,0,143,205,248,1,141,206,14,2,0,205,206,0,143,205,15,2,0,205,51,0,143,205,133,2,119,0,10,0,141,206,242,1,0,205,206,0,143,205,248,1,141,206,12,2,0,205,206,0,143,205,15,2,141,206,127,2,0,205,206,0,143,205,133,2,1,206,0,0,141,203,15,2,4,205,206,203,143,205,119,1,141,203,133,2,0,205,203,0,143,205,131,2,141,203,248,1,141,206,131,2,16,205,203,206,143,205,120,1,141,205,120,1,120,205,6,0,1,38,0,0,141,206,131,2,0,205,206,0,143,205,132,2,119,0,19,0,141,206,131,2,26,205,206,4,143,205,121,1,141,206,121,1,82,205,206,0,143,205,123,1,141,205,123,1,32,205,205,0,121,205,5,0,141,206,121,1,0,205,206,0,143,205,131,2,119,0,233,255,1,38,1,0,141,206,131,2,0,205,206,0,143,205,132,2,119,0,1,0,141,205,109,2,39,205,205,32,32,205,205,103,121,205,148,0,33,205,41,0,38,205,205,1,40,205,205,1,3,39,205,41,141,206,15,2,15,205,206,39,143,205,124,1,1,206,251,255,141,203,15,2,15,205,206,203,143,205,125,1,141,205,124,1,141,203,125,1,19,205,205,203,121,205,10,0,26,203,39,1,141,206,15,2,4,205,203,206,143,205,126,1,141,205,109,2,26,11,205,1,141,205,126,1,0,20,205,0,119,0,4,0,141,205,109,2,26,11,205,2,26,20,39,1,141,205,23,2,38,205,205,8,32,205,205,0,120,205,7,0,0,15,11,0,0,24,20,0,141,205,23,2,38,205,205,8,0,47,205,0,119,0,117,0,121,38,49,0,141,206,132,2,26,205,206,4,143,205,127,1,141,206,127,1,82,205,206,0,143,205,128,1,141,205,128,1,32,205,205,0,121,205,4,0], eb + 0);
  HEAPU8.set([1,205,9,0,143,205,47,2,119,0,39,0,141,205,128,1,31,205,205,10,38,205,205,255,32,205,205,0,121,205,6,0,1,205,10,0,143,205,39,2,1,205,0,0,143,205,46,2,119,0,4,0,1,205,0,0,143,205,47,2,119,0,26,0,141,206,39,2,27,205,206,10,143,205,129,1,141,206,46,2,25,205,206,1,143,205,130,1,141,205,128,1,141,206,129,1,9,205,205,206,38,205,205,255,32,205,205,0,121,205,8,0,141,206,129,1,0,205,206,0,143,205,39,2,141,206,130,1,0,205,206,0,143,205,46,2,119,0,238,255,141,206,130,1,0,205,206,0,143,205,47,2,119,0,3,0,1,205,9,0,143,205,47,2,39,206,11,32,0,205,206,0,143,205,131,1,141,206,132,2,0,205,206,0,143,205,132,1,141,205,131,1,32,205,205,102,121,205,24,0,141,206,132,1,4,206,206,25,42,206,206,2,27,206,206,9,26,206,206,9,141,203,47,2,4,205,206,203,143,205,133,1,141,205,133,1,34,205,205,0,1,203,0,0,141,206,133,1,125,21,205,203,206,0,0,0,15,206,20,21,143,206,134,1,141,206,134,1,125,18,206,20,21,0,0,0,0,15,11,0,0,24,18,0,1,47,0,0,119,0,34,0,141,203,132,1,4,203,203,25,42,203,203,2,27,203,203,9,26,203,203,9,141,205,15,2,3,206,203,205,143,206,135,1,141,205,135,1,141,203,47,2,4,206,205,203,143,206,136,1,141,206,136,1,34,206,206,0,1,203,0,0,141,205,136,1,125,22,206,203,205,0,0,0,15,205,20,22,143,205,137,1,141,205,137,1,125,19,205,20,22,0,0,0,0,15,11,0,0,24,19,0,1,47,0,0,119,0,7,0,141,205,109,2,0,15,205,0,0,24,41,0,141,205,23,2,38,205,205,8,0,47,205,0,20,203,24,47,0,205,203,0,143,205,138,1,39,203,15,32,0,205,203,0,143,205,139,1,141,205,139,1,32,205,205,102,121,205,16,0,1,203,0,0,141,206,15,2,15,205,203,206,143,205,141,1,141,206,141,1,141,203,15,2,1,207,0,0,125,205,206,203,207,0,0,0,143,205,142,1,141,205,142,1,0,42,205,0,1,205,0,0,143,205,19,2,119,0,83,0,141,207,15,2,34,205,207,0,143,205,143,1,141,207,143,1,141,203,119,1,141,206,15,2,125,205,207,203,206,0,0,0,143,205,144,1,141,206,144,1,141,203,144,1,34,203,203,0,41,203,203,31,42,203,203,31,141,207,135,2,1,208,64,2,3,207,207,208,25,207,207,12,134,205,0,0,184,215,0,0,206,203,207,0,143,205,145,1,141,205,227,1,141,207,145,1,4,205,205,207,34,205,205,2,121,205,23,0,141,207,145,1,0,205,207,0,143,205,18,2,141,207,18,2,26,205,207,1,143,205,147,1,141,205,147,1,1,207,48,0,83,205,207,0,141,207,227,1,141,205,147,1,4,207,207,205,34,207,207,2,121,207,5,0,141,205,147,1,0,207,205,0,143,207,18,2,119,0,242,255,141,205,147,1,0,207,205,0,143,207,17,2,119,0,4,0,141,205,145,1,0,207,205,0,143,207,17,2,141,205,15,2,42,205,205,31,0,207,205,0,143,207,148,1,141,205,17,2,26,207,205,1,143,207,149,1,141,207,149,1,141,205,148,1,38,205,205,2,25,205,205,43,1,203,255,0,19,205,205,203,83,207,205,0,1,207,255,0,19,207,15,207,0,205,207,0,143,205,150,1,141,207,17,2,26,205,207,2,143,205,152,1,141,205,152,1,141,207,150,1,83,205,207,0,141,207,227,1,141,205,152,1,4,42,207,205,141,207,152,1,0,205,207,0,143,205,19,2,141,207,68,2,25,205,207,1,143,205,153,1,141,207,153,1,3,205,207,24,143,205,154,1,141,207,154,1,141,203,138,1,33,203,203,0,38,203,203,1,3,207,207,203,3,205,207,42,143,205,155,1,1,207,32,0,141,203,113,2,141,206,155,1,141,208,23,2,134,205,0,0,100,219,0,0,0,207,203,206,208,0,0,0,82,205,0,0,143,205,156,1,141,205,156,1,38,205,205,32,32,205,205,0,121,205,6,0,141,208,74,2,141,206,68,2,134,205,0,0,128,206,0,0,208,206,0,0,1,206,48,0,141,208,113,2,141,203,155,1,141,207,23,2,2,209,0,0,0,0,1,0,21,207,207,209,134,205,0,0,100,219,0,0,0,206,208,203,207,0,0,0,141,205,139,1,32,205,205,102,121,205,233,0,141,207,248,1,16,205,25,207,143,205,158,1,141,207,158,1,141,203,248,1,125,205,207,25,203,0,0,0,143,205,77,2,141,203,77,2,0,205,203,0,143,205,8,2,141,203,8,2,82,205,203,0,143,205,159,1,141,203,159,1,1,207,0,0,134,205,0,0,184,215,0,0,203,207,75,0,143,205,160,1,141,207,8,2,141,203,77,2,13,205,207,203,143,205,161,1,141,205,161,1,121,205,17,0,141,205,160,1,52,205,205,75,140,44,0,0,141,203,160,1,0,205,203,0,143,205,94,2,119,0,46,0,141,205,135,2,3,205,205,200,1,203,48,0,107,205,8,203,141,205,135,2,3,205,205,200,25,203,205,8,143,203,94,2,119,0,37,0,141,203,135,2,3,203,203,200,141,205,160,1,55,203,203,205,212,44,0,0,141,205,160,1,0,203,205,0,143,203,94,2,119,0,28,0,141,205,135,2,3,205,205,200,1,207,48,0,141,208,160,1,141,206,57,1,4,208,208,206,135,203,1,0,205,207,208,0,141,208,160,1,0,203,208,0,143,203,93,2,141,208,93,2,26,203,208,1,143,203,162,1,141,203,135,2,3,203,203,200,141,208,162,1,48,203,203,208,48,45,0,0,141,208,162,1,0,203,208,0,143,203,93,2,119,0,245,255,141,208,162,1,0,203,208,0,143,203,94,2,119,0,1,0,82,203,0,0,143,203,163,1,141,203,163,1,38,203,203,32,32,203,203,0,121,203,10,0,141,208,94,2,0,203,208,0,143,203,164,1,141,208,94,2,141,207,164,1,4,207,75,207,134,203,0,0,128,206,0,0,208,207,0,0,141,207,8,2,25,203,207,4,143,203,165,1,141,203,165,1,55,203,25,203,164,45,0,0,141,207,165,1,0,203,207,0,143,203,8,2,119,0,165,255,141,203,138,1,32,203,203,0,120,203,12,0,82,203,0,0,143,203,166,1,141,203,166,1,38,203,203,32,32,203,203,0,120,203,2,0,119,0,5,0,1,207,1,0,134,203,0,0,128,206,0,0,202,207,0,0,141,207,165,1,141,208,132,2,16,203,207,208,143,203,168,1,1,208,0,0,15,203,208,24,143,203,169,1,141,203,169,1,141,208,168,1,19,203,203,208,121,203,93,0,0,29,24,0,141,208,165,1,0,203,208,0,143,203,9,2,141,208,9,2,82,203,208,0,143,203,170,1,141,208,170,1,1,207,0,0,134,203,0,0,184,215,0,0,208,207,75,0,143,203,171,1,141,203,135,2,3,203,203,200,141,207,171,1,48,203,203,207,188,46,0,0,141,207,135,2,3,207,207,200,1,208,48,0,141,205,171,1,141,206,57,1,4,205,205,206,135,203,1,0,207,208,205,0,141,205,171,1,0,203,205,0,143,203,96,2,141,205,96,2,26,203,205,1,143,203,172,1,141,203,135,2,3,203,203,200,141,205,172,1,48,203,203,205,172,46,0,0,141,205,172,1,0,203,205,0,143,203,96,2,119,0,245,255,141,205,172,1,0,203,205,0,143,203,95,2,119,0,4,0,141,205,171,1,0,203,205,0,143,203,95,2,82,203,0,0,143,203,174,1,141,203,174,1,38,203,203,32,32,203,203,0,121,203,14,0,1,205,9,0,15,203,205,29,143,203,175,1,141,205,175,1,1,208,9,0,125,203,205,208,29,0,0,0,143,203,176,1,141,208,95,2,141,205,176,1,134,203,0,0,128,206,0,0,208,205,0,0,141,205,9,2,25,203,205,4,143,203,177,1,26,203,29,9,143,203,178,1,141,205,177,1,141,208,132,2,16,203,205,208,143,203,179,1,1,208,9,0,15,203,208,29,143,203,180,1,141,203,180,1,141,208,179,1,19,203,203,208,121,203,7,0,141,203,178,1,0,29,203,0,141,208,177,1,0,203,208,0,143,203,9,2,119,0,172,255,141,203,178,1,0,28,203,0,119,0,2,0,0,28,24,0,25,203,28,9,143,203,181,1,1,208,48,0,141,205,181,1,1,207,9,0,1,206,0,0,134,203,0,0,100,219,0,0,0,208,205,207,206,0,0,0,119,0,213,0,141,206,248,1,25,203,206,4,143,203,182,1,141,206,132,2,141,207,182,1,125,203,38,206,207,0,0,0,143,203,130,2,1,207,255,255,15,203,207,24,143,203,183,1,141,203,183,1,121,203,172,0,32,203,47,0,143,203,184,1,0,32,24,0,141,207,248,1,0,203,207,0,143,203,10,2,141,207,10,2,82,203,207,0,143,203,185,1,141,207,185,1,1,206,0,0,134,203,0,0,184,215,0,0,207,206,75,0,143,203,186,1,141,203,186,1,45,203,203,75,72,48,0,0,141,203,135,2,3,203,203,200,1,206,48,0,107,203,8,206,141,203,135,2,3,203,203,200,25,206,203,8,143,206,97,2,119,0,4,0,141,203,186,1,0,206,203,0,143,206,97,2,141,203,10,2,141,207,248,1,13,206,203,207,143,206,187,1,141,206,187,1,121,206,43,0,141,207,97,2,25,206,207,1,143,206,190,1,82,206,0,0,143,206,191,1,141,206,191,1,38,206,206,32,32,206,206,0,121,206,6,0,141,207,97,2,1,203,1,0,134,206,0,0,128,206,0,0,207,203,0,0,34,206,32,1,143,206,192,1,141,206,184,1,141,203,192,1,19,206,206,203,121,206,5,0,141,203,190,1,0,206,203,0,143,206,99,2,119,0,61,0,82,206,0,0,143,206,193,1,141,206,193,1,38,206,206,32,32,206,206,0,120,206,5,0,141,203,190,1,0,206,203,0,143,206,99,2,119,0,51,0,1,203,1,0,134,206,0,0,128,206,0,0,202,203,0,0,141,203,190,1,0,206,203,0,143,206,99,2,119,0,43,0,141,203,135,2,3,203,203,200,141,207,97,2,16,206,203,207,143,206,188,1,141,206,188,1,120,206,5,0,141,207,97,2,0,206,207,0,143,206,99,2,119,0,32,0,141,207,97,2,1,203,0,0,141,205,57,1,4,203,203,205,3,206,207,203,143,206,100,2,141,203,135,2,3,203,203,200,1,207,48,0,141,205,100,2,135,206,1,0,203,207,205,0,141,205,97,2,0,206,205,0,143,206,98,2,141,205,98,2,26,206,205,1,143,206,189,1,141,206,135,2,3,206,206,200,141,205,189,1,48,206,206,205,172,49,0,0,141,205,189,1,0,206,205,0,143,206,98,2,119,0,245,255,141,205,189,1,0,206,205,0,143,206,99,2,119,0,1,0,141,205,99,2,0,206,205,0,143,206,195,1,82,206,0,0,143,206,196,1,141,206,196,1,38,206,206,32,32,206,206,0,121,206,19,0,141,205,195,1,4,205,75,205,15,206,205,32,143,206,197,1,141,207,197,1,121,207,5,0,141,207,195,1,4,207,75,207,0,205,207,0,119,0,2,0,0,205,32,0,0,206,205,0,143,206,198,1,141,205,99,2,141,207,198,1,134,206,0,0,128,206,0,0,205,207,0,0,141,207,195,1,4,207,75,207,4,206,32,207,143,206,199,1,141,207,10,2,25,206,207,4,143,206,200,1,141,206,200,1,141,207,130,2,16,206,206,207,1,207,255,255,141,205,199,1,15,207,207,205,19,206,206,207,121,206,7,0,141,206,199,1,0,32,206,0,141,207,200,1,0,206,207,0,143,206,10,2,119,0,95,255,141,206,199,1,0,31,206,0,119,0,2,0,0,31,24,0,25,206,31,18,143,206,201,1,1,207,48,0,141,205,201,1,1,203,18,0,1,208,0,0,134,206,0,0,100,219,0,0,0,207,205,203,208,0,0,0,82,206,0,0,143,206,202,1,141,206,202,1,38,206,206,32,32,206,206,0,120,206,2,0,119,0,11,0,141,208,19,2,0,206,208,0,143,206,203,1,141,208,19,2,141,203,227,1,141,205,203,1,4,203,203,205,134,206,0,0,128,206,0,0,208,203,0,0,1,203,32,0,141,208,113,2,141,205,155,1,141,207,23,2,1,209,0,32,21,207,207,209,134,206,0,0,100,219,0,0,0,203,208,205,207,0,0,0,141,207,155,1,141,205,113,2,15,206,207,205,143,206,204,1,141,205,204,1,141,207,113,2,141,208,155,1,125,206,205,207,208,0,0,0,143,206,115,2,141,206,115,2,0,8,206,0,119,0,90,0,141,206,109,2,38,206,206,32,33,206,206,0,1,208,98,27,1,207,102,27,125,195,206,208,207,0,0,0,70,207,13,13,59,208,0,0,59,206,0,0,70,208,208,206,20,207,207,208,0,196,207,0,141,207,109,2,38,207,207,32,33,207,207,0,1,208,106,27,1,206,110,27,125,197,207,208,206,0,0,0,1,208,0,0,141,207,68,2,125,206,196,208,207,0,0,0,143,206,70,2,125,206,196,197,195,0,0,0,143,206,92,2,1,207,32,0,141,208,113,2,141,205,70,2,25,205,205,3,134,206,0,0,100,219,0,0,0,207,208,205,90,0,0,0,82,198,0,0,38,206,198,32,32,206,206,0,121,206,10,0,141,205,74,2,141,208,70,2,134,206,0,0,128,206,0,0,205,208,0,0,82,46,0,0,0,206,46,0,143,206,0,1,119,0,3,0,0,206,198,0,143,206,0,1,141,206,0,1,38,206,206,32,0,199,206,0,32,206,199,0,121,206,6,0,141,208,92,2,1,205,3,0,134,206,0,0,128,206,0,0,208,205,0,0,1,205,32,0,141,208,113,2,141,207,70,2,25,207,207,3,141,203,23,2,1,209,0,32,21,203,203,209,134,206,0,0,100,219,0,0,0,205,208,207,203,0,0,0,141,203,70,2,25,203,203,3,141,207,113,2,15,206,203,207,143,206,1,1,141,203,1,1,121,203,4,0,141,203,113,2,0,207,203,0,119,0,4,0,141,203,70,2,25,203,203,3,0,207,203,0,0,206,207,0,143,206,2,1,141,206,2,1,0,8,206,0,141,207,255,1,0,206,207,0,143,206,254,1,0,206,8,0,143,206,48,2,141,207,57,2,0,206,207,0,143,206,52,2,0,206,79,0,143,206,81,2,119,0,240,242,119,0,44,247,119,0,43,247,119,0,240,246,134,159,0,0,28,21,1,0,82,160,159,0,134,161,0,0,108,225,0,0,160,0,0,0,0,205,161,0,143,205,237,1,1,205,82,0,143,205,134,2,119,0,27,1,141,203,104,2,1,205,0,0,1,206,8,0,138,203,205,206,120,53,0,0,180,53,0,0,240,53,0,0,64,54,0,0,140,54,0,0,76,53,0,0,212,54,0,0,16,55,0,0,141,206,255,1,0,205,206,0,143,205,254,1,4,205,168,174,143,205,48,2,141,206,57,2,0,205,206,0,143,205,52,2,0,205,79,0,143,205,81,2,119,0,203,242,141,205,135,2,82,94,205,0,141,205,255,1,85,94,205,0,141,206,255,1,0,205,206,0,143,205,254,1,4,205,168,174,143,205,48,2,141,206,57,2,0,205,206,0,143,205,52,2,0,205,79,0,143,205,81,2,119,0,188,242,141,205,135,2,82,95,205,0,141,205,255,1,85,95,205,0,141,206,255,1,0,205,206,0,143,205,254,1,4,205,168,174,143,205,48,2,141,206,57,2,0,205,206,0,143,205,52,2,0,205,79,0,143,205,81,2,119,0,173,242,141,205,255,1,34,96,205,0,141,205,135,2,82,97,205,0,141,205,255,1,85,97,205,0,41,206,96,31,42,206,206,31,109,97,4,206,141,205,255,1,0,206,205,0,143,206,254,1,4,206,168,174,143,206,48,2,141,205,57,2,0,206,205,0,143,206,52,2,0,206,79,0,143,206,81,2,119,0,153,242,141,206,255,1,2,205,0,0,255,255,0,0,19,206,206,205,0,99,206,0,141,206,135,2,82,100,206,0,84,100,99,0,141,205,255,1,0,206,205,0,143,206,254,1,4,206,168,174,143,206,48,2,141,205,57,2,0,206,205,0,143,206,52,2,0,206,79,0,143,206,81,2,119,0,134,242,141,206,255,1,1,205,255,0,19,206,206,205,0,101,206,0,141,206,135,2,82,102,206,0,83,102,101,0,141,205,255,1,0,206,205,0,143,206,254,1,4,206,168,174,143,206,48,2,141,205,57,2,0,206,205,0,143,206,52,2,0,206,79,0,143,206,81,2,119,0,116,242,141,206,135,2,82,103,206,0,141,206,255,1,85,103,206,0,141,205,255,1,0,206,205,0,143,206,254,1,4,206,168,174,143,206,48,2,141,205,57,2,0,206,205,0,143,206,52,2,0,206,79,0,143,206,81,2,119,0,101,242,141,206,255,1,34,104,206,0,141,206,135,2,82,105,206,0,141,206,255,1,85,105,206,0,41,205,104,31,42,205,205,31,109,105,4,205,141,206,255,1,0,205,206,0,143,205,254,1,4,205,168,174,143,205,48,2,141,206,57,2,0,205,206,0,143,205,52,2,0,205,79,0,143,205,81,2,119,0,81,242,141,203,135,2,82,126,203,0,141,203,135,2,106,127,203,4,32,203,126,0,32,205,127,0,19,203,203,205,121,203,3,0,0,9,53,0,119,0,26,0,0,12,53,0,0,130,126,0,0,132,127,0,38,203,130,7,0,129,203,0,26,131,12,1,39,203,129,48,1,205,255,0,19,203,203,205,83,131,203,0,1,203,3,0,135,133,2,0,130,132,203,0,128,203,0,0,0,135,203,0,32,203,133,0,32,205,135,0,19,203,203,205,121,203,3,0,0,9,131,0,119,0,5,0,0,12,131,0,0,130,133,0,0,132,135,0,119,0,235,255,141,203,23,2,38,203,203,8,32,203,203,0,121,203,16,0,0,203,9,0,143,203,236,1,141,205,23,2,0,203,205,0,143,203,25,2,141,205,59,2,0,203,205,0,143,203,62,2,1,203,0,0,143,203,69,2,1,203,202,19,143,203,75,2,1,203,77,0,143,203,134,2,119,0,84,0,0,136,9,0,4,203,53,136,141,205,59,2,15,137,203,205,121,137,4,0,141,206,59,2,0,203,206,0,119,0,4,0,4,206,53,136,25,206,206,1,0,203,206,0,0,205,203,0,143,205,60,2,0,205,9,0,143,205,236,1,141,203,23,2,0,205,203,0,143,205,25,2,141,203,60,2,0,205,203,0,143,205,62,2,1,205,0,0,143,205,69,2,1,205,202,19,143,205,75,2,1,205,77,0,143,205,134,2,119,0,56,0,1,203,8,0,141,205,59,2,16,107,203,205,141,205,59,2,1,203,8,0,125,108,107,205,203,0,0,0,141,205,23,2,39,205,205,8,0,203,205,0,143,203,24,2,0,203,108,0,143,203,61,2,1,203,120,0,143,203,110,2,1,203,64,0,143,203,134,2,119,0,38,0,141,205,135,2,82,162,205,0,1,205,0,0,14,205,162,205,1,206,72,27,125,163,205,162,206,0,0,0,0,206,163,0,143,206,237,1,1,206,82,0,143,206,134,2,119,0,26,0,141,206,135,2,82,91,206,0,141,206,135,2,106,93,206,4,0,143,91,0,0,144,93,0,1,206,0,0,143,206,67,2,1,206,202,19,143,206,72,2,1,206,76,0,143,206,134,2,119,0,13,0,141,205,23,2,0,203,205,0,143,203,24,2,141,205,59,2,0,203,205,0,143,203,61,2,141,205,109,2,0,203,205,0,143,203,110,2,1,203,64,0,143,203,134,2,119,0,1,0,141,204,134,2,32,204,204,64,121,204,103,0,1,204,0,0,143,204,134,2,141,204,135,2,82,109,204,0,141,204,135,2,106,111,204,4,141,204,110,2,38,204,204,32,0,112,204,0,32,204,109,0,32,206,111,0,19,204,204,206,121,204,16,0,0,204,53,0,143,204,236,1,141,206,24,2,0,204,206,0,143,204,25,2,141,206,61,2,0,204,206,0,143,204,62,2,1,204,0,0,143,204,69,2,1,204,202,19,143,204,75,2,1,204,77,0,143,204,134,2,119,0,31,1,0,10,53,0,0,114,109,0,0,118,111,0,38,204,114,15,0,113,204,0,1,204,212,19,90,116,204,113,26,117,10,1,1,204,255,0,19,204,116,204,20,204,204,112,1,206,255,0,19,204,204,206,83,117,204,0,1,204,4,0,135,119,2,0,114,118,204,0,128,204,0,0,0,120,204,0,32,204,119,0,32,206,120,0,19,204,204,206,120,204,5,0,0,10,117,0,0,114,119,0,0,118,120,0,119,0,233,255,141,204,135,2,82,121,204,0,141,204,135,2,106,122,204,4,141,204,24,2,38,204,204,8,0,124,204,0,32,204,124,0,32,206,121,0,32,207,122,0,19,206,206,207,20,204,204,206,121,204,16,0,0,204,117,0,143,204,236,1,141,206,24,2,0,204,206,0,143,204,25,2,141,206,61,2,0,204,206,0,143,204,62,2,1,204,0,0,143,204,69,2,1,204,202,19,143,204,75,2,1,204,77,0,143,204,134,2,119,0,232,0,141,204,110,2,42,204,204,4,0,125,204,0,0,204,117,0,143,204,236,1,141,206,24,2,0,204,206,0,143,204,25,2,141,206,61,2,0,204,206,0,143,204,62,2,1,204,2,0,143,204,69,2,1,206,202,19,3,204,206,125,143,204,75,2,1,204,77,0,143,204,134,2,119,0,213,0,141,204,134,2,32,204,204,76,121,204,23,0,1,204,0,0,143,204,134,2,134,145,0,0,184,215,0,0,143,144,53,0,0,204,145,0,143,204,236,1,141,206,23,2,0,204,206,0,143,204,25,2,141,206,59,2,0,204,206,0,143,204,62,2,141,206,67,2,0,204,206,0,143,204,69,2,141,206,72,2,0,204,206,0,143,204,75,2,1,204,77,0,143,204,134,2,119,0,188,0,141,204,134,2,32,204,204,82,121,204,45,0,1,204,0,0,143,204,134,2,141,204,237,1,1,206,0,0,141,207,59,2,134,164,0,0,180,187,0,0,204,206,207,0,141,207,237,1,0,165,207,0,141,207,237,1,141,206,59,2,3,166,207,206,1,207,0,0,13,207,164,207,125,206,207,166,164,0,0,0,143,206,121,2,1,204,0,0,45,204,164,204,248,59,0,0,141,204,59,2,0,207,204,0,119,0,3,0,4,204,164,165,0,207,204,0,0,206,207,0,143,206,64,2,141,207,237,1,0,206,207,0,143,206,240,1,0,206,90,0,143,206,26,2,141,207,64,2,0,206,207,0,143,206,66,2,1,206,0,0,143,206,71,2,1,206,202,19,143,206,76,2,141,207,121,2,0,206,207,0,143,206,124,2,119,0,141,0,141,206,134,2,32,206,206,86,121,206,138,0,1,206,0,0,143,206,134,2,1,206,0,0,143,206,29,2,1,206,0,0,143,206,50,2,141,207,222,1,0,206,207,0,143,206,116,2,141,206,116,2,82,171,206,0,32,206,171,0,121,206,8,0,141,207,29,2,0,206,207,0,143,206,27,2,141,207,50,2,0,206,207,0,143,206,51,2,119,0,39,0,141,206,135,2,1,207,16,2,3,206,206,207,134,172,0,0,80,23,1,0,206,171,0,0,141,206,65,2,141,207,29,2,4,173,206,207,34,207,172,0,16,206,173,172,20,207,207,206,121,207,7,0,141,206,29,2,0,207,206,0,143,207,27,2,0,207,172,0,143,207,51,2,119,0,20,0,141,207,116,2,25,175,207,4,141,207,29,2,3,176,172,207,141,207,65,2,16,177,176,207,121,177,8,0,0,207,176,0,143,207,29,2,0,207,172,0,143,207,50,2,0,207,175,0,143,207,116,2,119,0,213,255,0,207,176,0,143,207,27,2,0,207,172,0,143,207,51,2,119,0,1,0,141,207,51,2,34,178,207,0,121,178,3,0,1,7,255,255,119,0,40,1,1,206,32,0,141,204,113,2,141,203,27,2,141,208,23,2,134,207,0,0,100,219,0,0,0,206,204,203,208,0,0,0,141,207,27,2,32,179,207,0,121,179,6,0,1,207,0,0,143,207,28,2,1,207,97,0,143,207,134,2,119,0,59,0,1,207,0,0,143,207,34,2,141,208,222,1,0,207,208,0,143,207,117,2,141,207,117,2,82,180,207,0,32,207,180,0,121,207,7,0,141,208,27,2,0,207,208,0,143,207,28,2,1,207,97,0,143,207,134,2,119,0,44,0,141,207,117,2,25,181,207,4,141,207,135,2,1,208,16,2,3,207,207,208,134,182,0,0,80,23,1,0,207,180,0,0,141,207,34,2,3,183,182,207,141,207,27,2,15,184,207,183,121,184,7,0,141,208,27,2,0,207,208,0,143,207,28,2,1,207,97,0,143,207,134,2,119,0,25,0,82,185,0,0,38,207,185,32,32,207,207,0,121,207,7,0,141,208,135,2,1,203,16,2,3,208,208,203,134,207,0,0,128,206,0,0,208,182,0,0,141,207,27,2,16,186,183,207,121,186,6,0,0,207,183,0,143,207,34,2,0,207,181,0,143,207,117,2,119,0,210,255,141,208,27,2,0,207,208,0,143,207,28,2,1,207,97,0,143,207,134,2,119,0,1,0,141,207,134,2,32,207,207,97,121,207,31,0,1,207,0,0,143,207,134,2,1,208,32,0,141,203,113,2,141,204,28,2,141,206,23,2,1,205,0,32,21,206,206,205,134,207,0,0,100,219,0,0,0,208,203,204,206,0,0,0,141,207,28,2,141,206,113,2,15,187,207,206,141,206,113,2,141,207,28,2,125,188,187,206,207,0,0,0,141,206,255,1,0,207,206,0,143,207,254,1,0,207,188,0,143,207,48,2,141,206,57,2,0,207,206,0,143,207,52,2,0,207,79,0,143,207,81,2,119,0,106,240,141,207,134,2,32,207,207,77,121,207,71,0,1,207,0,0,143,207,134,2,1,207,255,255,141,206,62,2,15,147,207,206,141,206,25,2,2,207,0,0,255,255,254,255,19,206,206,207,0,148,206,0,141,206,25,2,125,36,147,148,206,0,0,0,141,206,135,2,82,149,206,0,141,206,135,2,106,150,206,4,141,206,62,2,33,152,206,0,33,206,149,0,33,207,150,0,20,206,206,207,20,206,152,206,121,206,33,0,141,206,236,1,0,153,206,0,33,206,149,0,33,207,150,0,20,206,206,207,38,206,206,1,40,206,206,1,4,207,53,153,3,154,206,207,141,207,62,2,15,155,154,207,141,206,62,2,125,207,155,206,154,0,0,0,143,207,63,2,141,206,236,1,0,207,206,0,143,207,240,1,0,207,36,0,143,207,26,2,141,206,63,2,0,207,206,0,143,207,66,2,141,206,69,2,0,207,206,0,143,207,71,2,141,206,75,2,0,207,206,0,143,207,76,2,0,207,53,0,143,207,124,2,119,0,15,0,0,207,53,0,143,207,240,1,0,207,36,0,143,207,26,2,1,207,0,0,143,207,66,2,141,206,69,2,0,207,206,0,143,207,71,2,141,206,75,2,0,207,206,0,143,207,76,2,0,207,53,0,143,207,124,2,141,206,124,2,0,207,206,0,143,207,205,1,141,206,240,1,0,207,206,0,143,207,206,1,141,206,66,2,141,204,205,1,141,203,206,1,4,204,204,203,15,207,206,204,143,207,207,1,141,204,207,1,121,204,6,0,141,204,205,1,141,206,206,1,4,204,204,206,0,207,204,0,119,0,3,0,141,204,66,2,0,207,204,0,0,40,207,0,141,204,71,2,3,207,204,40,143,207,208,1,141,204,113,2,141,206,208,1,15,207,204,206,143,207,209,1,141,206,209,1,141,204,208,1,141,203,113,2,125,207,206,204,203,0,0,0,143,207,114,2,1,203,32,0,141,204,114,2,141,206,208,1,141,208,26,2,134,207,0,0,100,219,0,0,0,203,204,206,208,0,0,0,82,207,0,0,143,207,210,1,141,207,210,1,38,207,207,32,32,207,207,0,121,207,6,0,141,208,76,2,141,206,71,2,134,207,0,0,128,206,0,0,208,206,0,0,141,206,26,2,2,208,0,0,0,0,1,0,21,206,206,208,0,207,206,0,143,207,211,1,1,206,48,0,141,208,114,2,141,204,208,1,141,203,211,1,134,207,0,0,100,219,0,0,0,206,208,204,203,0,0,0,1,203,48,0,141,204,205,1,141,208,206,1,4,204,204,208,1,208,0,0,134,207,0,0,100,219,0,0,0,203,40,204,208,0,0,0,82,207,0,0,143,207,212,1,141,207,212,1,38,207,207,32,32,207,207,0,121,207,8,0,141,208,240,1,141,204,205,1,141,203,206,1,4,204,204,203,134,207,0,0,128,206,0,0,208,204,0,0,141,204,26,2,1,208,0,32,21,204,204,208,0,207,204,0,143,207,213,1,1,204,32,0,141,208,114,2,141,203,208,1,141,206,213,1,134,207,0,0,100,219,0,0,0,204,208,203,206,0,0,0,141,206,255,1,0,207,206,0,143,207,254,1,141,206,114,2,0,207,206,0,143,207,48,2,141,206,57,2,0,207,206,0,143,207,52,2,0,207,79,0,143,207,81,2,119,0,174,239,141,207,134,2,1,206,244,0,45,207,207,206,56,67,0,0,1,207,0,0,45,207,0,207,48,67,0,0,141,207,53,2,32,207,207,0,121,207,3,0,1,7,0,0,119,0,72,0,1,207,1,0,143,207,37,2,141,206,37,2,41,206,206,2,3,207,4,206,143,207,214,1,141,206,214,1,82,207,206,0,143,207,215,1,141,207,215,1,32,207,207,0,121,207,5,0,141,206,37,2,0,207,206,0,143,207,38,2,119,0,22,0,141,206,37,2,41,206,206,3,3,207,3,206,143,207,217,1,141,206,217,1,141,203,215,1,134,207,0,0,232,163,0,0,206,203,2,0,141,203,37,2,25,207,203,1,143,207,218,1,141,207,218,1,34,207,207,10,121,207,5,0,141,203,218,1,0,207,203,0,143,207,37,2,119,0,224,255,1,7,1,0,119,0,35,0,141,207,38,2,34,207,207,10,121,207,28,0,141,203,38,2,0,207,203,0,143,207,40,2,141,203,40,2,41,203,203,2,3,207,4,203,143,207,220,1,141,203,220,1,82,207,203,0,143,207,221,1,141,203,40,2,25,207,203,1,143,207,219,1,141,207,221,1,32,207,207,0,120,207,3,0,1,7,255,255,119,0,14,0,141,207,219,1,34,207,207,10,121,207,5,0,141,203,219,1,0,207,203,0,143,207,40,2,119,0,235,255,1,7,1,0,119,0,5,0,1,7,1,0,119,0,3,0,141,207,0,2,0,7,207,0,141,207,135,2,137,207,0,0,139,7,0,0,140,3,211,1,0,0,0,0,2,200,0,0,32,2,0,0,2,201,0,0,208,1,0,0,2,202,0,0,0,64,0,0,1,203,0,0,143,203,209,1,136,204,0,0,0,203,204,0,143,203,210,1,136,203,0,0,1,204,32,66,3,203,203,204,137,203,0,0,1,203,7,0,135,14,3,0,203,0,0,0,1,203,131,1,78,203,203,0,83,14,203,0,1,204,131,1,102,204,204,1,107,14,1,204,1,203,131,1,102,203,203,2,107,14,2,203,1,204,131,1,102,204,204,3,107,14,3,204,1,203,131,1,102,203,203,4,107,14,4,203,1,204,131,1,102,204,204,5,107,14,5,204,1,203,131,1,102,203,203,6,107,14,6,203,1,203,32,0,134,15,0,0,80,24,1,0,14,203,0,0,1,203,0,0,52,203,15,203,12,68,0,0,1,203,0,0,83,15,203,0,141,203,210,1,3,203,203,201,1,204,1,0,109,203,12,204,141,203,210,1,3,203,203,201,25,204,203,16,143,204,47,1,141,204,47,1,1,203,0,0,85,204,203,0,141,203,210,1,3,203,203,201,1,204,0,0,109,203,20,204,141,204,210,1,3,204,204,201,1,203,0,0,109,204,24,203,1,204,136,0,82,203,204,0,143,203,82,1,141,204,210,1,3,204,204,201,25,203,204,28,143,203,89,1,141,203,89,1,141,204,82,1,85,203,204,0,141,204,210,1,3,204,204,201,1,203,1,0,109,204,36,203,141,204,210,1,3,204,204,201,134,203,0,0,52,228,0,0,204,0,0,0,1,203,0,0,143,203,107,1,1,203,138,1,143,203,112,1,1,203,0,0,143,203,116,1,1,203,0,0,143,203,136,1,1,203,0,0,143,203,140,1,1,203,1,0,143,203,155,1,1,203,0,0,143,203,178,1,1,203,0,0,143,203,205,1,1,203,151,1,134,31,0,0,212,184,0,0,0,1,203,0,1,204,255,255,1,205,120,0,138,31,204,205,164,71,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,16,72,0,0,224,70,0,0,28,72,0,0,224,70,0,0,40,72,0,0,252,72,0,0,248,73,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,172,74,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,128,75,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,100,76,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,224,70,0,0,56,77,0,0,0,78,0,0,188,78,0,0,120,79,0,0,224,70,0,0,52,80,0,0,56,80,0,0,224,70,0,0,0,81,0,0,224,70,0,0,224,70,0,0,212,81,0,0,172,82,0,0,224,70,0,0,104,83,0,0,60,84,0,0,32,85,0,0,224,70,0,0,224,70,0,0,248,85,0,0,141,205,205,1,0,204,205,0,143,204,207,1,141,205,178,1,0,204,205,0,143,204,180,1,141,205,155,1,0,204,205,0,143,204,157,1,141,205,140,1,0,204,205,0,143,204,142,1,141,205,136,1,0,204,205,0,143,204,138,1,141,205,116,1,0,204,205,0,143,204,119,1,141,205,112,1,0,204,205,0,143,204,114,1,141,205,107,1,0,204,205,0,143,204,109,1,141,205,207,1,0,204,205,0,143,204,205,1,141,205,180,1,0,204,205,0,143,204,178,1,141,205,157,1,0,204,205,0,143,204,155,1,141,205,142,1,0,204,205,0,143,204,140,1,141,205,138,1,0,204,205,0,143,204,136,1,141,205,119,1,0,204,205,0,143,204,116,1,141,205,114,1,0,204,205,0,143,204,112,1,141,205,109,1,0,204,205,0,143,204,107,1,119,0,81,255,141,204,107,1,0,203,204,0,143,203,108,1,141,204,112,1,0,203,204,0,143,203,113,1,141,204,116,1,0,203,204,0,143,203,118,1,141,204,136,1,0,203,204,0,143,203,137,1,141,204,140,1,0,203,204,0,143,203,141,1,141,204,155,1,0,203,204,0,143,203,156,1,141,204,178,1,0,203,204,0,143,203,179,1,141,204,205,1,0,203,204,0,143,203,206,1,1,203,25,0,143,203,209,1,119,0,170,3,1,203,15,0,143,203,209,1,119,0,167,3,1,203,14,0,143,203,209,1,119,0,164,3,141,203,210,1,3,203,203,201,1,204,0,0,109,203,24,204,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,251,254,1,204,128,27,82,176,204,0,134,184,0,0,124,214,0,0,176,0,0,0,1,204,120,27,85,204,184,0,141,204,210,1,85,204,184,0,1,203,156,6,141,205,210,1,134,204,0,0,172,21,1,0,203,205,0,0,141,205,205,1,0,204,205,0,143,204,207,1,141,205,178,1,0,204,205,0,143,204,180,1,141,205,155,1,0,204,205,0,143,204,157,1,141,205,140,1,0,204,205,0,143,204,142,1,141,205,136,1,0,204,205,0,143,204,138,1,141,205,116,1,0,204,205,0,143,204,119,1,141,205,112,1,0,204,205,0,143,204,114,1,141,205,107,1,0,204,205,0,143,204,109,1,141,205,207,1,0,204,205,0,143,204,205,1,141,205,180,1,0,204,205,0,143,204,178,1,141,205,157,1,0,204,205,0,143,204,155,1,141,205,142,1,0,204,205,0,143,204,140,1,141,205,138,1,0,204,205,0,143,204,136,1,141,205,119,1,0,204,205,0,143,204,116,1,141,205,114,1,0,204,205,0,143,204,112,1,141,205,109,1,0,204,205,0,143,204,107,1,119,0,188,254,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,1,204,1,0,143,204,107,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,119,0,143,254,141,203,210,1,3,203,203,201,1,204,1,0,109,203,24,204,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,90,254,1,203,128,27,82,161,203,0,134,169,0,0,124,214,0,0,161,0,0,0,141,203,210,1,3,203,203,201,109,203,20,169,141,204,205,1,0,203,204,0,143,203,207,1,141,204,178,1,0,203,204,0,143,203,180,1,141,204,155,1,0,203,204,0,143,203,157,1,141,204,140,1,0,203,204,0,143,203,142,1,141,204,136,1,0,203,204,0,143,203,138,1,141,204,116,1,0,203,204,0,143,203,119,1,141,204,112,1,0,203,204,0,143,203,114,1,141,204,107,1,0,203,204,0,143,203,109,1,141,204,207,1,0,203,204,0,143,203,205,1,141,204,180,1,0,203,204,0,143,203,178,1,141,204,157,1,0,203,204,0,143,203,155,1,141,204,142,1,0,203,204,0,143,203,140,1,141,204,138,1,0,203,204,0,143,203,136,1,141,204,119,1,0,203,204,0,143,203,116,1,141,204,114,1,0,203,204,0,143,203,112,1,141,204,109,1,0,203,204,0,143,203,107,1,119,0,33,254,141,204,210,1,3,204,204,201,1,203,2,0,109,204,24,203,141,204,205,1,0,203,204,0,143,203,207,1,141,204,178,1,0,203,204,0,143,203,180,1,141,204,155,1,0,203,204,0,143,203,157,1,141,204,140,1,0,203,204,0,143,203,142,1,141,204,136,1,0,203,204,0,143,203,138,1,141,204,116,1,0,203,204,0,143,203,119,1,141,204,112,1,0,203,204,0,143,203,114,1,141,204,107,1,0,203,204,0,143,203,109,1,141,204,207,1,0,203,204,0,143,203,205,1,141,204,180,1,0,203,204,0,143,203,178,1,141,204,157,1,0,203,204,0,143,203,155,1,141,204,142,1,0,203,204,0,143,203,140,1,141,204,138,1,0,203,204,0,143,203,136,1,141,204,119,1,0,203,204,0,143,203,116,1,141,204,114,1,0,203,204,0,143,203,112,1,141,204,109,1,0,203,204,0,143,203,107,1,119,0,236,253,1,204,128,27,82,110,204,0,134,120,0,0,124,214,0,0,110,0,0,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,0,204,120,0,143,204,116,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,186,253,1,204,128,27,82,60,204,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,0,204,60,0,143,204,136,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,139,253,1,204,128,27,82,92,204,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,0,204,92,0,143,204,140,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,92,253,1,204,128,27,82,99,204,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,107,1,0,204,203,0,143,204,109,1,0,204,99,0,143,204,112,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1], eb + 10240);
  HEAPU8.set([141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,45,253,119,0,247,253,1,204,128,27,82,69,204,0,134,77,0,0,124,214,0,0,69,0,0,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,0,204,77,0,143,204,155,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,250,252,141,205,210,1,3,205,205,201,1,204,0,0,109,205,36,204,141,205,205,1,0,204,205,0,143,204,207,1,141,205,178,1,0,204,205,0,143,204,180,1,141,205,155,1,0,204,205,0,143,204,157,1,141,205,140,1,0,204,205,0,143,204,142,1,141,205,136,1,0,204,205,0,143,204,138,1,141,205,116,1,0,204,205,0,143,204,119,1,141,205,112,1,0,204,205,0,143,204,114,1,141,205,107,1,0,204,205,0,143,204,109,1,141,205,207,1,0,204,205,0,143,204,205,1,141,205,180,1,0,204,205,0,143,204,178,1,141,205,157,1,0,204,205,0,143,204,155,1,141,205,142,1,0,204,205,0,143,204,140,1,141,205,138,1,0,204,205,0,143,204,136,1,141,205,119,1,0,204,205,0,143,204,116,1,141,205,114,1,0,204,205,0,143,204,112,1,141,205,109,1,0,204,205,0,143,204,107,1,119,0,197,252,141,203,47,1,82,46,203,0,141,203,47,1,25,204,46,1,85,203,204,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,143,252,1,204,128,27,82,84,204,0,141,203,205,1,0,204,203,0,143,204,207,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,0,204,84,0,143,204,178,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,96,252,141,204,210,1,3,204,204,201,1,205,1,0,109,204,36,205,141,204,205,1,0,205,204,0,143,205,207,1,141,204,178,1,0,205,204,0,143,205,180,1,141,204,155,1,0,205,204,0,143,205,157,1,141,204,140,1,0,205,204,0,143,205,142,1,141,204,136,1,0,205,204,0,143,205,138,1,141,204,116,1,0,205,204,0,143,205,119,1,141,204,112,1,0,205,204,0,143,205,114,1,141,204,107,1,0,205,204,0,143,205,109,1,141,204,207,1,0,205,204,0,143,205,205,1,141,204,180,1,0,205,204,0,143,205,178,1,141,204,157,1,0,205,204,0,143,205,155,1,141,204,142,1,0,205,204,0,143,205,140,1,141,204,138,1,0,205,204,0,143,205,136,1,141,204,119,1,0,205,204,0,143,205,116,1,141,204,114,1,0,205,204,0,143,205,112,1,141,204,109,1,0,205,204,0,143,205,107,1,119,0,43,252,141,204,210,1,3,204,204,201,106,146,204,12,141,204,210,1,3,204,204,201,1,203,1,0,4,203,203,146,109,204,12,203,141,204,205,1,0,203,204,0,143,203,207,1,141,204,178,1,0,203,204,0,143,203,180,1,141,204,155,1,0,203,204,0,143,203,157,1,141,204,140,1,0,203,204,0,143,203,142,1,141,204,136,1,0,203,204,0,143,203,138,1,141,204,116,1,0,203,204,0,143,203,119,1,141,204,112,1,0,203,204,0,143,203,114,1,141,204,107,1,0,203,204,0,143,203,109,1,141,204,207,1,0,203,204,0,143,203,205,1,141,204,180,1,0,203,204,0,143,203,178,1,141,204,157,1,0,203,204,0,143,203,155,1,141,204,142,1,0,203,204,0,143,203,140,1,141,204,138,1,0,203,204,0,143,203,136,1,141,204,119,1,0,203,204,0,143,203,116,1,141,204,114,1,0,203,204,0,143,203,112,1,141,204,109,1,0,203,204,0,143,203,107,1,119,0,242,251,1,204,128,27,82,130,204,0,141,204,210,1,3,204,204,201,109,204,8,130,141,203,205,1,0,204,203,0,143,204,207,1,141,203,178,1,0,204,203,0,143,204,180,1,141,203,155,1,0,204,203,0,143,204,157,1,141,203,140,1,0,204,203,0,143,204,142,1,141,203,136,1,0,204,203,0,143,204,138,1,141,203,116,1,0,204,203,0,143,204,119,1,141,203,112,1,0,204,203,0,143,204,114,1,141,203,107,1,0,204,203,0,143,204,109,1,141,203,207,1,0,204,203,0,143,204,205,1,141,203,180,1,0,204,203,0,143,204,178,1,141,203,157,1,0,204,203,0,143,204,155,1,141,203,142,1,0,204,203,0,143,204,140,1,141,203,138,1,0,204,203,0,143,204,136,1,141,203,119,1,0,204,203,0,143,204,116,1,141,203,114,1,0,204,203,0,143,204,112,1,141,203,109,1,0,204,203,0,143,204,107,1,119,0,188,251,141,203,205,1,25,38,203,1,141,204,178,1,0,203,204,0,143,203,180,1,141,204,155,1,0,203,204,0,143,203,157,1,141,204,140,1,0,203,204,0,143,203,142,1,141,204,136,1,0,203,204,0,143,203,138,1,141,204,116,1,0,203,204,0,143,203,119,1,141,204,112,1,0,203,204,0,143,203,114,1,141,204,107,1,0,203,204,0,143,203,109,1,0,203,38,0,143,203,205,1,141,204,180,1,0,203,204,0,143,203,178,1,141,204,157,1,0,203,204,0,143,203,155,1,141,204,142,1,0,203,204,0,143,203,140,1,141,204,138,1,0,203,204,0,143,203,136,1,141,204,119,1,0,203,204,0,143,203,116,1,141,204,114,1,0,203,204,0,143,203,112,1,141,204,109,1,0,203,204,0,143,203,107,1,119,0,141,251,141,204,209,1,32,204,204,14,121,204,7,0,1,205,0,0,1,203,0,0,134,204,0,0,120,25,1,0,205,203,0,0,119,0,246,12,141,204,209,1,32,204,204,15,121,204,7,0,82,138,1,0,1,203,0,0,134,204,0,0,104,22,1,0,138,203,0,0,119,0,237,12,141,204,209,1,32,204,204,25,121,204,234,12,1,204,12,0,82,189,204,0,41,203,189,2,94,204,1,203,143,204,5,1,141,204,5,1,1,203,0,0,45,204,204,203,60,87,0,0,141,203,113,1,0,204,203,0,143,204,115,1,119,0,7,0,1,204,12,0,25,203,189,1,85,204,203,0,141,204,5,1,0,203,204,0,143,203,115,1,141,203,206,1,32,203,203,0,120,203,23,0,141,203,210,1,109,203,8,14,1,204,187,6,141,205,210,1,25,205,205,8,134,203,0,0,172,21,1,0,204,205,0,0,141,203,210,1,1,205,216,6,109,203,16,205,1,203,203,6,141,204,210,1,25,204,204,16,134,205,0,0,172,21,1,0,203,204,0,0,1,204,0,0,1,203,0,0,134,205,0,0,120,25,1,0,204,203,0,0,141,205,156,1,34,205,205,1,121,205,12,0,1,203,13,7,134,205,0,0,28,6,1,0,203,0,0,0,82,205,1,0,143,205,40,1,141,203,40,1,1,204,0,0,134,205,0,0,104,22,1,0,203,204,0,0,134,205,0,0,184,196,0,0,143,205,48,1,141,205,210,1,3,205,205,201,141,204,48,1,109,205,32,204,141,205,47,1,82,204,205,0,143,204,61,1,141,204,61,1,32,204,204,0,121,204,156,1,141,204,137,1,1,205,0,0,52,204,204,205,228,88,0,0,141,205,137,1,134,204,0,0,136,20,1,0,205,0,0,0,143,204,64,1,141,204,64,1,32,204,204,0,120,204,37,0,134,204,0,0,28,21,1,0,143,204,65,1,141,205,65,1,82,204,205,0,143,204,66,1,141,205,66,1,134,204,0,0,108,225,0,0,205,0,0,0,143,204,67,1,141,205,65,1,82,204,205,0,143,204,68,1,141,204,210,1,141,205,137,1,109,204,24,205,141,205,210,1,25,205,205,24,141,204,67,1,109,205,4,204,141,204,210,1,25,204,204,24,141,205,68,1,109,204,8,205,1,204,38,7,141,203,210,1,25,203,203,24,134,205,0,0,172,21,1,0,204,203,0,0,1,203,1,0,1,204,0,0,134,205,0,0,120,25,1,0,203,204,0,0,141,205,141,1,1,204,0,0,52,205,205,204,188,89,0,0,1,204,20,0,82,205,204,0,143,205,69,1,141,204,141,1,1,203,67,7,141,206,69,1,134,205,0,0,148,192,0,0,204,203,206,0,143,205,70,1,141,205,70,1,1,206,0,0,45,205,205,206,188,89,0,0,134,205,0,0,28,21,1,0,143,205,71,1,141,206,71,1,82,205,206,0,143,205,72,1,141,206,72,1,134,205,0,0,108,225,0,0,206,0,0,0,143,205,73,1,141,206,71,1,82,205,206,0,143,205,74,1,141,205,210,1,141,206,141,1,109,205,40,206,141,206,210,1,25,206,206,40,141,205,73,1,109,206,4,205,141,205,210,1,25,205,205,40,141,206,74,1,109,205,8,206,1,205,69,7,141,203,210,1,25,203,203,40,134,206,0,0,172,21,1,0,205,203,0,0,1,203,1,0,1,205,0,0,134,206,0,0,120,25,1,0,203,205,0,0,141,206,179,1,1,205,0,0,52,206,206,205,136,90,0,0,141,205,179,1,1,203,67,7,141,204,82,1,134,206,0,0,148,192,0,0,205,203,204,0,143,206,75,1,141,206,75,1,1,204,0,0,45,206,206,204,136,90,0,0,134,206,0,0,28,21,1,0,143,206,76,1,141,204,76,1,82,206,204,0,143,206,77,1,141,204,77,1,134,206,0,0,108,225,0,0,204,0,0,0,143,206,78,1,141,204,76,1,82,206,204,0,143,206,79,1,141,206,210,1,141,204,179,1,109,206,56,204,141,204,210,1,25,204,204,56,141,206,78,1,109,204,4,206,141,206,210,1,25,206,206,56,141,204,79,1,109,206,8,204,1,206,105,7,141,203,210,1,25,203,203,56,134,204,0,0,172,21,1,0,206,203,0,0,1,203,1,0,1,206,0,0,134,204,0,0,120,25,1,0,203,206,0,0,141,206,115,1,135,204,4,0,206,0,0,0,143,204,80,1,141,206,80,1,25,206,206,5,135,204,3,0,206,0,0,0,143,204,81,1,141,204,81,1,1,206,0,0,45,204,204,206,224,90,0,0,1,206,141,7,134,204,0,0,28,6,1,0,206,0,0,0,1,206,1,0,1,203,0,0,134,204,0,0,120,25,1,0,206,203,0,0,141,203,115,1,78,204,203,0,143,204,83,1,1,204,0,0,141,203,80,1,15,204,204,203,141,203,83,1,41,203,203,24,42,203,203,24,33,203,203,0,19,204,204,203,121,204,42,0,141,204,115,1,0,4,204,0,141,204,81,1,0,5,204,0,141,203,83,1,0,204,203,0,143,204,86,1,1,204,0,0,143,204,145,1,25,204,4,1,143,204,84,1,25,204,5,1,143,204,85,1,141,204,86,1,83,5,204,0,141,203,145,1,25,204,203,1,143,204,87,1,141,203,84,1,78,204,203,0,143,204,88,1,141,204,87,1,141,203,80,1,15,204,204,203,141,203,88,1,41,203,203,24,42,203,203,24,33,203,203,0,19,204,204,203,121,204,12,0,141,204,84,1,0,4,204,0,141,204,85,1,0,5,204,0,141,203,88,1,0,204,203,0,143,204,86,1,141,203,87,1,0,204,203,0,143,204,145,1,119,0,225,255,141,204,81,1,141,203,80,1,1,206,0,0,95,204,203,206,1,206,3,0,141,203,80,1,47,206,206,203,68,93,0,0,141,203,81,1,141,204,80,1,3,203,203,204,26,203,203,4,78,206,203,0,143,206,90,1,141,206,90,1,41,206,206,24,42,206,206,24,32,206,206,0,120,206,56,0,141,203,90,1,0,206,203,0,143,206,92,1,141,203,81,1,141,204,80,1,3,203,203,204,26,206,203,4,143,206,199,1,1,206,199,7,143,206,200,1,141,203,200,1,78,206,203,0,143,206,91,1,141,206,91,1,41,206,206,24,42,206,206,24,32,206,206,0,120,206,38,0,141,203,92,1,41,203,203,24,42,203,203,24,141,204,91,1,41,204,204,24,42,204,204,24,13,206,203,204,143,206,93,1,141,206,93,1,120,206,4,0,1,206,51,0,143,206,209,1,119,0,53,0,141,204,199,1,25,206,204,1,143,206,94,1,141,204,200,1,25,206,204,1,143,206,95,1,141,204,94,1,78,206,204,0,143,206,96,1,141,206,96,1,41,206,206,24,42,206,206,24,32,206,206,0,120,206,11,0,141,204,96,1,0,206,204,0,143,206,92,1,141,204,94,1,0,206,204,0,143,206,199,1,141,204,95,1,0,206,204,0,143,206,200,1,119,0,212,255,141,206,81,1,141,204,80,1,3,206,206,204,26,206,206,4,1,204,46,0,83,206,204,0,141,206,81,1,141,203,80,1,3,206,206,203,26,206,206,4,25,206,206,1,25,204,206,1,143,204,97,1,141,204,81,1,141,206,80,1,3,204,204,206,26,204,204,4,1,206,111,0,107,204,1,206,141,206,97,1,1,204,117,0,83,206,204,0,141,204,97,1,1,206,116,0,107,204,1,206,119,0,3,0,1,206,51,0,143,206,209,1,141,206,209,1,32,206,206,51,121,206,34,0,141,204,81,1,135,206,4,0,204,0,0,0,143,206,198,1,141,206,81,1,141,204,198,1,1,203,204,7,78,203,203,0,95,206,204,203,141,203,81,1,141,204,198,1,3,203,203,204,1,204,204,7,102,204,204,1,107,203,1,204,141,204,81,1,141,203,198,1,3,204,204,203,1,203,204,7,102,203,203,2,107,204,2,203,141,203,81,1,141,204,198,1,3,203,203,204,1,204,204,7,102,204,204,3,107,203,3,204,141,204,81,1,141,203,198,1,3,204,204,203,1,203,204,7,102,203,203,4,107,204,4,203,141,204,81,1,1,206,67,7,134,203,0,0,100,224,0,0,204,206,0,0,143,203,98,1,141,203,89,1,141,206,98,1,85,203,206,0,141,206,98,1,1,203,0,0,45,206,206,203,144,94,0,0,134,206,0,0,28,21,1,0,143,206,99,1,141,203,99,1,82,206,203,0,143,206,100,1,141,206,100,1,134,16,0,0,108,225,0,0,206,0,0,0,141,206,99,1,82,17,206,0,141,206,210,1,141,203,81,1,109,206,72,203,141,203,210,1,25,203,203,72,109,203,4,16,141,203,210,1,25,203,203,72,109,203,8,17,1,206,209,7,141,204,210,1,25,204,204,72,134,203,0,0,172,21,1,0,206,204,0,0,1,204,1,0,1,206,0,0,134,203,0,0,120,25,1,0,204,206,0,0,141,203,115,1,1,206,253,7,134,18,0,0,100,224,0,0,203,206,0,0,1,206,0,0,45,206,18,206,28,95,0,0,134,20,0,0,28,21,1,0,82,21,20,0,134,22,0,0,108,225,0,0,21,0,0,0,82,23,20,0,141,206,210,1,141,203,115,1,109,206,88,203,141,203,210,1,25,203,203,88,109,203,4,22,141,203,210,1,25,203,203,88,109,203,8,23,1,206,255,7,141,204,210,1,25,204,204,88,134,203,0,0,172,21,1,0,206,204,0,0,1,204,1,0,1,206,0,0,134,203,0,0,120,25,1,0,204,206,0,0,141,203,210,1,3,203,203,200,134,19,0,0,44,190,0,0,203,202,18,0,1,203,0,0,45,203,19,203,88,95,0,0,1,203,0,0,143,203,166,1,1,203,0,0,143,203,169,1,1,203,0,0,143,203,174,1,119,0,74,1,1,203,0,0,143,203,167,1,1,203,0,0,143,203,168,1,1,203,0,0,143,203,172,1,141,206,168,1,0,203,206,0,143,203,170,1,141,206,172,1,0,203,206,0,143,203,173,1,141,206,173,1,0,203,206,0,143,203,175,1,141,203,210,1,3,203,203,200,1,206,37,8,134,24,0,0,128,10,1,0,203,206,0,0,32,206,24,0,121,206,11,0,141,203,167,1,0,206,203,0,143,206,166,1,141,203,170,1,0,206,203,0,143,206,169,1,141,203,175,1,0,206,203,0,143,206,174,1,119,0,41,1,141,203,210,1,3,206,203,200,143,206,183,1,141,206,183,1,78,25,206,0,41,206,25,24,42,206,206,24,1,203,9,0,1,204,37,0,138,206,203,204,168,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,172,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,152,96,0,0,176,96,0,0,0,35,25,0,1,203,67,0,143,203,209,1,119,0,14,0,119,0,8,0,119,0,7,0,141,204,183,1,0,203,204,0,143,203,184,1,1,203,60,0,143,203,209,1,119,0,6,0,141,206,183,1,25,26,206,1,0,206,26,0,143,206,183,1,119,0,196,255,141,206,209,1,32,206,206,60,121,206,81,0,1,206,0,0,143,206,209,1,141,206,184,1,102,27,206,1,41,206,27,24,42,206,206,24,1,203,67,0,1,204,51,0,138,206,203,204,232,97,0,0,216,97,0,0,248,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,252,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,0,98,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,216,97,0,0,4,98,0,0,0,35,27,0,1,203,67,0,143,203,209,1,119,0,17,0,141,204,175,1,0,203,204,0,143,203,176,1,119,0,109,0,119,0,86,0,119,0,3,0,119,0,10,0,119,0,249,255,141,206,184,1,25,206,206,2,134,33,0,0,124,214,0,0,206,0,0,0,141,206,210,1,3,206,206,201,109,206,20,33,141,206,209,1,32,206,206,67,121,206,53,0,1,206,0,0,143,206,209,1,41,206,35,24,42,206,206,24,1,203,0,0,1,204,36,0,138,206,203,204,252,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,224,98,0,0,0,99,0,0,141,204,170,1,0,203,204,0,143,203,171,1,141,204,175,1,0,203,204,0,143,203,177,1,119,0,69,0,119,0,2,0,119,0,1,0,141,206,210,1,3,206,206,200,134,34,0,0,44,190,0,0,206,202,18,0,1,206,0,0,45,206,34,206,76,99,0,0,141,203,167,1,0,206,203,0,143,206,166,1,141,203,170,1,0,206,203,0,143,206,169,1,141,203,175,1,0,206,203,0,143,206,174,1,119,0,77,0,119,0,18,255,141,206,175,1,25,30,206,1,141,206,210,1,3,206,206,200,134,32,0,0,44,190,0,0,206,202,18,0,1,206,0,0,45,206,32,206,156,99,0,0,141,203,167,1,0,206,203,0,143,206,166,1,141,203,170,1,0,206,203,0,143,206,169,1,0,206,30,0,143,206,174,1,119,0,57,0,0,206,30,0,143,206,175,1,119,0,252,254,141,206,170,1,25,28,206,1,141,206,210,1,3,206,206,200,134,29,0,0,44,190,0,0,206,202,18,0,1,206,0,0,45,206,29,206,244,99,0,0,141,203,167,1,0,206,203,0,143,206,166,1,0,206,28,0,143,206,169,1,141,203,176,1,0,206,203,0,143,206,174,1,119,0,35,0,0,206,28,0,143,206,170,1,141,203,176,1,0,206,203,0,143,206,173,1,119,0,224,254,141,206,167,1,25,36,206,1,141,206,210,1,3,206,206,200,134,37,0,0,44,190,0,0,206,202,18,0,1,206,0,0,45,206,37,206,88,100,0,0,0,206,36,0,143,206,166,1,141,203,171,1,0,206,203,0,143,206,169,1,141,203,177,1,0,206,203,0,143,206,174,1,119,0,10,0,0,206,36,0,143,206,167,1,141,203,171,1,0,206,203,0,143,206,168,1,141,203,177,1,0,206,203,0,143,206,172,1,119,0,190,254,141,206,169,1,34,39,206,1,1,206,1,0,141,203,169,1,125,8,39,206,203,0,0,0,134,40,0,0,44,15,1,0,18,0,0,0,32,203,40,0,121,203,28,0,134,41,0,0,28,21,1,0,82,42,41,0,134,43,0,0,108,225,0,0,42,0,0,0,82,44,41,0,141,203,210,1,141,206,115,1,109,203,104,206,141,206,210,1,25,206,206,104,109,206,4,43,141,206,210,1,25,206,206,104,109,206,8,44,1,203,45,8,141,204,210,1,25,204,204,104,134,206,0,0,172,21,1,0,203,204,0,0,1,204,1,0,1,203,0,0,134,206,0,0,120,25,1,0,204,203,0,0,141,203,118,1,33,203,203,0,141,204,118,1,125,206,203,204,8,0,0,0,143,206,117,1,141,206,117,1,34,206,206,1,121,206,10,0,1,204,98,8,134,206,0,0,28,6,1,0,204,0,0,0,1,204,1,0,1,203,0,0,134,206,0,0,120,25,1,0,204,203,0,0,141,206,166,1,34,45,206,1,121,45,10,0,1,203,158,8,134,206,0,0,28,6,1,0,203,0,0,0,1,203,1,0,1,204,0,0,134,206,0,0,120,25,1,0,203,204,0,0,141,206,166,1,27,47,206,24,135,48,3,0,47,0,0,0,1,206,0,0,45,206,48,206,4,102,0,0,134,49,0,0,28,21,1,0,82,50,49,0,134,51,0,0,108,225,0,0,50,0,0,0,82,52,49,0,141,206,210,1,109,206,120,51,141,206,210,1,25,206,206,120,109,206,4,52,1,204,180,8,141,203,210,1,25,203,203,120,134,206,0,0,172,21,1,0,204,203,0,0,1,203,1,0,1,204,0,0,134,206,0,0,120,25,1,0,203,204,0,0,141,206,117,1,27,206,206,36,135,53,3,0,206,0,0,0,141,206,174,1,32,54,206,0,120,54,58,0,141,206,174,1,41,206,206,2,0,55,206,0,25,206,55,4,135,56,3,0,206,0,0,0,141,206,210,1,3,206,206,201,109,206,40,56,25,206,55,4,135,57,3,0,206,0,0,0,141,206,210,1,3,206,206,201,109,206,44,57,1,206,0,0,13,206,57,206,1,204,0,0,13,204,56,204,20,206,206,204,121,206,28,0,134,58,0,0,28,21,1,0,82,59,58,0,134,61,0,0,108,225,0,0,59,0,0,0,82,62,58,0,141,206,210,1,1,204,128,0,97,206,204,61,141,204,210,1,1,206,128,0,3,204,204,206,109,204,4,62,1,206,237,8,141,203,210,1,1,205,128,0,3,203,203,205,134,204,0,0,172,21,1,0,206,203,0,0,1,203,1,0,1,206,0,0,134,204,0,0,120,25,1,0,203,206,0,0,119,0,10,0,1,206,0,0,25,203,55,4,135,204,1,0,56,206,203,0,1,203,0,0,25,206,55,4,135,204,1,0,57,203,206,0,119,0,1,0,1,206,0,0,141,203,117,1,27,203,203,36,135,204,1,0,53,206,203,0,1,204,0,0,143,204,144,1,141,204,144,1,27,204,204,36,3,63,53,204,141,204,144,1,85,63,204,0,141,204,144,1,25,64,204,1,141,204,117,1,52,204,64,204,84,103,0,0,0,204,64,0,143,204,144,1,119,0,244,255,1,203,0,0,135,204,1,0,48,203,47,0,1,204,0,0,141,203,166,1,15,65,204,203,121,65,18,0,1,203,0,0,143,203,148,1,141,203,148,1,27,203,203,24,3,66,48,203,141,203,148,1,85,66,203,0,141,203,148,1,25,67,203,1,141,204,166,1,13,203,67,204,143,203,143,1,141,203,143,1,120,203,4,0,0,203,67,0,143,203,148,1,119,0,242,255,134,203,0,0,0,16,1,0,18,0,0,0,1,203,20,0,82,68,203,0,1,203,0,0,143,203,120,1,1,203,0,0,143,203,128,1,1,203,0,0,143,203,149,1,1,203,0,0,143,203,159,1,141,203,149,1,27,203,203,24,3,203,48,203,25,70,203,16,141,203,149,1,27,203,203,24,3,203,48,203,25,71,203,12,141,203,149,1,27,203,203,24,3,203,48,203,25,72,203,8,141,203,149,1,27,203,203,24,3,203,48,203,25,73,203,4,141,204,120,1,0,203,204,0,143,203,122,1,141,204,128,1,0,203,204,0,143,203,129,1,141,204,159,1,0,203,204,0,143,203,161,1,141,204,122,1,0,203,204,0,143,203,121,1,141,204,161,1,0,203,204,0,143,203,160,1,141,203,210,1,3,203,203,200,134,74,0,0,44,190,0,0,203,202,18,0,1,203,0,0,45,203,74,203,156,104,0,0,141,204,149,1,0,203,204,0,143,203,150,1,1,203,132,0,143,203,209,1,119,0,156,2,141,204,160,1,0,203,204,0,143,203,162,1,141,203,162,1,25,76,203,1,141,203,210,1,3,203,203,200,1,204,37,8,134,78,0,0,128,10,1,0,203,204,0,0,32,204,78,0,121,204,7,0,141,203,149,1,0,204,203,0,143,204,150,1,1,204,132,0,143,204,209,1,119,0,137,2,141,203,210,1,3,204,203,200,143,204,185,1,141,204,185,1,78,79,204,0,41,204,79,24,42,204,204,24,1,203,0,0,1,206,36,0,138,204,203,206,176,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,180,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,160,105,0,0,184,105,0,0,160,105,0,0,160,105,0,0,188,105,0,0,141,206,185,1,0,203,206,0,143,203,186,1,119,0,27,0,119,0,9,0,119,0,3,0,119,0,2,0,119,0,6,0,141,204,185,1,25,80,204,1,0,204,80,0,143,204,185,1,119,0,201,255,141,204,210,1,3,204,204,200,134,75,0,0,44,190,0,0,204,202,18,0,1,204,0,0,45,204,75,204,12,106,0,0,141,203,149,1,0,204,203,0,143,204,150,1,1,204,132,0,143,204,209,1,119,0,64,2,0,204,76,0,143,204,162,1,119,0,165,255,141,204,210,1,3,204,204,200,135,81,4,0,204,0,0,0,1,204,255,63,45,204,81,204,140,106,0,0,141,204,210,1,3,204,204,200,1,203,254,63,90,82,204,203,41,204,82,24,42,204,204,24,1,203,10,0,1,206,4,0,138,204,203,206,116,106,0,0,104,106,0,0,104,106,0,0,136,106,0,0,1,203,97,0,143,203,209,1,119,0,38,2,1,203,255,63,143,203,158,1,1,203,98,0,143,203,209,1,119,0,9,0,119,0,251,255,1,204,0,0,47,204,204,81,168,106,0,0,0,204,81,0,143,204,158,1,1,204,98,0,143,204,209,1,141,204,209,1,32,204,204,98,121,204,55,0,1,204,0,0,143,204,209,1,141,204,158,1,26,83,204,1,141,204,210,1,3,204,204,200,90,85,204,83,41,204,85,24,42,204,204,24,1,203,9,0,1,206,24,0,138,204,203,206,72,107,0,0,76,107,0,0,68,107,0,0,68,107,0,0,80,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,68,107,0,0,84,107,0,0,119,0,18,0,119,0,4,0,119,0,3,0,119,0,2,0,119,0,1,0,141,204,210,1,3,204,204,200,1,203,0,0,95,204,83,203,1,203,1,0,141,204,158,1,15,86,203,204,121,86,6,0,0,204,83,0,143,204,158,1,1,204,98,0,143,204,209,1,119,0,203,255,1,204,0,0,85,73,204,0,1,203,0,0,109,73,4,203,1,204,0,0,109,73,8,204,1,203,0,0,109,73,12,203,141,203,186,1,78,87,203,0,41,203,87,24,42,203,203,24,32,203,203,45,121,203,10,0,141,204,121,1,0,203,204,0,143,203,126,1,1,203,0,0,143,203,165,1,141,204,186,1,0,203,204,0,143,203,188,1,119,0,13,0,0,203,76,0,143,203,63,1,141,204,121,1,0,203,204,0,143,203,125,1,141,204,129,1,0,203,204,0,143,203,130,1,141,204,186,1,0,203,204,0,143,203,187,1,119,0,166,1,141,203,188,1,25,88,203,1,78,89,88,0,141,203,188,1,25,90,203,2,41,203,89,24,42,203,203,24,33,203,203,98,121,203,12,0,78,91,90,0,41,203,91,24,42,203,203,24,32,203,203,32,121,203,4,0,0,203,90,0,143,203,189,1,119,0,6,0,1,203,103,0,143,203,209,1,119,0,169,1,0,203,90,0,143,203,189,1,141,203,189,1,78,93,203,0,141,203,189,1,25,94,203,1,41,203,93,24,42,203,203,24,1,204,9,0,1,206,24,0,138,203,204,206,4,109,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,244,108,0,0,8,109,0,0,141,206,189,1,0,204,206,0,143,204,190,1,119,0,5,0,119,0,1,0,0,204,94,0,143,204,189,1,119,0,216,255,0,203,94,0,143,203,191,1,141,203,191,1,78,95,203,0,41,203,95,24,42,203,203,24,1,204,0,0,1,206,33,0,138,203,204,206,192,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,196,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,188,109,0,0,200,109,0,0,119,0,7,0,119,0,2,0,119,0,1,0,141,206,191,1,0,204,206,0,143,204,192,1,119,0,6,0,141,203,191,1,25,96,203,1,0,203,96,0,143,203,191,1,119,0,205,255,41,203,95,24,42,203,203,24,32,203,203,0,41,204,89,24,42,204,204,24,33,204,204,98,40,204,204,1,20,203,203,204,121,203,5,0,141,204,192,1,0,203,204,0,143,203,193,1,119,0,7,0,141,203,192,1,1,204,0,0,83,203,204,0,141,203,192,1,25,204,203,1,143,204,193,1,41,204,89,24,42,204,204,24,1,206,67,0,1,207,51,0,138,204,206,207,36,111,0,0,24,111,0,0,40,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,68,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,92,111,0,0,240,111,0,0,24,111,0,0,32,112,0,0,24,111,0,0,24,111,0,0,24,111,0,0,80,112,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,128,112,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,24,111,0,0,176,112,0,0,1,206,129,0,143,206,209,1,119,0,250,0,119,0,99,0,141,206,126,1,0,203,206,0,143,203,127,1,141,206,193,1,0,203,206,0,143,203,194,1,119,0,177,0,141,207,126,1,0,206,207,0,143,206,123,1,1,206,1,0,143,206,163,1,119,0,124,0,141,207,118,1,33,207,207,0,121,207,13,0,1,203,245,9,1,205,73,0,1,206,1,0,134,207,0,0,192,12,1,0,203,205,206,68,141,206,126,1,0,207,206,0,143,207,123,1,1,207,1,0,143,207,163,1,119,0,109,0,141,207,126,1,141,206,117,1,15,106,207,206,120,106,4,0,1,206,124,0,143,206,209,1,119,0,214,0,141,206,190,1,134,107,0,0,208,20,1,0,206,0,0,0,141,206,126,1,27,206,206,36,3,206,53,206,25,108,206,28,85,108,107,0,141,207,126,1,0,206,207,0,143,206,123,1,1,206,1,0,143,206,163,1,119,0,87,0,141,203,190,1,134,97,0,0,208,20,1,0,203,0,0,0,85,73,97,0,141,206,126,1,0,203,206,0,143,203,123,1,141,206,165,1,0,203,206,0,143,203,163,1,119,0,75,0,141,203,190,1,134,101,0,0,208,20,1,0,203,0,0,0,85,70,101,0,141,206,126,1,0,203,206,0,143,203,123,1,141,206,165,1,0,203,206,0,143,203,163,1,119,0,63,0,141,203,190,1,134,98,0,0,208,20,1,0,203,0,0,0,85,72,98,0,141,206,126,1,0,203,206,0,143,203,123,1,141,206,165,1,0,203,206,0,143,203,163,1,119,0,51,0,141,203,190,1,134,100,0,0,208,20,1,0,203,0,0,0,85,71,100,0,141,206,126,1,0,203,206,0,143,203,123,1,141,206,165,1,0,203,206,0,143,203,163,1,119,0,39,0,141,203,118,1,33,203,203,0,121,203,13,0,1,206,119,9,1,205,73,0,1,207,1,0,134,203,0,0,192,12,1,0,206,205,207,68,141,207,126,1,0,203,207,0,143,203,123,1,1,203,1,0,143,203,163,1,119,0,24,0,141,203,126,1,141,207,117,1,15,102,203,207,120,102,4,0,1,207,119,0,143,207,209,1,119,0,129,0,141,207,190,1,134,103,0,0,208,20,1,0,207,0,0,0,141,207,126,1,25,104,207,1,141,207,126,1,27,207,207,36,3,207,53,207,25,105,207,32,85,105,103,0,0,207,104,0,143,207,123,1,1,207,1,0,143,207,163,1,119,0,1,0,141,204,193,1,78,10,204,0,41,204,10,24,42,204,204,24,32,204,204,45,121,204,11,0,141,206,123,1,0,204,206,0,143,204,126,1,141,206,163,1,0,204,206,0,143,204,165,1,141,206,193,1,0,204,206,0,143,204,188,1,119,0,165,254,141,206,123,1,0,204,206,0,143,204,124,1,141,206,163,1,0,204,206,0,143,204,164,1,141,206,193,1,0,204,206,0,143,204,195,1,119,0,1,0,141,204,164,1,32,204,204,0,121,204,13,0,0,204,76,0,143,204,63,1,141,206,124,1,0,204,206,0,143,204,125,1,141,206,129,1,0,204,206,0,143,204,130,1,141,206,195,1,0,204,206,0,143,204,187,1,119,0,49,0,141,206,124,1,0,204,206,0,143,204,121,1,0,204,76,0,143,204,160,1,119,0,153,253,141,204,129,1,141,206,174,1,15,109,204,206,120,109,4,0,1,206,127,0,143,206,209,1,119,0,59,0,141,206,190,1,134,112,0,0,208,20,1,0,206,0,0,0,141,206,210,1,3,206,206,201,106,113,206,40,141,206,129,1,41,206,206,2,3,114,113,206,85,114,112,0,141,206,194,1,134,115,0,0,208,20,1,0,206,0,0,0,141,206,210,1,3,206,206,201,106,116,206,44,141,206,129,1,41,206,206,2,3,117,116,206,85,117,115,0,141,206,129,1,25,118,206,1,141,206,194,1,1,204,0,0,83,206,204,0,141,206,127,1,0,204,206,0,143,204,122,1,0,204,118,0,143,204,129,1,0,204,76,0,143,204,161,1,119,0,105,253,141,204,187,1,134,119,0,0,208,20,1,0,204,0,0,0,141,204,149,1,27,204,204,24,3,204,48,204,25,121,204,20,85,121,119,0,141,204,149,1,25,122,204,1,141,206,125,1,0,204,206,0,143,204,120,1,141,206,130,1,0,204,206,0,143,204,128,1,0,204,122,0,143,204,149,1,141,206,63,1,0,204,206,0,143,204,159,1,119,0,57,253,141,204,209,1,32,204,204,97,121,204,17,0,141,204,210,1,1,206,136,0,97,204,206,76,1,204,41,9,141,207,210,1,1,205,136,0,3,207,207,205,134,206,0,0,172,21,1,0,204,207,0,0,1,207,1,0,1,204,0,0,134,206,0,0,120,25,1,0,207,204,0,0,119,0,215,5,141,206,209,1,32,206,206,103,121,206,23,0,141,206,210,1,1,204,144,0,41,207,89,24,42,207,207,24,97,206,204,207,141,207,210,1,1,204,144,0,3,207,207,204,109,207,4,76,1,204,59,9,141,206,210,1,1,205,144,0,3,206,206,205,134,207,0,0,172,21,1,0,204,206,0,0,1,206,1,0,1,204,0,0,134,207,0,0,120,25,1,0,206,204,0,0,119,0,190,5,141,207,209,1,32,207,207,119,121,207,11,0,1,204,193,9,134,207,0,0,28,6,1,0,204,0,0,0,1,204,1,0,1,206,0,0,134,207,0,0,120,25,1,0,204,206,0,0,119,0,177,5,141,207,209,1,32,207,207,124,121,207,11,0,1,206,63,10,134,207,0,0,28,6,1,0,206,0,0,0,1,206,1,0,1,204,0,0,134,207,0,0,120,25,1,0,206,204,0,0,119,0,164,5,141,207,209,1,32,207,207,127,121,207,19,0,141,207,174,1,25,111,207,1,141,207,210,1,1,204,152,0,97,207,204,111,1,207,115,10,141,206,210,1,1,205,152,0,3,206,206,205,134,204,0,0,172,21,1,0,207,206,0,0,1,206,1,0,1,207,0,0,134,204,0,0,120,25,1,0,206,207,0,0,119,0,143,5,141,204,209,1,1,207,129,0,45,204,204,207,220,116,0,0,141,204,210,1,1,207,160,0,41,206,89,24,42,206,206,24,97,204,207,206,141,206,210,1,1,207,160,0,3,206,206,207,109,206,4,76,1,207,165,10,141,204,210,1,1,205,160,0,3,204,204,205,134,206,0,0,172,21,1,0,207,204,0,0,1,204,1,0,1,207,0,0,134,206,0,0,120,25,1,0,204,207,0,0,119,0,117,5,141,206,209,1,1,207,132,0,45,206,206,207,172,138,0,0,141,206,150,1,141,207,166,1,13,123,206,207,120,123,22,0,141,207,210,1,1,206,168,0,141,204,150,1,97,207,206,204,141,204,210,1,1,206,168,0,3,204,204,206,141,206,166,1,109,204,4,206,1,204,197,10,141,207,210,1,1,205,168,0,3,207,207,205,134,206,0,0,172,21,1,0,204,207,0,0,1,207,1,0,1,204,0,0,134,206,0,0,120,25,1,0,207,204,0,0,134,124,0,0,44,15,1,0,18,0,0,0,32,206,124,0,121,206,32,0,134,125,0,0,28,21,1,0,82,126,125,0,134,127,0,0,108,225,0,0,126,0,0,0,82,128,125,0,141,206,210,1,1,204,176,0,141,207,115,1,97,206,204,207,141,207,210,1,1,204,176,0,3,207,207,204,109,207,4,127,141,207,210,1,1,204,176,0,3,207,207,204,109,207,8,128,1,204,16,11,141,206,210,1,1,205,176,0,3,206,206,205,134,207,0,0,172,21,1,0,204,206,0,0,1,206,1,0,1,204,0,0,134,207,0,0,120,25,1,0,206,204,0,0,134,207,0,0,144,221,0,0,18,0,0,0,141,207,47,1,82,129,207,0,32,207,129,0,1,204,164,29,1,206,68,11,125,6,207,204,206,0,0,0,141,206,89,1,82,131,206,0,141,206,210,1,1,204,192,0,97,206,204,6,141,204,210,1,1,206,192,0,3,204,204,206,109,204,4,14,1,206,71,11,141,207,210,1,1,205,192,0,3,207,207,205,134,204,0,0,44,22,1,0,131,206,207,0,141,204,89,1,82,132,204,0,141,204,210,1,1,207,200,0,97,204,207,6,1,204,89,11,141,206,210,1,1,205,200,0,3,206,206,205,134,207,0,0,44,22,1,0,132,204,206,0,1,207,0,0,45,207,1,207,148,118,0,0,141,207,89,1,82,135,207,0,0,142,135,0,119,0,38,0,82,133,1,0,141,207,89,1,82,134,207,0,1,207,0,0,45,207,133,207,180,118,0,0,0,142,134,0,119,0,30,0,0,136,133,0,0,137,134,0,0,207,1,0,143,207,131,1,141,207,210,1,1,206,208,0,97,207,206,136,1,207,104,11,141,204,210,1,1,205,208,0,3,204,204,205,134,206,0,0,44,22,1,0,137,207,204,0,141,206,131,1,25,139,206,4,82,140,139,0,141,206,89,1,82,141,206,0,1,206,0,0,45,206,140,206,20,119,0,0,0,142,141,0,119,0,6,0,0,136,140,0,0,137,141,0,0,206,139,0,143,206,131,1,119,0,232,255,1,204,10,0,134,206,0,0,44,213,0,0,204,142,0,0,141,206,89,1,82,143,206,0,141,206,210,1,3,206,206,201,106,144,206,32,141,206,210,1,1,204,216,0,97,206,204,6,141,204,210,1,1,206,216,0,3,204,204,206,109,204,4,144,1,206,108,11,141,207,210,1,1,205,216,0,3,207,207,205,134,204,0,0,44,22,1,0,143,206,207,0,141,204,47,1,82,145,204,0,32,204,145,0,1,207,1,0,15,207,207,145,20,204,204,207,121,204,227,0,1,204,0,0,13,204,2,204,32,207,145,0,19,204,204,207,121,204,4,0,1,204,143,0,143,204,209,1,119,0,199,0,141,204,210,1,3,204,204,201,106,147,204,40,1,204,1,0,15,204,204,145,1,207,0,0,13,207,147,207,19,204,204,207,121,204,4,0,1,204,143,0,143,204,209,1,119,0,187,0,32,204,145,0,121,204,52,0,141,204,89,1,82,149,204,0], eb + 20480);
  HEAPU8.set([1,207,193,11,1,206,39,0,1,205,1,0,134,204,0,0,192,12,1,0,207,206,205,149,1,204,0,0,52,204,2,204,216,122,0,0,82,150,2,0,1,204,0,0,52,204,150,204,216,122,0,0,0,153,150,0,0,204,2,0,143,204,132,1,1,204,1,0,143,204,151,1,141,204,89,1,82,151,204,0,141,204,151,1,25,152,204,1,141,204,210,1,1,205,232,0,141,206,151,1,97,204,205,206,141,206,210,1,1,205,232,0,3,206,206,205,109,206,4,153,1,205,233,11,141,204,210,1,1,207,232,0,3,204,204,207,134,206,0,0,44,22,1,0,151,205,204,0,141,206,132,1,25,154,206,4,82,155,154,0,1,206,0,0,52,206,155,206,216,122,0,0,0,153,155,0,0,206,154,0,143,206,132,1,0,206,152,0,143,206,151,1,119,0,226,255,1,204,244,11,134,206,0,0,28,6,1,0,204,0,0,0,141,206,210,1,3,206,206,201,106,156,206,40,1,206,0,0,52,206,156,206,216,122,0,0,82,157,156,0,1,206,0,0,52,206,157,206,148,121,0,0,141,206,210,1,3,206,206,201,106,158,206,44,0,160,157,0,0,206,156,0,143,206,133,1,0,206,158,0,143,206,135,1,141,206,135,1,82,159,206,0,141,206,210,1,1,204,240,0,97,206,204,160,141,204,210,1,1,206,240,0,3,204,204,206,109,204,4,159,1,206,28,12,141,205,210,1,1,207,240,0,3,205,205,207,134,204,0,0,172,21,1,0,206,205,0,0,141,204,133,1,25,162,204,4,141,204,135,1,25,163,204,4,82,164,162,0,1,204,0,0,52,204,164,204,148,121,0,0,0,160,164,0,0,204,162,0,143,204,133,1,0,204,163,0,143,204,135,1,119,0,227,255,141,204,210,1,3,204,204,201,106,11,204,40,1,204,0,0,52,204,11,204,216,122,0,0,1,205,35,12,141,206,210,1,1,207,248,0,3,206,206,207,134,204,0,0,172,21,1,0,205,206,0,0,82,165,11,0,1,204,0,0,52,204,165,204,200,122,0,0,0,166,165,0,0,204,11,0,143,204,134,1,1,204,5,0,143,204,152,1,135,167,4,0,166,0,0,0,141,204,152,1,25,168,204,1,1,204,5,0,141,206,152,1,15,170,204,206,1,206,80,0,3,204,168,167,16,206,206,204,19,206,170,206,121,206,14,0,1,204,42,12,141,205,210,1,1,207,0,1,3,205,205,207,134,206,0,0,172,21,1,0,204,205,0,0,141,206,134,1,82,12,206,0,0,171,12,0,1,206,5,0,143,206,153,1,119,0,5,0,0,171,166,0,141,205,152,1,0,206,205,0,143,206,153,1,135,172,4,0,171,0,0,0,141,206,153,1,25,173,206,1,141,206,210,1,1,205,8,1,97,206,205,171,1,206,104,11,141,204,210,1,1,207,8,1,3,204,204,207,134,205,0,0,172,21,1,0,206,204,0,0,141,205,134,1,25,174,205,4,82,175,174,0,1,205,0,0,52,205,175,205,200,122,0,0,0,166,175,0,0,205,174,0,143,205,134,1,3,205,173,172,143,205,152,1,119,0,202,255,1,204,10,0,134,205,0,0,32,25,1,0,204,0,0,0,141,205,209,1,1,204,143,0,45,205,205,204,24,123,0,0,141,205,89,1,82,148,205,0,141,205,210,1,1,204,224,0,97,205,204,6,1,205,141,11,141,206,210,1,1,207,224,0,3,206,206,207,134,204,0,0,44,22,1,0,148,205,206,0,141,204,47,1,82,9,204,0,0,177,9,0,119,0,2,0,0,177,145,0,32,178,177,0,121,178,57,0,141,204,89,1,82,179,204,0,141,204,210,1,1,206,16,1,141,205,115,1,97,204,206,205,141,205,210,1,1,206,16,1,3,205,205,206,141,206,156,1,109,205,4,206,1,205,50,12,141,204,210,1,1,207,16,1,3,204,204,207,134,206,0,0,44,22,1,0,179,205,204,0,141,204,210,1,1,205,24,2,3,204,204,205,134,206,0,0,124,18,1,0,204,0,0,0,141,206,89,1,82,180,206,0,141,206,210,1,1,204,24,2,94,181,206,204,141,206,210,1,1,204,24,2,3,206,206,204,106,182,206,4,141,206,210,1,1,204,24,2,3,206,206,204,135,183,5,0,206,0,0,0,141,206,210,1,1,204,24,1,97,206,204,181,141,204,210,1,1,206,24,1,3,204,204,206,109,204,4,182,141,204,210,1,1,206,24,1,3,204,204,206,109,204,8,183,1,206,83,12,141,205,210,1,1,207,24,1,3,205,205,207,134,204,0,0,44,22,1,0,180,206,205,0,1,204,0,0,143,204,103,1,1,204,1,0,143,204,196,1,1,204,0,0,143,204,201,1,141,204,47,1,82,185,204,0,32,204,185,0,121,204,45,0,141,205,210,1,1,206,8,2,3,205,205,206,134,204,0,0,124,18,1,0,205,0,0,0,141,204,89,1,82,186,204,0,141,204,210,1,1,205,8,2,94,187,204,205,141,204,210,1,1,205,8,2,3,204,204,205,106,188,204,4,141,204,210,1,1,205,8,2,3,204,204,205,135,190,5,0,204,0,0,0,141,204,210,1,1,205,40,1,141,206,196,1,97,204,205,206,141,206,210,1,1,205,40,1,3,206,206,205,109,206,4,187,141,206,210,1,1,205,40,1,3,206,206,205,109,206,8,188,141,206,210,1,1,205,40,1,3,206,206,205,109,206,12,190,1,205,110,12,141,204,210,1,1,207,40,1,3,204,204,207,134,206,0,0,44,22,1,0,186,205,204,0,119,0,25,0,1,206,1,0,141,204,117,1,47,206,206,204,44,125,0,0,1,204,139,12,134,206,0,0,28,6,1,0,204,0,0,0,1,204,216,12,134,206,0,0,28,6,1,0,204,0,0,0,141,206,47,1,82,13,206,0,0,191,13,0,119,0,2,0,0,191,185,0,34,192,191,2,120,192,2,0,119,0,5,0,1,204,5,13,134,206,0,0,28,6,1,0,204,0,0,0,121,65,78,0,1,206,0,0,143,206,111,1,1,206,0,0,143,206,154,1,141,206,154,1,27,206,206,36,3,193,53,206,141,206,111,1,27,206,206,24,3,194,48,206,141,206,210,1,3,206,206,201,134,195,0,0,112,150,0,0,193,194,2,206,141,206,111,1,141,204,118,1,33,204,204,0,38,204,204,1,3,7,206,204,141,204,154,1,27,204,204,36,3,204,53,204,25,196,204,24,1,204,1,0,85,196,204,0,141,204,154,1,27,204,204,36,3,204,53,204,25,197,204,20,85,197,195,0,141,204,210,1,3,204,204,201,106,198,204,20,1,204,0,0,47,204,204,198,48,126,0,0,141,204,47,1,82,199,204,0,32,204,199,0,121,204,5,0,134,204,0,0,92,13,1,0,198,0,0,0,119,0,12,0,141,204,210,1,1,206,56,1,97,204,206,198,1,204,77,13,141,205,210,1,1,207,56,1,3,205,205,207,134,206,0,0,172,21,1,0,204,205,0,0,119,0,1,0,141,205,154,1,25,206,205,1,143,206,0,1,141,205,166,1,15,206,7,205,143,206,1,1,141,206,0,1,141,205,117,1,15,206,206,205,141,205,1,1,19,206,206,205,121,206,7,0,0,206,7,0,143,206,111,1,141,205,0,1,0,206,205,0,143,206,154,1,119,0,187,255,0,206,7,0,143,206,110,1,119,0,3,0,1,206,0,0,143,206,110,1,141,206,118,1,33,206,206,0,121,206,12,0,141,205,110,1,109,53,24,205,141,206,118,1,0,205,206,0,143,205,101,1,141,206,103,1,0,205,206,0,143,205,106,1,1,205,177,0,143,205,209,1,119,0,14,0,32,205,8,0,121,205,5,0,141,206,103,1,0,205,206,0,143,205,105,1,119,0,8,0,0,205,8,0,143,205,101,1,141,206,103,1,0,205,206,0,143,205,106,1,1,205,177,0,143,205,209,1,141,205,209,1,1,206,177,0,45,205,205,206,168,131,0,0,1,205,0,0,143,205,209,1,141,206,47,1,82,205,206,0,143,205,2,1,141,205,2,1,32,205,205,0,121,205,13,0,141,206,210,1,1,204,216,0,3,206,206,204,1,204,0,0,134,205,0,0,168,17,1,0,206,204,0,0,143,205,6,1,141,204,6,1,0,205,204,0,143,205,181,1,119,0,16,0,141,205,210,1,1,204,216,0,1,206,0,0,97,205,204,206,141,204,101,1,26,206,204,1,143,206,3,1,141,204,3,1,27,204,204,36,3,204,53,204,106,206,204,20,143,206,4,1,141,204,4,1,0,206,204,0,143,206,181,1,141,204,181,1,32,206,204,255,143,206,7,1,141,206,7,1,121,206,4,0,1,206,181,0,143,206,209,1,119,0,200,1,141,204,210,1,1,205,216,0,94,206,204,205,143,206,12,1,141,204,12,1,33,204,204,0,38,204,204,1,141,205,106,1,3,206,204,205,143,206,104,1,141,205,210,1,1,204,200,0,3,205,205,204,134,206,0,0,124,18,1,0,205,0,0,0,1,206,0,0,143,206,146,1,141,205,146,1,27,205,205,36,3,205,53,205,25,206,205,20,143,206,13,1,141,205,13,1,82,206,205,0,143,206,14,1,141,205,181,1,141,204,14,1,13,206,205,204,143,206,15,1,141,206,15,1,121,206,5,0,141,204,146,1,0,206,204,0,143,206,147,1,119,0,18,0,141,204,146,1,25,206,204,1,143,206,31,1,141,206,31,1,141,204,117,1,47,206,206,204,112,128,0,0,141,204,31,1,0,206,204,0,143,206,146,1,119,0,228,255,141,204,181,1,0,206,204,0,143,206,182,1,1,206,191,0,143,206,209,1,119,0,147,1,141,204,118,1,33,204,204,0,1,205,0,0,141,207,147,1,125,206,204,205,207,0,0,0,143,206,16,1,141,207,47,1,82,206,207,0,143,206,17,1,141,206,17,1,32,206,206,0,121,206,99,0,141,207,210,1,1,205,200,0,3,207,207,205,106,206,207,4,143,206,18,1,141,207,147,1,27,207,207,36,3,207,53,207,106,206,207,8,143,206,19,1,141,207,210,1,1,205,200,0,94,206,207,205,143,206,20,1,141,207,147,1,27,207,207,36,3,207,53,207,106,206,207,4,143,206,21,1,141,205,18,1,141,204,19,1,4,205,205,204,34,205,205,0,121,205,9,0,141,205,18,1,141,204,19,1,4,205,205,204,2,204,0,0,0,202,154,59,3,205,205,204,0,207,205,0,119,0,5,0,141,205,18,1,141,204,19,1,4,205,205,204,0,207,205,0,0,206,207,0,143,206,139,1,141,207,89,1,82,206,207,0,143,206,22,1,141,207,147,1,27,207,207,36,94,206,53,207,143,206,23,1,141,207,210,1,1,205,216,0,94,206,207,205,143,206,24,1,141,206,210,1,1,207,80,1,141,205,23,1,97,206,207,205,141,205,210,1,1,207,80,1,3,205,205,207,141,207,20,1,109,205,4,207,141,207,210,1,1,205,80,1,3,207,207,205,141,205,18,1,109,207,8,205,141,205,210,1,1,207,80,1,3,205,205,207,141,207,20,1,141,206,21,1,4,207,207,206,141,206,18,1,141,204,19,1,4,206,206,204,42,206,206,31,3,207,207,206,109,205,12,207,141,207,210,1,1,205,80,1,3,207,207,205,141,205,139,1,109,207,16,205,141,205,210,1,1,207,80,1,3,205,205,207,141,207,181,1,109,205,20,207,141,207,210,1,1,205,80,1,3,207,207,205,141,205,24,1,109,207,24,205,141,207,22,1,1,206,143,13,141,204,210,1,1,203,80,1,3,204,204,203,134,205,0,0,44,22,1,0,207,206,204,0,141,204,16,1,27,204,204,36,3,204,53,204,106,205,204,24,143,205,25,1,141,204,25,1,141,206,166,1,15,205,204,206,143,205,26,1,141,205,26,1,121,205,44,0,141,206,210,1,3,206,206,201,106,205,206,36,143,205,27,1,141,205,104,1,32,205,205,0,141,206,27,1,32,206,206,0,20,205,205,206,120,205,4,0,1,205,189,0,143,205,209,1,119,0,33,0,141,206,147,1,27,206,206,36,3,206,53,206,141,204,25,1,27,204,204,24,3,204,48,204,141,207,210,1,3,207,207,201,134,205,0,0,112,150,0,0,206,204,2,207,143,205,28,1,141,205,13,1,141,207,28,1,85,205,207,0,141,205,16,1,27,205,205,36,3,205,53,205,106,207,205,24,143,207,29,1,141,207,16,1,27,207,207,36,3,207,53,207,141,205,29,1,25,205,205,1,109,207,24,205,141,207,101,1,0,205,207,0,143,205,102,1,119,0,3,0,1,205,189,0,143,205,209,1,141,205,209,1,1,207,189,0,45,205,205,207,96,131,0,0,1,205,0,0,143,205,209,1,141,205,13,1,1,207,255,255,85,205,207,0,141,205,101,1,26,207,205,1,143,207,30,1,141,205,30,1,0,207,205,0,143,207,102,1,141,205,102,1,32,207,205,0,143,207,32,1,141,207,32,1,121,207,5,0,141,205,104,1,0,207,205,0,143,207,105,1,119,0,10,0,141,205,102,1,0,207,205,0,143,207,101,1,141,205,104,1,0,207,205,0,143,207,106,1,1,207,177,0,143,207,209,1,119,0,217,254,141,205,47,1,82,207,205,0,143,207,33,1,141,207,33,1,32,207,207,0,121,207,169,0,141,205,105,1,32,207,205,0,143,207,34,1,141,207,34,1,121,207,5,0,141,205,201,1,0,207,205,0,143,207,202,1,119,0,19,0,141,205,105,1,141,204,201,1,3,207,205,204,143,207,35,1,141,207,210,1,1,204,120,1,141,205,105,1,97,207,204,205,1,204,239,13,141,207,210,1,1,206,120,1,3,207,207,206,134,205,0,0,172,21,1,0,204,207,0,0,141,207,35,1,0,205,207,0,143,205,202,1,141,207,210,1,1,204,0,2,3,207,207,204,134,205,0,0,124,18,1,0,207,0,0,0,141,207,89,1,82,205,207,0,143,205,36,1,141,207,210,1,1,204,0,2,94,205,207,204,143,205,37,1,141,207,210,1,1,204,0,2,3,207,207,204,106,205,207,4,143,205,38,1,141,207,210,1,1,204,0,2,3,207,207,204,135,205,5,0,207,0,0,0,143,205,39,1,141,205,210,1,1,207,128,1,141,204,196,1,97,205,207,204,141,204,210,1,1,207,128,1,3,204,204,207,141,207,37,1,109,204,4,207,141,207,210,1,1,204,128,1,3,207,207,204,141,204,38,1,109,207,8,204,141,204,210,1,1,207,128,1,3,204,204,207,141,207,39,1,109,204,12,207,141,204,36,1,1,205,24,14,141,206,210,1,1,203,128,1,3,206,206,203,134,207,0,0,44,22,1,0,204,205,206,0,141,206,210,1,1,205,0,2,3,206,206,205,106,207,206,4,143,207,41,1,141,206,210,1,1,205,8,2,3,206,206,205,106,207,206,4,143,207,42,1,141,206,210,1,1,205,0,2,94,207,206,205,143,207,43,1,141,206,210,1,1,205,8,2,94,207,206,205,143,207,44,1,141,205,41,1,141,204,42,1,4,205,205,204,34,205,205,0,121,205,9,0,141,205,41,1,141,204,42,1,4,205,205,204,2,204,0,0,0,202,154,59,3,205,205,204,0,206,205,0,119,0,5,0,141,205,41,1,141,204,42,1,4,205,205,204,0,206,205,0,0,207,206,0,143,207,197,1,141,206,89,1,82,207,206,0,143,207,45,1,141,207,210,1,1,206,144,1,141,205,196,1,97,207,206,205,141,205,210,1,1,206,144,1,3,205,205,206,141,206,43,1,141,207,44,1,4,206,206,207,141,207,41,1,141,204,42,1,4,207,207,204,42,207,207,31,3,206,206,207,109,205,4,206,141,206,210,1,1,205,144,1,3,206,206,205,141,205,197,1,109,206,8,205,141,205,210,1,1,206,144,1,3,205,205,206,141,206,43,1,141,207,44,1,4,206,206,207,141,207,41,1,141,204,42,1,4,207,207,204,42,207,207,31,3,206,206,207,109,205,12,206,141,206,210,1,1,205,144,1,3,206,206,205,141,205,197,1,109,206,16,205,141,206,45,1,1,207,55,14,141,204,210,1,1,203,144,1,3,204,204,203,134,205,0,0,44,22,1,0,206,207,204,0,141,204,202,1,0,205,204,0,143,205,203,1,119,0,4,0,141,204,201,1,0,205,204,0,143,205,203,1,141,204,196,1,25,205,204,1,143,205,46,1,141,204,196,1,141,207,156,1,15,205,204,207,143,205,49,1,141,205,49,1,121,205,11,0,141,207,105,1,0,205,207,0,143,205,103,1,141,207,46,1,0,205,207,0,143,205,196,1,141,207,203,1,0,205,207,0,143,205,201,1,119,0,94,253,141,207,203,1,0,205,207,0,143,205,204,1,1,205,198,0,143,205,209,1,119,0,1,0,141,205,209,1,1,207,181,0,45,205,205,207,132,135,0,0,134,205,0,0,28,21,1,0,143,205,8,1,141,207,8,1,82,205,207,0,143,205,9,1,141,207,9,1,134,205,0,0,108,225,0,0,207,0,0,0,143,205,10,1,141,207,8,1,82,205,207,0,143,205,11,1,141,205,210,1,1,207,64,1,1,204,255,255,97,205,207,204,141,204,210,1,1,207,64,1,3,204,204,207,141,207,10,1,109,204,4,207,141,207,210,1,1,204,64,1,3,207,207,204,141,204,11,1,109,207,8,204,1,207,107,13,141,205,210,1,1,206,64,1,3,205,205,206,134,204,0,0,44,22,1,0,68,207,205,0,1,205,1,0,1,207,0,0,134,204,0,0,120,25,1,0,205,207,0,0,119,0,203,0,141,204,209,1,1,207,191,0,45,204,204,207,216,135,0,0,141,204,210,1,1,207,112,1,141,205,182,1,97,204,207,205,1,207,204,13,141,204,210,1,1,206,112,1,3,204,204,206,134,205,0,0,44,22,1,0,68,207,204,0,1,204,1,0,1,207,0,0,134,205,0,0,120,25,1,0,204,207,0,0,119,0,182,0,141,205,209,1,1,207,198,0,45,205,205,207,172,138,0,0,141,207,47,1,82,205,207,0,143,205,50,1,141,205,50,1,32,205,205,0,120,205,6,0,1,207,0,0,1,204,0,0,134,205,0,0,120,25,1,0,207,204,0,0,141,204,210,1,1,207,16,2,3,204,204,207,134,205,0,0,124,18,1,0,204,0,0,0,141,204,89,1,82,205,204,0,143,205,51,1,141,204,210,1,1,207,16,2,94,205,204,207,143,205,52,1,141,204,210,1,1,207,16,2,3,204,204,207,106,205,204,4,143,205,53,1,141,204,210,1,1,207,16,2,3,204,204,207,135,205,5,0,204,0,0,0,143,205,54,1,141,205,210,1,1,204,168,1,141,207,52,1,97,205,204,207,141,207,210,1,1,204,168,1,3,207,207,204,141,204,53,1,109,207,4,204,141,204,210,1,1,207,168,1,3,204,204,207,141,207,54,1,109,204,8,207,141,204,51,1,1,205,93,14,141,206,210,1,1,203,168,1,3,206,206,203,134,207,0,0,44,22,1,0,204,205,206,0,141,206,210,1,1,205,16,2,3,206,206,205,106,207,206,4,143,207,55,1,141,206,210,1,1,205,24,2,3,206,206,205,106,207,206,4,143,207,56,1,141,206,210,1,1,205,16,2,94,207,206,205,143,207,57,1,141,206,210,1,1,205,24,2,94,207,206,205,143,207,58,1,141,205,55,1,141,204,56,1,4,205,205,204,34,205,205,0,121,205,9,0,141,205,55,1,141,204,56,1,4,205,205,204,2,204,0,0,0,202,154,59,3,205,205,204,0,206,205,0,119,0,5,0,141,205,55,1,141,204,56,1,4,205,205,204,0,206,205,0,0,207,206,0,143,207,208,1,141,206,89,1,82,207,206,0,143,207,59,1,141,207,210,1,1,206,184,1,141,205,57,1,141,204,58,1,4,205,205,204,141,204,55,1,141,203,56,1,4,204,204,203,42,204,204,31,3,205,205,204,97,207,206,205,141,205,210,1,1,206,184,1,3,205,205,206,141,206,208,1,109,205,4,206,141,206,210,1,1,205,184,1,3,206,206,205,141,205,57,1,141,207,58,1,4,205,205,207,141,207,55,1,141,204,56,1,4,207,207,204,42,207,207,31,3,205,205,207,109,206,8,205,141,205,210,1,1,206,184,1,3,205,205,206,141,206,208,1,109,205,12,206,141,205,59,1,1,207,121,14,141,204,210,1,1,203,184,1,3,204,204,203,134,206,0,0,44,22,1,0,205,207,204,0,141,206,204,1,33,206,206,0,121,206,16,0,141,204,89,1,82,206,204,0,143,206,60,1,141,206,210,1,1,204,200,1,141,207,204,1,97,206,204,207,141,204,60,1,1,206,157,14,141,205,210,1,1,203,200,1,3,205,205,203,134,207,0,0,44,22,1,0,204,206,205,0,141,205,89,1,82,207,205,0,143,207,62,1,141,205,62,1,134,207,0,0,16,210,0,0,205,0,0,0,141,205,108,1,32,205,205,0,121,205,4,0,1,205,0,0,0,207,205,0,119,0,5,0,141,205,204,1,33,205,205,0,38,205,205,1,0,207,205,0,0,3,207,0,141,207,210,1,137,207,0,0,139,3,0,0,1,207,0,0,139,207,0,0,140,2,165,0,0,0,0,0,2,159,0,0,196,27,0,0,2,160,0,0,220,27,0,0,2,161,0,0,184,27,0,0,1,157,0,0,136,162,0,0,0,158,162,0,106,50,0,4,38,162,50,1,32,162,162,0,121,162,236,0,82,116,0,0,38,162,50,3,32,162,162,0,121,162,2,0,139,0,0,0,1,162,0,0,4,162,162,116,3,134,0,162,82,10,159,0,48,162,134,10,32,139,0,0,135,162,6,0,1,162,200,27,82,24,162,0,45,162,134,24,132,139,0,0,3,162,0,1,106,8,162,4,38,162,8,3,32,162,162,3,120,162,4,0,0,2,134,0,3,3,116,1,119,0,214,0,1,162,188,27,3,163,116,1,85,162,163,0,3,163,0,1,38,162,8,254,109,163,4,162,3,163,116,1,39,163,163,1,109,134,4,163,3,163,116,1,3,162,116,1,97,134,163,162,139,0,0,0,1,162,0,1,48,162,116,162,92,140,0,0,106,41,134,8,106,51,134,12,43,162,116,3,41,162,162,1,41,162,162,2,3,162,160,162,52,162,41,162,204,139,0,0,48,162,41,10,188,139,0,0,135,162,6,0,106,78,41,12,52,162,78,134,204,139,0,0,135,162,6,0,45,162,51,41,4,140,0,0,1,162,180,27,82,110,162,0,1,162,180,27,1,163,1,0,43,164,116,3,22,163,163,164,40,163,163,255,19,163,110,163,85,162,163,0,0,2,134,0,3,3,116,1,119,0,169,0,43,163,116,3,41,163,163,1,41,163,163,2,3,163,160,163,45,163,51,163,36,140,0,0,25,6,51,8,119,0,10,0,48,163,51,10,48,140,0,0,135,163,6,0,106,111,51,8,45,163,111,134,68,140,0,0,25,6,51,8,119,0,2,0,135,163,6,0,109,41,12,51,85,6,41,0,0,2,134,0,3,3,116,1,119,0,147,0,106,112,134,24,106,113,134,12,45,163,113,134,28,141,0,0,25,163,134,16,106,118,163,4,1,163,0,0,45,163,118,163,164,140,0,0,106,119,134,16,1,163,0,0,45,163,119,163,152,140,0,0,1,144,0,0,119,0,50,0,0,142,119,0,25,148,134,16,119,0,4,0,0,142,118,0,25,163,134,16,25,148,163,4,25,120,142,20,82,121,120,0,1,163,0,0,52,163,121,163,208,140,0,0,0,142,121,0,0,148,120,0,119,0,249,255,25,122,142,16,82,123,122,0,1,163,0,0,45,163,123,163,240,140,0,0,0,143,142,0,0,149,148,0,119,0,4,0,0,142,123,0,0,148,122,0,119,0,238,255,48,163,149,10,12,141,0,0,135,163,6,0,119,0,21,0,1,163,0,0,85,149,163,0,0,144,143,0,119,0,17,0,106,114,134,8,48,163,114,10,44,141,0,0,135,163,6,0,106,115,114,12,52,163,115,134,60,141,0,0,135,163,6,0,106,117,113,8,45,163,117,134,88,141,0,0,109,114,12,113,109,113,8,114,0,144,113,0,119,0,2,0,135,163,6,0,1,163,0,0,45,163,112,163,116,141,0,0,0,2,134,0,3,3,116,1,119,0,77,0,106,124,134,28,1,163,228,28,41,162,124,2,94,125,163,162,45,163,134,125,200,141,0,0,1,163,228,28,41,162,124,2,97,163,162,144,1,162,0,0,13,155,144,162,121,155,26,0,82,126,161,0,1,162,1,0,22,162,162,124,40,162,162,255,19,162,126,162,85,161,162,0,0,2,134,0,3,3,116,1,119,0,56,0,82,127,159,0,48,162,112,127,216,141,0,0,135,162,6,0,106,128,112,16,45,162,128,134,236,141,0,0,109,112,16,144,119,0,2,0,109,112,20,144,1,162,0,0,13,129,144,162,121,129,4,0,0,2,134,0,3,3,116,1,119,0,40,0,82,130,159,0,16,131,144,130,121,131,2,0,135,162,6,0,25,132,144,24,85,132,112,0,106,133,134,16,1,162,0,0,52,162,133,162,80,142,0,0,48,162,133,130,64,142,0,0,135,162,6,0,119,0,5,0,25,135,144,16,85,135,133,0,109,133,24,144,119,0,1,0,25,162,134,16,106,136,162,4,1,162,0,0,45,162,136,162,112,142,0,0,0,2,134,0,3,3,116,1,119,0,14,0,82,137,159,0,48,162,136,137,132,142,0,0,135,162,6,0,119,0,9,0,25,138,144,20,85,138,136,0,109,136,24,144,0,2,134,0,3,3,116,1,119,0,3,0,0,2,0,0,0,3,1,0,82,9,159,0,3,162,0,1,48,162,162,9,184,142,0,0,135,162,6,0,3,162,0,1,106,11,162,4,38,162,11,2,32,162,162,0,121,162,7,1,1,162,204,27,82,12,162,0,3,162,0,1,45,162,162,12,56,143,0,0,1,162,192,27,82,13,162,0,3,14,13,3,1,162,192,27,85,162,14,0,1,162,204,27,85,162,2,0,25,15,2,4,39,162,14,1,85,15,162,0,1,162,200,27,82,16,162,0,13,17,2,16,120,17,2,0,139,0,0,0,1,162,200,27,1,163,0,0,85,162,163,0,1,163,188,27,1,162,0,0,85,163,162,0,139,0,0,0,1,162,200,27,82,18,162,0,3,162,0,1,45,162,162,18,128,143,0,0,1,162,188,27,82,19,162,0,3,20,19,3,1,162,188,27,85,162,20,0,1,162,200,27,85,162,2,0,25,21,2,4,39,162,20,1,85,21,162,0,3,22,2,20,85,22,20,0,139,0,0,0,38,162,11,248,3,23,162,3,1,162,0,1,48,162,11,162,96,144,0,0,3,162,0,1,106,25,162,8,3,162,0,1,106,26,162,12,43,162,11,3,41,162,162,1,41,162,162,2,3,162,160,162,52,162,25,162,220,143,0,0,48,162,25,9,200,143,0,0,135,162,6,0,106,27,25,12,3,162,0,1,52,162,27,162,220,143,0,0,135,162,6,0,45,162,26,25,12,144,0,0,1,162,180,27,82,28,162,0,1,162,180,27,1,163,1,0,43,164,11,3,22,163,163,164,40,163,163,255,19,163,28,163,85,162,163,0,119,0,168,0,43,163,11,3,41,163,163,1,41,163,163,2,3,163,160,163,45,163,26,163,44,144,0,0,25,5,26,8,119,0,11,0,48,163,26,9,56,144,0,0,135,163,6,0,106,29,26,8,3,163,0,1,45,163,29,163,80,144,0,0,25,5,26,8,119,0,2,0,135,163,6,0,109,25,12,26,85,5,25,0,119,0,147,0,3,163,0,1,106,30,163,24,3,163,0,1,106,31,163,12,3,163,0,1,45,163,31,163,60,145,0,0,3,163,0,1,25,163,163,16,106,35,163,4,1,163,0,0,45,163,35,163,192,144,0,0,3,163,0,1,106,36,163,16,1,163,0,0,45,163,36,163,176,144,0,0,1,147,0,0,119,0,55,0,0,145,36,0,3,163,0,1,25,150,163,16,119,0,5,0,0,145,35,0,3,163,0,1,25,163,163,16,25,150,163,4,25,37,145,20,82,38,37,0,1,163,0,0,52,163,38,163,240,144,0,0,0,145,38,0,0,150,37,0,119,0,249,255,25,39,145,16,82,40,39,0,1,163,0,0,45,163,40,163,16,145,0,0,0,146,145,0,0,151,150,0,119,0,4,0,0,145,40,0,0,150,39,0,119,0,238,255,48,163,151,9,44,145,0,0,135,163,6,0,119,0,24,0,1,163,0,0,85,151,163,0,0,147,146,0,119,0,20,0,3,163,0,1,106,32,163,8,48,163,32,9,80,145,0,0,135,163,6,0,106,33,32,12,3,163,0,1,52,163,33,163,100,145,0,0,135,163,6,0,106,34,31,8,3,163,0,1,45,163,34,163,132,145,0,0,109,32,12,31,109,31,8,32,0,147,31,0,119,0,2,0,135,163,6,0,1,163,0,0,52,163,30,163,168,146,0,0,3,163,0,1,106,42,163,28,1,163,228,28,41,162,42,2,94,43,163,162,3,163,0,1,45,163,163,43,232,145,0,0,1,163,228,28,41,162,42,2,97,163,162,147,1,162,0,0,13,156,147,162,121,156,22,0,82,44,161,0,1,162,1,0,22,162,162,42,40,162,162,255,19,162,44,162,85,161,162,0,119,0,49,0,82,45,159,0,48,162,30,45,248,145,0,0,135,162,6,0,106,46,30,16,3,162,0,1,45,162,46,162,16,146,0,0,109,30,16,147,119,0,2,0,109,30,20,147,1,162,0,0,13,47,147,162,120,47,35,0,82,48,159,0,16,49,147,48,121,49,2,0,135,162,6,0,25,52,147,24,85,52,30,0,3,162,0,1,106,53,162,16,1,162,0,0,52,162,53,162,108,146,0,0,48,162,53,48,92,146,0,0,135,162,6,0,119,0,5,0,25,54,147,16,85,54,53,0,109,53,24,147,119,0,1,0,3,162,0,1,25,162,162,16,106,55,162,4,1,162,0,0,52,162,55,162,168,146,0,0,82,56,159,0,48,162,55,56,152,146,0,0,135,162,6,0,119,0,5,0,25,57,147,20,85,57,55,0,109,55,24,147,119,0,1,0,25,58,2,4,39,162,23,1,85,58,162,0,3,59,2,23,85,59,23,0,1,162,200,27,82,60,162,0,13,61,2,60,121,61,5,0,1,162,188,27,85,162,23,0,139,0,0,0,119,0,13,0,0,4,23,0,119,0,11,0,3,162,0,1,38,163,11,254,109,162,4,163,39,163,3,1,0,62,163,0,25,63,2,4,85,63,62,0,3,64,2,3,85,64,3,0,0,4,3,0,43,163,4,3,0,65,163,0,1,163,0,1,16,66,4,163,121,66,46,0,1,163,180,27,82,67,163,0,1,163,1,0,22,163,163,65,19,163,67,163,32,163,163,0,121,163,14,0,1,163,180,27,1,162,1,0,22,162,162,65,20,162,67,162,85,163,162,0,41,162,65,1,41,162,162,2,3,162,160,162,25,7,162,8,41,162,65,1,41,162,162,2,3,139,160,162,119,0,15,0,41,162,65,1,41,162,162,2,3,162,160,162,106,68,162,8,82,69,159,0,48,162,68,69,148,147,0,0,135,162,6,0,119,0,6,0,41,162,65,1,41,162,162,2,3,162,160,162,25,7,162,8,0,139,68,0,85,7,2,0,25,70,139,12,85,70,2,0,25,71,2,8,85,71,139,0,25,72,2,12,41,162,65,1,41,162,162,2,3,162,160,162,85,72,162,0,139,0,0,0,43,162,4,8,0,73,162,0,32,162,73,0,121,162,3,0,1,140,0,0,119,0,58,0,2,162,0,0,255,255,255,0,16,74,162,4,121,74,3,0,1,140,31,0,119,0,52,0,2,162,0,0,0,255,15,0,3,162,73,162,43,162,162,16,38,162,162,8,22,162,73,162,2,163,0,0,0,240,7,0,3,162,162,163,43,162,162,16,38,162,162,4,0,75,162,0,2,162,0,0,0,255,15,0,3,162,73,162,43,162,162,16,38,162,162,8,22,162,73,162,22,162,162,75,2,163,0,0,0,192,3,0,3,162,162,163,43,162,162,16,38,162,162,2,0,76,162,0,1,162,14,0,2,163,0,0,0,255,15,0,3,163,73,163,43,163,163,16,38,163,163,8,20,163,75,163,20,163,163,76,4,162,162,163,2,163,0,0,0,255,15,0,3,163,73,163,43,163,163,16,38,163,163,8,22,163,73,163,22,163,163,75,22,163,163,76,43,163,163,15,3,77,162,163,25,163,77,7,24,163,4,163,0,79,163,0,38,163,79,1,41,162,77,1,20,163,163,162,0,140,163,0,1,163,228,28,41,162,140,2,3,80,163,162,25,81,2,28,85,81,140,0,25,82,2,16,25,83,2,20,1,162,0,0,85,83,162,0,1,162,0,0,85,82,162,0,82,84,161,0,1,162,1,0,22,162,162,140,0,85,162,0,19,162,84,85,32,162,162,0,121,162,11,0,20,162,84,85,85,161,162,0,85,80,2,0,25,86,2,24,85,86,80,0,25,87,2,12,85,87,2,0,25,88,2,8,85,88,2,0,139,0,0,0,82,89,80,0,32,90,140,31,43,162,140,1,0,91,162,0,121,90,4,0,1,163,0,0,0,162,163,0,119,0,4,0,1,163,25,0,4,163,163,91,0,162,163,0,0,92,162,0,22,162,4,92,0,93,162,0,0,141,93,0,0,152,89,0,25,94,152,4,82,95,94,0,38,162,95,248,13,96,162,4,121,96,4,0,0,153,152,0,1,157,127,0,119,0,18,0,43,162,141,31,0,97,162,0,25,162,152,16,41,163,97,2,3,98,162,163,41,163,141,1,0,99,163,0,82,100,98,0,1,163,0,0,45,163,100,163,216,149,0,0,0,154,152,0,1,157,124,0,119,0,4,0,0,141,99,0,0,152,100,0,119,0,232,255,32,163,157,124,121,163,14,0,82,101,159,0,48,163,98,101,252,149,0,0,135,163,6,0,85,98,2,0,25,102,2,24,85,102,154,0,25,103,2,12,85,103,2,0,25,104,2,8,85,104,2,0,139,0,0,0,119,0,20,0,32,163,157,127,121,163,18,0,106,105,153,8,82,106,159,0,18,163,106,105,18,162,106,153,19,163,163,162,120,163,2,0,135,163,6,0,109,105,12,2,109,153,8,2,25,107,2,8,85,107,105,0,25,108,2,12,85,108,153,0,25,109,2,24,1,163,0,0,85,109,163,0,139,0,0,0,139,0,0,0,140,4,165,0,0,0,0,0,2,160,0,0,164,1,0,0,2,161,0,0,66,2,0,0,2,162,0,0,242,15,0,0,1,158,0,0,136,163,0,0,0,159,163,0,136,163,0,0,1,164,176,1,3,163,163,164,137,163,0,0,1,163,144,0,3,139,159,163,1,163,128,0,3,138,159,163,25,137,159,120,25,136,159,104,25,135,159,96,25,134,159,88,25,133,159,80,25,132,159,72,25,130,159,56,25,129,159,48,25,128,159,32,25,140,159,24,25,131,159,8,0,127,159,0,1,163,176,0,3,125,159,163,1,163,168,0,3,126,159,163,25,5,0,32,82,6,5,0,1,163,0,0,13,34,6,163,121,34,5,0,25,45,1,4,82,56,45,0,0,57,56,0,119,0,2,0,0,57,6,0,25,67,1,20,82,78,67,0,25,89,3,16,82,100,89,0,32,111,100,0,121,111,117,1,25,18,0,28,82,26,18,0,1,163,0,0,13,27,26,163,121,27,3,0,0,122,78,0,119,0,13,0,1,163,163,15,134,28,0,0,176,168,0,0,78,163,26,0,82,29,67,0,13,30,78,29,121,30,3,0,0,122,28,0,119,0,4,0,135,163,7,0,78,0,0,0,0,122,28,0,82,31,0,0,134,32,0,0,236,11,1,0,31,0,0,0,1,163,0,0,13,33,32,163,121,33,3,0,0,123,122,0,119,0,13,0,1,163,169,15,134,35,0,0,176,168,0,0,122,163,32,0,82,36,67,0,13,37,122,36,120,37,3,0,135,163,7,0,122,0,0,0,135,163,7,0,32,0,0,0,0,123,35,0,82,38,67,0,13,39,123,38,121,39,6,0,134,40,0,0,208,20,1,0,123,0,0,0,0,124,40,0,119,0,2,0,0,124,123,0,135,163,8,0,125,126,0,0,82,41,125,0,25,42,0,4,85,42,41,0,25,43,125,4,82,44,43,0,1,163,232,3,5,46,44,163,25,47,0,8,85,47,46,0,134,48,0,0,4,7,1,0,34,49,48,0,121,49,21,0,1,163,20,0,82,50,163,0,134,51,0,0,28,21,1,0,82,52,51,0,134,53,0,0,108,225,0,0,52,0,0,0,82,54,51,0,85,127,53,0,25,141,127,4,85,141,54,0,1,164,182,15,134,163,0,0,44,22,1,0,50,164,127,0,1,164,2,0,134,163,0,0,120,25,1,0,164,3,0,0,32,55,48,0,120,55,25,0,25,20,0,20,85,20,48,0,25,21,3,28,82,22,21,0,82,23,0,0,82,24,42,0,82,25,47,0,85,139,23,0,25,153,139,4,85,153,24,0,25,154,139,8,85,154,25,0,25,155,139,12,85,155,48,0,25,156,139,16,85,156,124,0,1,164,203,16,134,163,0,0,44,22,1,0,22,164,139,0,135,163,7,0,124,0,0,0,0,4,48,0,119,0,11,1,1,163,0,0,13,58,57,163,120,58,28,0,134,59,0,0,136,20,1,0,57,0,0,0,32,60,59,0,120,60,23,0,1,163,20,0,82,61,163,0,134,62,0,0,28,21,1,0,82,63,62,0,134,64,0,0,108,225,0,0,63,0,0,0,82,65,62,0,85,131,57,0,25,152,131,4,85,152,64,0,25,157,131,8,85,157,65,0,1,164,202,15,134,163,0,0,44,22,1,0,61,164,131,0,1,164,1,0,134,163,0,0,120,25,1,0,164,3,0,0,25,66,3,12,82,68,66,0,32,69,68,0,120,69,215,0,25,70,1,16,82,71,70,0,1,163,0,0,13,72,71,163,120,72,45,0,85,140,160,0,1,163,65,4,134,73,0,0,168,223,0,0,71,163,140,0,34,74,73,0,1,163,20,0,82,75,163,0,121,74,22,0,82,76,70,0,134,77,0,0,28,21,1,0,82,79,77,0,134,80,0,0,108,225,0,0,79,0,0,0,82,81,77,0,85,128,76,0,25,142,128,4,85,142,80,0,25,143,128,8,85,143,81,0,134,163,0,0,44,22,1,0,75,162,128,0,1,164,1,0,134,163,0,0,120,25,1,0,164,3,0,0,119,0,15,0,134,163,0,0,16,210,0,0,75,0,0,0,1,164,2,0,134,163,0,0,104,19,1,0,164,0,0,0,134,163,0,0,100,21,1,0,73,0,0,0,134,163,0,0,104,19,1,0,73,0,0,0,119,0,1,0,1,164,0,0,134,163,0,0,104,19,1,0,164,0,0,0,25,82,1,8,82,83,82,0,1,163,0,0,13,84,83,163,121,84,84,0,25,94,3,24,82,95,94,0,1,164,1,0,1,163,2,0,138,95,164,163,148,154,0,0,8,155,0,0,1,163,2,0,134,164,0,0,100,21,1,0,163,0,0,0,119,0,101,0,1,163,58,16,1,164,0,0,134,96,0,0,168,223,0,0,163,164,132,0,34,97,96,0,120,97,2,0,119,0,93,0,1,164,20,0,82,98,164,0,134,99,0,0,28,21,1,0,82,101,99,0,134,102,0,0,108,225,0,0,101,0,0,0,82,103,99,0,85,133,102,0,25,146,133,4,85,146,103,0,1,163,68,16,134,164,0,0,44,22,1,0,98,163,133,0,1,163,1,0,134,164,0,0,120,25,1,0,163,3,0,0,119,0,72,0,82,104,0,0,25,105,0,20,82,106,105,0,85,134,104,0,25,147,134,4,85,147,106,0,1,163,108,16,134,164,0,0,240,21,1,0,125,163,134,0,134,107,0,0,168,223,0,0,125,161,135,0,34,108,107,0,121,108,24,0,1,164,20,0,82,109,164,0,134,110,0,0,28,21,1,0,82,112,110,0,134,113,0,0,108,225,0,0,112,0,0,0,82,114,110,0,85,136,125,0,25,148,136,4,85,148,113,0,25,149,136,8,85,149,114,0,1,163,131,16,134,164,0,0,44,22,1,0,109,163,136,0,1,163,1,0,134,164,0,0,120,25,1,0,163,3,0,0,119,0,34,0,134,164,0,0,64,20,1,0,125,0,0,0,119,0,30,0,1,164,0,0,134,85,0,0,168,223,0,0,83,164,129,0,34,86,85,0,121,86,24,0,1,164,20,0,82,87,164,0,82,88,82,0,134,90,0,0,28,21,1,0,82,91,90,0,134,92,0,0,108,225,0,0,91,0,0,0,82,93,90,0,85,130,88,0,25,144,130,4,85,144,92,0,25,145,130,8,85,145,93,0,1,163,22,16,134,164,0,0,44,22,1,0,87,163,130,0,1,163,1,0,134,164,0,0,120,25,1,0,163,3,0,0,1,163,1,0,134,164,0,0,104,19,1,0,163,0,0,0,25,115,1,12,82,116,115,0,1,164,0,0,13,117,116,164,121,117,6,0,1,163,2,0,134,164,0,0,100,21,1,0,163,0,0,0,119,0,31,0,85,137,160,0,1,164,65,2,134,118,0,0,168,223,0,0,116,164,137,0,34,119,118,0,121,119,24,0,1,164,20,0,82,120,164,0,82,121,115,0,134,8,0,0,28,21,1,0,82,9,8,0,134,10,0,0,108,225,0,0,9,0,0,0,82,11,8,0,85,138,121,0,25,150,138,4,85,150,10,0,25,151,138,8,85,151,11,0,1,163,166,16,134,164,0,0,44,22,1,0,120,163,138,0,1,163,1,0,134,164,0,0,120,25,1,0,163,3,0,0,25,12,3,4,82,13,12,0,85,13,124,0,25,14,3,8,82,15,14,0,82,16,3,0,85,16,15,0,82,17,14,0,82,19,3,0,134,164,0,0,168,15,1,0,17,19,2,0,1,4,0,0,119,0,5,0,134,7,0,0,160,198,0,0,0,1,3,0,0,4,7,0,137,159,0,0,139,4,0,0,140,2,200,0,0,0,0,0,2,195,0,0,196,27,0,0,2,196,0,0,184,27,0,0,2,197,0,0,237,6,0,0,1,193,0,0,136,198,0,0,0,194,198,0,25,4,0,4,82,5,4,0,38,198,5,248,0,92,198,0,3,103,0,92,82,114,195,0,38,198,5,3,0,125,198,0,18,187,114,0,33,188,125,1,19,198,188,187,0,189,198,0,16,136,0,103,19,198,189,136,0,190,198,0,120,190,2,0,135,198,6,0,25,147,103,4,82,158,147,0,38,198,158,1,0,169,198,0,32,6,169,0,121,6,2,0,135,198,6,0,32,17,125,0,121,17,20,0,1,198,0,1,16,28,1,198,121,28,3,0,1,186,0,0,139,186,0,0,25,39,1,4,16,50,92,39,120,50,10,0,4,61,92,1,1,198,148,29,82,72,198,0,41,198,72,1,0,83,198,0,16,90,83,61,120,90,3,0,0,186,0,0,139,186,0,0,1,186,0,0,139,186,0,0,16,91,92,1,120,91,30,0,4,93,92,1,1,198,15,0,16,94,198,93,120,94,3,0,0,186,0,0,139,186,0,0,3,95,0,1,38,198,5,1,0,96,198,0,20,198,96,1,0,97,198,0,39,198,97,2,0,98,198,0,85,4,98,0,25,99,95,4,39,198,93,3,0,100,198,0,85,99,100,0,3,101,95,93,25,102,101,4,82,104,102,0,39,198,104,1,0,105,198,0,85,102,105,0,134,198,0,0,180,138,0,0,95,93,0,0,0,186,0,0,139,186,0,0,1,198,204,27,82,106,198,0,13,107,103,106,121,107,27,0,1,198,192,27,82,108,198,0,3,109,108,92,16,110,1,109,120,110,3,0,1,186,0,0,139,186,0,0,4,111,109,1,3,112,0,1,38,198,5,1,0,113,198,0,20,198,113,1,0,115,198,0,39,198,115,2,0,116,198,0,85,4,116,0,25,117,112,4,39,198,111,1,0,118,198,0,85,117,118,0,1,198,204,27,85,198,112,0,1,198,192,27,85,198,111,0,0,186,0,0,139,186,0,0,1,198,200,27,82,119,198,0,13,120,103,119,121,120,55,0,1,198,188,27,82,121,198,0,3,122,121,92,16,123,122,1,121,123,3,0,1,186,0,0,139,186,0,0,4,124,122,1,1,198,15,0,16,126,198,124,121,126,23,0,3,127,0,1,3,128,127,124,38,198,5,1,0,129,198,0,20,198,129,1,0,130,198,0,39,198,130,2,0,131,198,0,85,4,131,0,25,132,127,4,39,198,124,1,0,133,198,0,85,132,133,0,85,128,124,0,25,134,128,4,82,135,134,0,38,198,135,254,0,137,198,0,85,134,137,0,0,191,127,0,0,192,124,0,119,0,16,0,38,198,5,1,0,138,198,0,20,198,138,122,0,139,198,0,39,198,139,2,0,140,198,0,85,4,140,0,3,141,0,122,25,142,141,4,82,143,142,0,39,198,143,1,0,144,198,0,85,142,144,0,1,191,0,0,1,192,0,0,1,198,188,27,85,198,192,0,1,198,200,27,85,198,191,0,0,186,0,0,139,186,0,0,38,198,158,2,0,145,198,0,32,146,145,0,120,146,3,0,1,186,0,0,139,186,0,0,38,198,158,248,0,148,198,0], eb + 30720);
  HEAPU8.set([3,149,148,92,16,150,149,1,121,150,3,0,1,186,0,0,139,186,0,0,4,151,149,1,43,198,158,3,0,152,198,0,1,198,0,1,16,153,158,198,121,153,53,0,25,154,103,8,82,155,154,0,25,156,103,12,82,157,156,0,41,198,152,1,0,159,198,0,1,198,220,27,41,199,159,2,3,160,198,199,13,161,155,160,120,161,9,0,16,162,155,114,121,162,2,0,135,199,6,0,25,163,155,12,82,164,163,0,13,165,164,103,120,165,2,0,135,199,6,0,13,166,157,155,121,166,13,0,1,199,1,0,22,199,199,152,0,167,199,0,40,199,167,255,0,168,199,0,1,199,180,27,82,170,199,0,19,199,170,168,0,171,199,0,1,199,180,27,85,199,171,0,119,0,164,0,13,172,157,160,121,172,4,0,25,2,157,8,0,3,2,0,119,0,11,0,16,173,157,114,121,173,2,0,135,199,6,0,25,174,157,8,82,175,174,0,13,176,175,103,121,176,3,0,0,3,174,0,119,0,2,0,135,199,6,0,25,177,155,12,85,177,157,0,85,3,155,0,119,0,145,0,25,178,103,24,82,179,178,0,25,7,103,12,82,8,7,0,13,9,8,103,121,9,45,0,25,20,103,16,25,21,20,4,82,22,21,0,1,199,0,0,13,23,22,199,121,23,10,0,82,24,20,0,1,199,0,0,13,25,24,199,121,25,3,0,1,182,0,0,119,0,52,0,0,180,24,0,0,183,20,0,119,0,3,0,0,180,22,0,0,183,21,0,25,26,180,20,82,27,26,0,1,199,0,0,13,29,27,199,120,29,4,0,0,180,27,0,0,183,26,0,119,0,249,255,25,30,180,16,82,31,30,0,1,199,0,0,13,32,31,199,121,32,4,0,0,181,180,0,0,184,183,0,119,0,4,0,0,180,31,0,0,183,30,0,119,0,238,255,16,33,184,114,121,33,3,0,135,199,6,0,119,0,24,0,1,199,0,0,85,184,199,0,0,182,181,0,119,0,20,0,25,10,103,8,82,11,10,0,16,12,11,114,121,12,2,0,135,199,6,0,25,13,11,12,82,14,13,0,13,15,14,103,120,15,2,0,135,199,6,0,25,16,8,8,82,18,16,0,13,19,18,103,121,19,5,0,85,13,8,0,85,16,11,0,0,182,8,0,119,0,2,0,135,199,6,0,1,199,0,0,13,34,179,199,120,34,73,0,25,35,103,28,82,36,35,0,1,199,228,28,41,198,36,2,3,37,199,198,82,38,37,0,13,40,103,38,121,40,15,0,85,37,182,0,1,198,0,0,13,185,182,198,121,185,26,0,1,198,1,0,22,198,198,36,0,41,198,0,40,198,41,255,0,42,198,0,82,43,196,0,19,198,43,42,0,44,198,0,85,196,44,0,119,0,51,0,82,45,195,0,16,46,179,45,121,46,2,0,135,198,6,0,25,47,179,16,82,48,47,0,13,49,48,103,121,49,3,0,85,47,182,0,119,0,3,0,25,51,179,20,85,51,182,0,1,198,0,0,13,52,182,198,120,52,36,0,82,53,195,0,16,54,182,53,121,54,2,0,135,198,6,0,25,55,182,24,85,55,179,0,25,56,103,16,82,57,56,0,1,198,0,0,13,58,57,198,120,58,10,0,16,59,57,53,121,59,3,0,135,198,6,0,119,0,6,0,25,60,182,16,85,60,57,0,25,62,57,24,85,62,182,0,119,0,1,0,25,63,56,4,82,64,63,0,1,198,0,0,13,65,64,198,120,65,11,0,82,66,195,0,16,67,64,66,121,67,3,0,135,198,6,0,119,0,6,0,25,68,182,20,85,68,64,0,25,69,64,24,85,69,182,0,119,0,1,0,35,70,151,16,121,70,17,0,38,198,5,1,0,71,198,0,20,198,149,71,0,73,198,0,39,198,73,2,0,74,198,0,85,4,74,0,3,75,0,149,25,76,75,4,82,77,76,0,39,198,77,1,0,78,198,0,85,76,78,0,0,186,0,0,139,186,0,0,119,0,24,0,3,79,0,1,38,198,5,1,0,80,198,0,20,198,80,1,0,81,198,0,39,198,81,2,0,82,198,0,85,4,82,0,25,84,79,4,39,198,151,3,0,85,198,0,85,84,85,0,3,86,79,151,25,87,86,4,82,88,87,0,39,198,88,1,0,89,198,0,85,87,89,0,134,198,0,0,180,138,0,0,79,151,0,0,0,186,0,0,139,186,0,0,1,198,0,0,139,198,0,0,140,3,195,0,0,0,0,0,2,191,0,0,255,255,0,0,2,192,0,0,255,0,0,0,1,189,0,0,136,193,0,0,0,190,193,0,1,193,20,0,16,5,193,1,120,5,38,1,1,193,9,0,1,194,10,0,138,1,193,194,80,164,0,0,164,164,0,0,28,165,0,0,136,165,0,0,4,166,0,0,144,166,0,0,4,167,0,0,144,167,0,0,4,168,0,0,88,168,0,0,119,0,24,1,82,119,2,0,0,6,119,0,1,193,0,0,25,31,193,4,0,140,31,0,26,139,140,1,3,42,6,139,1,193,0,0,25,53,193,4,0,143,53,0,26,142,143,1,40,193,142,255,0,141,193,0,19,193,42,141,0,64,193,0,0,75,64,0,82,86,75,0,25,129,75,4,85,2,129,0,85,0,86,0,119,0,3,1,82,123,2,0,0,97,123,0,1,193,0,0,25,108,193,4,0,145,108,0,26,144,145,1,3,7,97,144,1,193,0,0,25,18,193,4,0,148,18,0,26,147,148,1,40,193,147,255,0,146,193,0,19,193,7,146,0,23,193,0,0,24,23,0,82,25,24,0,25,136,24,4,85,2,136,0,34,26,25,0,41,193,26,31,42,193,193,31,0,27,193,0,0,28,0,0,0,29,28,0,85,29,25,0,25,30,28,4,0,32,30,0,85,32,27,0,119,0,229,0,82,127,2,0,0,33,127,0,1,193,0,0,25,34,193,4,0,150,34,0,26,149,150,1,3,35,33,149,1,193,0,0,25,36,193,4,0,153,36,0,26,152,153,1,40,193,152,255,0,151,193,0,19,193,35,151,0,37,193,0,0,38,37,0,82,39,38,0,25,137,38,4,85,2,137,0,0,40,0,0,0,41,40,0,85,41,39,0,25,43,40,4,0,44,43,0,1,193,0,0,85,44,193,0,119,0,202,0,82,128,2,0,0,45,128,0,1,193,0,0,25,46,193,8,0,155,46,0,26,154,155,1,3,47,45,154,1,193,0,0,25,48,193,8,0,158,48,0,26,157,158,1,40,193,157,255,0,156,193,0,19,193,47,156,0,49,193,0,0,50,49,0,0,51,50,0,0,52,51,0,82,54,52,0,25,55,51,4,0,56,55,0,82,57,56,0,25,138,50,8,85,2,138,0,0,58,0,0,0,59,58,0,85,59,54,0,25,60,58,4,0,61,60,0,85,61,57,0,119,0,171,0,82,120,2,0,0,62,120,0,1,193,0,0,25,63,193,4,0,160,63,0,26,159,160,1,3,65,62,159,1,193,0,0,25,66,193,4,0,163,66,0,26,162,163,1,40,193,162,255,0,161,193,0,19,193,65,161,0,67,193,0,0,68,67,0,82,69,68,0,25,130,68,4,85,2,130,0,19,193,69,191,0,70,193,0,41,193,70,16,42,193,193,16,0,71,193,0,34,72,71,0,41,193,72,31,42,193,193,31,0,73,193,0,0,74,0,0,0,76,74,0,85,76,71,0,25,77,74,4,0,78,77,0,85,78,73,0,119,0,136,0,82,121,2,0,0,79,121,0,1,193,0,0,25,80,193,4,0,165,80,0,26,164,165,1,3,81,79,164,1,193,0,0,25,82,193,4,0,168,82,0,26,167,168,1,40,193,167,255,0,166,193,0,19,193,81,166,0,83,193,0,0,84,83,0,82,85,84,0,25,131,84,4,85,2,131,0,19,193,85,191,0,4,193,0,0,87,0,0,0,88,87,0,85,88,4,0,25,89,87,4,0,90,89,0,1,193,0,0,85,90,193,0,119,0,107,0,82,122,2,0,0,91,122,0,1,193,0,0,25,92,193,4,0,170,92,0,26,169,170,1,3,93,91,169,1,193,0,0,25,94,193,4,0,173,94,0,26,172,173,1,40,193,172,255,0,171,193,0,19,193,93,171,0,95,193,0,0,96,95,0,82,98,96,0,25,132,96,4,85,2,132,0,19,193,98,192,0,99,193,0,41,193,99,24,42,193,193,24,0,100,193,0,34,101,100,0,41,193,101,31,42,193,193,31,0,102,193,0,0,103,0,0,0,104,103,0,85,104,100,0,25,105,103,4,0,106,105,0,85,106,102,0,119,0,72,0,82,124,2,0,0,107,124,0,1,193,0,0,25,109,193,4,0,175,109,0,26,174,175,1,3,110,107,174,1,193,0,0,25,111,193,4,0,178,111,0,26,177,178,1,40,193,177,255,0,176,193,0,19,193,110,176,0,112,193,0,0,113,112,0,82,114,113,0,25,133,113,4,85,2,133,0,19,193,114,192,0,3,193,0,0,115,0,0,0,116,115,0,85,116,3,0,25,117,115,4,0,118,117,0,1,193,0,0,85,118,193,0,119,0,43,0,82,125,2,0,0,8,125,0,1,193,0,0,25,9,193,8,0,180,9,0,26,179,180,1,3,10,8,179,1,193,0,0,25,11,193,8,0,183,11,0,26,182,183,1,40,193,182,255,0,181,193,0,19,193,10,181,0,12,193,0,0,13,12,0,86,14,13,0,25,134,13,8,85,2,134,0,87,0,14,0,119,0,22,0,82,126,2,0,0,15,126,0,1,193,0,0,25,16,193,8,0,185,16,0,26,184,185,1,3,17,15,184,1,193,0,0,25,19,193,8,0,188,19,0,26,187,188,1,40,193,187,255,0,186,193,0,19,193,17,186,0,20,193,0,0,21,20,0,86,22,21,0,25,135,21,8,85,2,135,0,87,0,22,0,119,0,1,0,139,0,0,0,140,3,149,0,0,0,0,0,2,145,0,0,20,15,0,0,1,143,0,0,136,146,0,0,0,144,146,0,136,146,0,0,25,146,146,48,137,146,0,0,25,134,144,32,25,133,144,16,0,132,144,0,1,146,0,0,13,14,0,146,121,14,3,0,1,3,0,0,119,0,49,1,1,146,0,0,13,15,1,146,121,15,3,0,0,3,0,0,119,0,44,1,135,26,4,0,2,0,0,0,135,37,4,0,1,0,0,0,135,48,4,0,0,0,0,0,25,59,26,1,135,70,3,0,59,0,0,0,1,146,0,0,13,81,70,146,121,81,22,0,134,92,0,0,28,21,1,0,82,103,92,0,134,16,0,0,108,225,0,0,103,0,0,0,82,17,92,0,85,132,26,0,25,135,132,4,85,135,16,0,25,139,132,8,85,139,17,0,1,147,245,14,134,146,0,0,172,21,1,0,147,132,0,0,1,147,1,0,1,148,0,0,134,146,0,0,120,25,1,0,147,148,0,0,134,18,0,0,220,194,0,0,0,1,0,0,1,146,0,0,13,19,18,146,120,19,1,1,1,146,0,0,15,20,146,26,0,112,0,0,1,113,0,0,0,126,70,0,0,131,18,0,13,21,131,112,121,21,38,0,1,148,0,0,135,146,1,0,126,148,59,0,78,22,2,0,41,146,22,24,42,146,146,24,33,23,146,0,19,146,20,23,0,122,146,0,121,122,25,0,0,4,2,0,0,8,126,0,0,27,22,0,1,108,0,0,25,24,4,1,25,25,8,1,83,8,27,0,25,28,108,1,78,29,24,0,41,146,29,24,42,146,146,24,33,30,146,0,15,31,28,26,19,146,31,30,0,118,146,0,121,118,6,0,0,4,24,0,0,8,25,0,0,27,29,0,0,108,28,0,119,0,240,255,0,114,28,0,0,128,126,0,119,0,89,0,1,114,0,0,0,128,126,0,119,0,86,0,0,32,131,0,0,33,112,0,4,34,32,33,3,35,59,113,3,36,35,34,134,38,0,0,160,222,0,0,126,36,0,0,1,146,0,0,13,39,38,146,121,39,5,0,0,12,36,0,0,127,126,0,1,143,11,0,119,0,87,0,78,44,112,0,41,146,44,24,42,146,146,24,33,45,146,0,1,146,0,0,15,46,146,34,19,146,46,45,0,123,146,0,121,123,25,0,3,47,38,113,0,5,112,0,0,9,47,0,0,51,44,0,1,109,0,0,25,49,5,1,25,50,9,1,83,9,51,0,25,52,109,1,78,53,49,0,41,146,53,24,42,146,146,24,33,54,146,0,15,55,52,34,19,146,55,54,0,119,146,0,121,119,6,0,0,5,49,0,0,9,50,0,0,51,53,0,0,109,52,0,119,0,240,255,0,105,52,0,119,0,2,0,1,105,0,0,3,56,105,113,78,57,2,0,41,146,57,24,42,146,146,24,33,58,146,0,19,146,20,58,0,124,146,0,121,124,25,0,3,60,38,56,0,6,2,0,0,10,60,0,0,63,57,0,1,110,0,0,25,61,6,1,25,62,10,1,83,10,63,0,25,64,110,1,78,65,61,0,41,146,65,24,42,146,146,24,33,66,146,0,15,67,64,26,19,146,67,66,0,120,146,0,121,120,6,0,0,6,61,0,0,10,62,0,0,63,65,0,0,110,64,0,119,0,240,255,0,106,64,0,119,0,2,0,1,106,0,0,3,68,106,56,0,114,68,0,0,128,38,0,3,69,131,37,134,71,0,0,220,194,0,0,69,1,0,0,1,146,0,0,13,72,71,146,121,72,5,0,0,13,69,0,0,115,114,0,0,129,128,0,119,0,6,0,0,112,69,0,0,113,114,0,0,126,128,0,0,131,71,0,119,0,117,255,32,146,143,11,121,146,23,0,134,40,0,0,28,21,1,0,82,41,40,0,134,42,0,0,108,225,0,0,41,0,0,0,82,43,40,0,85,133,12,0,25,140,133,4,85,140,127,0,25,141,133,8,85,141,42,0,25,142,133,12,85,142,43,0,134,146,0,0,172,21,1,0,145,133,0,0,1,148,1,0,1,147,0,0,134,146,0,0,120,25,1,0,148,147,0,0,14,73,13,0,3,74,0,48,16,75,13,74,19,146,73,75,0,117,146,0,121,117,73,0,0,76,13,0,0,77,0,0,4,78,77,76,3,79,78,48,25,80,115,1,3,82,80,79,134,83,0,0,160,222,0,0,129,82,0,0,1,146,0,0,13,84,83,146,121,84,23,0,134,85,0,0,28,21,1,0,82,86,85,0,134,87,0,0,108,225,0,0,86,0,0,0,82,88,85,0,85,134,82,0,25,136,134,4,85,136,129,0,25,137,134,8,85,137,87,0,25,138,134,12,85,138,88,0,134,146,0,0,172,21,1,0,145,134,0,0,1,147,1,0,1,148,0,0,134,146,0,0,120,25,1,0,147,148,0,0,78,89,13,0,41,146,89,24,42,146,146,24,33,90,146,0,1,146,0,0,15,91,146,79,19,146,91,90,0,125,146,0,121,125,25,0,3,93,83,115,0,7,13,0,0,11,93,0,0,96,89,0,1,111,0,0,25,94,7,1,25,95,11,1,83,11,96,0,25,97,111,1,78,98,94,0,41,146,98,24,42,146,146,24,33,99,146,0,15,100,97,79,19,146,100,99,0,121,146,0,121,121,6,0,0,7,94,0,0,11,95,0,0,96,98,0,0,111,97,0,119,0,240,255,0,107,97,0,119,0,2,0,1,107,0,0,3,101,107,115,0,116,101,0,0,130,83,0,119,0,3,0,0,116,115,0,0,130,129,0,120,19,6,0,3,104,130,116,1,146,0,0,83,104,146,0,0,3,130,0,119,0,5,0,134,102,0,0,208,20,1,0,0,0,0,0,0,3,102,0,137,144,0,0,139,3,0,0,140,5,75,0,0,0,0,0,0,5,0,0,0,6,1,0,0,7,6,0,0,8,2,0,0,9,3,0,0,10,9,0,32,69,7,0,121,69,27,0,33,11,4,0,32,69,10,0,121,69,11,0,121,11,5,0,9,69,5,8,85,4,69,0,1,70,0,0,109,4,4,70,1,68,0,0,7,67,5,8,129,68,0,0,139,67,0,0,119,0,14,0,120,11,5,0,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,38,70,0,255,85,4,70,0,38,69,1,0,109,4,4,69,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,32,12,10,0,32,69,8,0,121,69,83,0,121,12,11,0,33,69,4,0,121,69,5,0,9,69,7,8,85,4,69,0,1,70,0,0,109,4,4,70,1,68,0,0,7,67,7,8,129,68,0,0,139,67,0,0,32,70,5,0,121,70,11,0,33,70,4,0,121,70,5,0,1,70,0,0,85,4,70,0,9,69,7,10,109,4,4,69,1,68,0,0,7,67,7,10,129,68,0,0,139,67,0,0,26,13,10,1,19,69,13,10,32,69,69,0,121,69,18,0,33,69,4,0,121,69,8,0,38,69,0,255,39,69,69,0,85,4,69,0,19,70,13,7,38,71,1,0,20,70,70,71,109,4,4,70,1,68,0,0,134,70,0,0,192,19,1,0,10,0,0,0,24,70,7,70,0,67,70,0,129,68,0,0,139,67,0,0,135,14,9,0,10,0,0,0,135,70,9,0,7,0,0,0,4,15,14,70,37,70,15,30,121,70,15,0,25,16,15,1,1,70,31,0,4,17,70,15,0,36,16,0,22,70,7,17,24,69,5,16,20,70,70,69,0,35,70,0,24,70,7,16,0,34,70,0,1,33,0,0,22,70,5,17,0,32,70,0,119,0,139,0,32,70,4,0,121,70,5,0,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,38,70,0,255,39,70,70,0,85,4,70,0,38,69,1,0,20,69,6,69,109,4,4,69,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,119,0,122,0,120,12,43,0,135,27,9,0,10,0,0,0,135,69,9,0,7,0,0,0,4,28,27,69,37,69,28,31,121,69,20,0,25,29,28,1,1,69,31,0,4,30,69,28,26,69,28,31,42,69,69,31,0,31,69,0,0,36,29,0,24,69,5,29,19,69,69,31,22,70,7,30,20,69,69,70,0,35,69,0,24,69,7,29,19,69,69,31,0,34,69,0,1,33,0,0,22,69,5,30,0,32,69,0,119,0,95,0,32,69,4,0,121,69,5,0,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,38,69,0,255,39,69,69,0,85,4,69,0,38,70,1,0,20,70,6,70,109,4,4,70,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,26,18,8,1,19,70,18,8,33,70,70,0,121,70,44,0,135,70,9,0,8,0,0,0,25,20,70,33,135,70,9,0,7,0,0,0,4,21,20,70,1,70,64,0,4,22,70,21,1,70,32,0,4,23,70,21,42,70,23,31,0,24,70,0,26,25,21,32,42,70,25,31,0,26,70,0,0,36,21,0,26,70,23,1,42,70,70,31,24,69,7,25,19,70,70,69,22,69,7,23,24,71,5,21,20,69,69,71,19,69,69,26,20,70,70,69,0,35,70,0,24,70,7,21,19,70,26,70,0,34,70,0,22,70,5,22,19,70,70,24,0,33,70,0,22,70,7,22,24,69,5,25,20,70,70,69,19,70,70,24,22,69,5,23,26,71,21,33,42,71,71,31,19,69,69,71,20,70,70,69,0,32,70,0,119,0,32,0,33,70,4,0,121,70,5,0,19,70,18,5,85,4,70,0,1,69,0,0,109,4,4,69,32,69,8,1,121,69,10,0,38,69,1,0,20,69,6,69,0,68,69,0,38,69,0,255,39,69,69,0,0,67,69,0,129,68,0,0,139,67,0,0,119,0,15,0,134,19,0,0,192,19,1,0,8,0,0,0,24,69,7,19,39,69,69,0,0,68,69,0,1,69,32,0,4,69,69,19,22,69,7,69,24,70,5,19,20,69,69,70,0,67,69,0,129,68,0,0,139,67,0,0,32,69,36,0,121,69,8,0,0,63,32,0,0,62,33,0,0,61,34,0,0,60,35,0,1,59,0,0,1,58,0,0,119,0,89,0,38,69,2,255,39,69,69,0,0,37,69,0,38,69,3,0,20,69,9,69,0,38,69,0,1,69,255,255,1,70,255,255,134,39,0,0,0,25,1,0,37,38,69,70,128,70,0,0,0,40,70,0,0,46,32,0,0,45,33,0,0,44,34,0,0,43,35,0,0,42,36,0,1,41,0,0,43,70,45,31,41,69,46,1,20,70,70,69,0,47,70,0,41,70,45,1,20,70,41,70,0,48,70,0,41,70,43,1,43,69,46,31,20,70,70,69,39,70,70,0,0,49,70,0,43,70,43,31,41,69,44,1,20,70,70,69,0,50,70,0,134,70,0,0,144,23,1,0,39,40,49,50,128,70,0,0,0,51,70,0,42,70,51,31,34,71,51,0,1,72,255,255,1,73,0,0,125,69,71,72,73,0,0,0,41,69,69,1,20,70,70,69,0,52,70,0,38,70,52,1,0,53,70,0,19,70,52,37,34,73,51,0,1,72,255,255,1,71,0,0,125,69,73,72,71,0,0,0,42,69,69,31,34,72,51,0,1,73,255,255,1,74,0,0,125,71,72,73,74,0,0,0,41,71,71,1,20,69,69,71,19,69,69,38,134,54,0,0,144,23,1,0,49,50,70,69,0,55,54,0,128,69,0,0,0,56,69,0,26,57,42,1,32,69,57,0,120,69,8,0,0,46,47,0,0,45,48,0,0,44,56,0,0,43,55,0,0,42,57,0,0,41,53,0,119,0,194,255,0,63,47,0,0,62,48,0,0,61,56,0,0,60,55,0,1,59,0,0,0,58,53,0,0,64,62,0,1,65,0,0,20,69,63,65,0,66,69,0,33,69,4,0,121,69,4,0,39,69,60,0,85,4,69,0,109,4,4,61,39,69,64,0,43,69,69,31,41,70,66,1,20,69,69,70,41,70,65,1,43,71,64,31,20,70,70,71,38,70,70,0,20,69,69,70,20,69,69,59,0,68,69,0,41,69,64,1,1,70,0,0,43,70,70,31,20,69,69,70,38,69,69,254,20,69,69,58,0,67,69,0,129,68,0,0,139,67,0,0,140,3,77,0,0,0,0,0,2,74,0,0,146,0,0,0,1,72,0,0,136,75,0,0,0,73,75,0,136,75,0,0,25,75,75,48,137,75,0,0,25,67,73,16,0,66,73,0,25,64,73,32,25,6,0,28,82,7,6,0,85,64,7,0,25,18,64,4,25,29,0,20,82,40,29,0,4,51,40,7,85,18,51,0,25,52,64,8,85,52,1,0,25,53,64,12,85,53,2,0,3,54,51,2,25,55,0,60,25,8,0,44,0,58,64,0,1,61,2,0,0,65,54,0,1,75,132,27,82,9,75,0,1,75,0,0,13,10,9,75,121,10,14,0,82,14,55,0,85,67,14,0,25,70,67,4,85,70,58,0,25,71,67,8,85,71,61,0,135,15,10,0,74,67,0,0,134,16,0,0,184,22,1,0,15,0,0,0,0,56,16,0,119,0,19,0,1,76,1,0,135,75,11,0,76,0,0,0,82,11,55,0,85,66,11,0,25,68,66,4,85,68,58,0,25,69,66,8,85,69,61,0,135,12,10,0,74,66,0,0,134,13,0,0,184,22,1,0,12,0,0,0,1,76,0,0,135,75,12,0,76,0,0,0,0,56,13,0,13,17,65,56,121,17,3,0,1,72,6,0,119,0,49,0,34,25,56,0,121,25,5,0,0,59,58,0,0,62,61,0,1,72,8,0,119,0,43,0,4,34,65,56,25,35,58,4,82,36,35,0,16,37,36,56,121,37,14,0,82,38,8,0,85,6,38,0,85,29,38,0,4,39,56,36,25,41,58,8,26,42,61,1,25,4,58,12,82,5,4,0,0,50,5,0,0,57,39,0,0,60,41,0,0,63,42,0,119,0,15,0,32,43,61,2,121,43,9,0,82,44,6,0,3,45,44,56,85,6,45,0,0,50,36,0,0,57,56,0,0,60,58,0,1,63,2,0,119,0,5,0,0,50,36,0,0,57,56,0,0,60,58,0,0,63,61,0,82,46,60,0,3,47,46,57,85,60,47,0,25,48,60,4,4,49,50,57,85,48,49,0,0,58,60,0,0,61,63,0,0,65,34,0,119,0,169,255,32,75,72,6,121,75,12,0,82,19,8,0,25,20,0,48,82,21,20,0,3,22,19,21,25,23,0,16,85,23,22,0,0,24,19,0,85,6,24,0,85,29,24,0,0,3,2,0,119,0,22,0,32,75,72,8,121,75,20,0,25,26,0,16,1,75,0,0,85,26,75,0,1,75,0,0,85,6,75,0,1,75,0,0,85,29,75,0,82,27,0,0,39,75,27,32,0,28,75,0,85,0,28,0,32,30,62,2,121,30,3,0,1,3,0,0,119,0,5,0,25,31,59,4,82,32,31,0,4,33,2,32,0,3,33,0,137,73,0,0,139,3,0,0,140,2,66,0,0,0,0,0,1,61,0,0,136,64,0,0,0,62,64,0,136,64,0,0,25,64,64,112,137,64,0,0,25,50,62,40,25,52,62,24,25,51,62,16,0,49,62,0,25,48,62,52,78,6,1,0,41,64,6,24,42,64,64,24,0,7,64,0,1,64,116,27,1,65,4,0,134,47,0,0,180,187,0,0,64,7,65,0,1,65,0,0,13,18,47,65,121,18,7,0,134,29,0,0,28,21,1,0,1,65,22,0,85,29,65,0,1,2,0,0,119,0,154,0,1,65,20,32,135,40,3,0,65,0,0,0,1,65,0,0,13,42,40,65,121,42,3,0,1,2,0,0,119,0,146,0,0,60,40,0,25,63,60,112,1,65,0,0,85,60,65,0,25,60,60,4,54,65,60,63,144,182,0,0,1,65,43,0,134,43,0,0,252,22,1,0,1,65,0,0,1,65,0,0,13,44,43,65,121,44,9,0,41,65,6,24,42,65,65,24,32,45,65,114,1,65,8,0,1,64,4,0,125,46,45,65,64,0,0,0,85,40,46,0,1,64,101,0,134,8,0,0,252,22,1,0,1,64,0,0,1,64,0,0,13,9,8,64,121,9,3,0,0,10,6,0,119,0,13,0,85,49,0,0,25,53,49,4,1,64,2,0,85,53,64,0,25,58,49,8,1,64,1,0,85,58,64,0,1,65,221,0,135,64,13,0,65,49,0,0,78,4,1,0,0,10,4,0,41,64,10,24,42,64,64,24,32,11,64,97,121,11,32,0,85,51,0,0,25,59,51,4,1,64,3,0,85,59,64,0,1,64,221,0,135,12,13,0,64,51,0,0,1,64,0,4,19,64,12,64,0,13,64,0,32,14,13,0,121,14,13,0,1,64,0,4,20,64,12,64,0,15,64,0,85,52,0,0,25,54,52,4,1,64,4,0,85,54,64,0,25,55,52,8,85,55,15,0,1,65,221,0,135,64,13,0,65,52,0,0,82,16,40,0,1,64,128,0,20,64,16,64,0,17,64,0,85,40,17,0,0,25,17,0,119,0,3,0,82,5,40,0,0,25,5,0,25,19,40,60,85,19,0,0,25,20,40,120,25,21,40,44,85,21,20,0,25,22,40,48,1,64,156,31,85,22,64,0,25,23,40,75,1,64,255,255,83,23,64,0,38,64,25,8,0,24,64,0,32,26,24,0,121,26,14,0,85,50,0,0,25,56,50,4,1,64,1,84,85,56,64,0,25,57,50,8,85,57,48,0,1,64,54,0,135,27,14,0,64,50,0,0,32,28,27,0,121,28,3,0,1,64,10,0,83,23,64,0,25,30,40,32,1,64,5,0,85,30,64,0,25,31,40,36,1,64,1,0,85,31,64,0,25,32,40,40,1,64,2,0,85,32,64,0,25,33,40,12,1,64,1,0,85,33,64,0,1,64,136,27,82,34,64,0,32,35,34,0,121,35,4,0,25,36,40,76,1,64,255,255,85,36,64,0,1,65,160,27,135,64,15,0,65,0,0,0,1,64,156,27,82,37,64,0,25,38,40,56,85,38,37,0,32,39,37,0,120,39,4,0,0,3,37,0,25,41,3,52,85,41,40,0,1,64,156,27,85,64,40,0,1,65,160,27,135,64,16,0,65,0,0,0,0,2,40,0,137,62,0,0,139,2,0,0,140,3,66,0,0,0,0,0,2,62,0,0,224,6,0,0,2,63,0,0,211,17,0,0,1,60,0,0,136,64,0,0,0,61,64,0,136,64,0,0,25,64,64,16,137,64,0,0,25,57,61,8,0,56,61,0,1,64,16,0,82,4,64,0,32,5,4,1,1,64,12,0,82,16,64,0,121,5,26,0,15,27,16,0,121,27,22,0,41,64,16,2,3,38,1,64,82,49,38,0,78,52,49,0,41,64,52,24,42,64,64,24,32,53,64,45,121,53,12,0,25,54,49,1,78,55,54,0,41,64,55,24,42,64,64,24,32,6,64,0,121,6,3,0,1,3,255,255,119,0,24,0,0,13,49,0,1,60,7,0,119,0,21,0,1,3,255,255,119,0,19,0,1,3,255,255,119,0,17,0,41,64,16,2,3,7,1,64,82,8,7,0,1,64,182,17,134,9,0,0,128,10,1,0,8,64,0,0,32,10,9,0,121,10,6,0,25,11,16,1,1,64,12,0,85,64,11,0,1,3,255,255,119,0,3,0,0,13,8,0,1,60,7,0,32,64,60,7,121,64,120,0,3,12,13,4,78,14,12,0,41,64,14,24,42,64,64,24,0,15,64,0,1,64,124,27,85,64,15,0,41,64,14,24,42,64,64,24,32,17,64,58,120,17,74,0,134,18,0,0,252,22,1,0,2,15,0,0,1,64,0,0,13,19,18,64,120,19,68,0,25,32,18,1,78,33,32,0,41,64,33,24,42,64,64,24,32,34,64,58,25,35,4,1,120,34,20,0,1,64,16,0,85,64,35,0,3,47,13,35,78,48,47,0,41,64,48,24,42,64,64,24,32,50,64,0,121,50,7,0,1,64,16,0,1,65,1,0,85,64,65,0,25,51,16,1,1,65,12,0,85,65,51,0,1,65,128,27,1,64,0,0,85,65,64,0,0,3,15,0,119,0,77,0,3,36,13,35,78,37,36,0,41,64,37,24,42,64,64,24,32,39,64,0,25,40,16,1,1,64,12,0,85,64,40,0,121,39,26,0,15,41,40,0,121,41,10,0,25,44,16,2,1,64,12,0,85,64,44,0,41,64,40,2,3,45,1,64,82,46,45,0,1,64,128,27,85,64,46,0,119,0,17,0,1,64,20,0,82,42,64,0,82,43,1,0,85,57,43,0,25,59,57,4,85,59,15,0,134,64,0,0,44,22,1,0,42,63,57,0,1,64,16,0,1,65,1,0,85,64,65,0,1,3,63,0,119,0,43,0,1,65,128,27,85,65,36,0,1,65,16,0,1,64,1,0,85,65,64,0,0,3,15,0,119,0,36,0,1,64,20,0,82,20,64,0,82,21,1,0,85,56,21,0,25,58,56,4,85,58,15,0,1,65,185,17,134,64,0,0,44,22,1,0,20,65,56,0,1,64,16,0,82,22,64,0,25,23,22,1,1,64,16,0,85,64,23,0,1,64,12,0,82,24,64,0,41,64,24,2,3,25,1,64,82,26,25,0,3,28,26,23,78,29,28,0,41,64,29,24,42,64,64,24,32,30,64,0,121,30,9,0,25,31,24,1,1,64,12,0,85,64,31,0,1,64,16,0,1,65,1,0,85,64,65,0,1,3,63,0,119,0,2,0,1,3,63,0,137,61,0,0,139,3,0,0,140,3,66,0,0,0,0,0,2,61,0,0,128,128,128,128,2,62,0,0,255,254,254,254,2,63,0,0,255,0,0,0,1,59,0,0,136,64,0,0,0,60,64,0,19,64,1,63,0,12,64,0,0,13,0,0,38,64,13,3,0,24,64,0,33,35,24,0,33,43,2,0,19,64,43,35,0,50,64,0,121,50,34,0,19,64,1,63,0,44,64,0,0,5,2,0,0,53,0,0,78,45,53,0,41,64,45,24,42,64,64,24,41,65,44,24,42,65,65,24,13,46,64,65,121,46,5,0,0,4,5,0,0,52,53,0,1,59,6,0,119,0,23,0,25,47,53,1,26,48,5,1,0,14,47,0,38,65,14,3,0,15,65,0,33,16,15,0,33,17,48,0,19,65,17,16,0,49,65,0,121,49,4,0,0,5,48,0,0,53,47,0,119,0,233,255,0,3,48,0,0,11,17,0,0,51,47,0,1,59,5,0,119,0,5,0,0,3,2,0,0,11,43,0,0,51,0,0,1,59,5,0,32,65,59,5,121,65,8,0,121,11,5,0,0,4,3,0,0,52,51,0,1,59,6,0,119,0,3,0,1,10,0,0,0,55,51,0,32,65,59,6,121,65,85,0,78,18,52,0,19,65,1,63,0,19,65,0,41,65,18,24,42,65,65,24,41,64,19,24,42,64,64,24,13,20,65,64,121,20,4,0,0,10,4,0,0,55,52,0,119,0,73,0,2,64,0,0,1,1,1,1,5,21,12,64,1,64,3,0,16,22,64,4,121,22,35,0,0,7,4,0,0,57,52,0,82,23,57,0,21,64,23,21,0,25,64,0,2,64,0,0,1,1,1,1,4,26,25,64,19,64,25,61,0,27,64,0,21,64,27,61,0,28,64,0,19,64,28,26,0,29,64,0,32,30,29,0,120,30,4,0,0,8,7,0,0,58,57,0,119,0,13,0,25,31,57,4,26,32,7,4,1,64,3,0,16,33,64,32,121,33,4,0,0,7,32,0,0,57,31,0,119,0,232,255,0,6,32,0,0,56,31,0,1,59,11,0,119,0,7,0,0,9,8,0,0,54,58,0,119,0,4,0,0,6,4,0,0,56,52,0,1,59,11,0,32,64,59,11,121,64,8,0,32,34,6,0,121,34,4,0,1,10,0,0,0,55,56,0,119,0,23,0,0,9,6,0,0,54,56,0,78,36,54,0,41,64,36,24,42,64,64,24,41,65,19,24,42,65,65,24,13,37,64,65,121,37,4,0,0,10,9,0,0,55,54,0,119,0,11,0,25,38,54,1,26,39,9,1,32,40,39,0,121,40,4,0,1,10,0,0,0,55,38,0,119,0,4,0,0,9,39,0,0,54,38,0,119,0,237,255,33,41,10,0,1,65,0,0,125,42,41,55,65,0,0,0,139,42,0,0,140,3,69,0,0,0,0,0,2,67,0,0,255,0,0,0,1,65,0,0,136,68,0,0,0,66,68,0,25,8,2,76,82,9,8,0,1,68,255,255,15,20,68,9,121,20,6,0,134,31,0,0,0,26,1,0,2,0,0,0,0,12,31,0,119,0,2,0,1,12,0,0,26,42,1,1,34,53,1,2,121,53,25,0,25,56,2,74,78,57,56,0,41,68,57,24,42,68,68,24,0,58,68,0,3,59,58,67,20,68,59,58,0,10,68,0,19,68,10,67,0,11,68,0,83,56,11,0,32,13,12,0,120,13,4,0,134,68,0,0,232,25,1,0,2,0,0,0,32,14,42,0,121,14,5,0,1,68,0,0,83,0,68,0,0,3,0,0,119,0,111,0,1,3,0,0,119,0,109,0,32,7,42,0,121,7,4,0,0,63,0,0,1,65,17,0,119,0,86,0,25,15,2,4,25,16,2,8,0,5,42,0,0,62,0,0,82,17,15,0,82,18,16,0,0,19,17,0,4,21,18,19,1,68,10,0,134,22,0,0,180,187,0,0,17,68,21,0,1,68,0,0,13,23,22,68,0,24,22,0,1,68,1,0,4,25,68,19,3,26,25,24,125,27,23,21,26,0,0,0,16,28,27,5,125,29,28,27,5,0,0,0,135,68,17,0,62,17,29,0,82,30,15,0,3,32,30,29,85,15,32,0,3,33,62,29,4,34,5,29,19,68,23,28,0,60,68,0,120,60,4,0,0,63,33,0,1,65,17,0,119,0,50,0,82,35,16,0,16,36,32,35,121,36,8,0,25,37,32,1,85,15,37,0,78,38,32,0,19,68,38,67,0,39,68,0,0,49,39,0,119,0,9,0,134,40,0,0,28,14,1,0,2,0,0,0,34,41,40,0,121,41,3,0,0,6,33,0,119,0,20,0,0,49,40,0,26,47,34,1,19,68,49,67,0,48,68,0,25,50,33,1,83,33,48,0,19,68,49,67,0,64,68,0,33,51,64,10,33,52,47,0,19,68,52,51,0,61,68,0,121,61,4,0,0,5,47,0,0,62,50,0,119,0,192,255,0,63,50,0,1,65,17,0,119,0,14,0,13,43,6,0,121,43,3,0,1,4,0,0,119,0,10,0,82,44,2,0,38,68,44,16,0,45,68,0,32,46,45,0,121,46,3,0,1,4,0,0,119,0,3,0,0,63,6,0,1,65,17,0,32,68,65,17,121,68,9,0,1,68,0,0,13,54,0,68,121,54,3,0,1,4,0,0,119,0,4,0,1,68,0,0,83,63,68,0,0,4,0,0,32,55,12,0,121,55,3,0,0,3,4,0,119,0,5,0,134,68,0,0,232,25,1,0,2,0,0,0,0,3,4,0,139,3,0,0,140,3,58,0,0,0,0,0,2,55,0,0,221,0,0,0,2,56,0,0,0,0,8,0,1,53,0,0,136,57,0,0,0,54,57,0,136,57,0,0,25,57,57,32,137,57,0,0,25,48,54,16,0,47,54,0,134,5,0,0,180,8,1,0,1,0,0,0,25,6,2,76,82,17,6,0,1,57,255,255,15,28,57,17,121,28,6,0,134,39,0,0,0,26,1,0,2,0,0,0,0,40,39,0,119,0,2,0,1,40,0,0,134,57,0,0,16,210,0,0,2,0,0,0,1,57,0,0,13,42,0,57,121,42,38,0,19,57,5,56,0,43,57,0,32,44,43,0,25,4,2,60,120,44,11,0,82,45,4,0,85,47,45,0,25,49,47,4,1,57,2,0,85,49,57,0,25,50,47,8,1,57,1,0,85,50,57,0,135,57,13,0,55,47,0,0,2,57,0,0,63,255,247,255,19,57,5,57,0,46,57,0,82,7,4,0,85,48,7,0,25,51,48,4,1,57,4,0,85,51,57,0,25,52,48,8,85,52,46,0,135,8,13,0,55,48,0,0,134,9,0,0,184,22,1,0,8,0,0,0,34,10,9,0,121,10,3,0,1,53,15,0,119,0,59,0,1,53,12,0,119,0,57,0,134,11,0,0,100,224,0,0,0,1,0,0,1,57,0,0,13,12,11,57,121,12,3,0,1,53,15,0,119,0,49,0,25,13,11,60,82,14,13,0,25,15,2,60,82,16,15,0,13,18,14,16,121,18,4,0,1,57,255,255,85,13,57,0,119,0,13,0,19,57,5,56,0,19,57,0,134,20,0,0,172,211,0,0,14,16,19,0,34,21,20,0,121,21,6,0,134,57,0,0,144,221,0,0,11,0,0,0,1,53,15,0,119,0,28,0,82,22,2,0,38,57,22,1,0,23,57,0,82,24,11,0,20,57,23,24,0,25,57,0,85,2,25,0,25,26,11,32,82,27,26,0,25,29,2,32,85,29,27,0,25,30,11,36,82,31,30,0,25,32,2,36,85,32,31,0,25,33,11,40,82,34,33,0,25,35,2,40,85,35,34,0,25,36,11,12,82,37,36,0,25,38,2,12,85,38,37,0,134,57,0,0,144,221,0,0,11,0,0,0,1,53,12,0,32,57,53,12,121,57,10,0,32,41,40,0,121,41,3,0,0,3,2,0,119,0,12,0,134,57,0,0,232,25,1,0,2,0,0,0,0,3,2,0,119,0,7,0,32,57,53,15,121,57,5,0,134,57,0,0,144,221,0,0,2,0,0,0,1,3,0,0,137,54,0,0,139,3,0,0,140,2,52,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,1,50,0,0,13,4,0,50,121,4,3,0,1,2,0,0,119,0,109,0,1,50,0,0,13,5,1,50,121,5,3,0,0,2,0,0,119,0,104,0,135,16,4,0,1,0,0,0,135,27,4,0,0,0,0,0,78,35,0,0,41,50,35,24,42,50,50,24,32,36,50,0,121,36,3,0,1,2,0,0,119,0,93,0,0,37,0,0,4,38,27,16,0,10,35,0,0,42,0,0,0,39,42,0,4,40,39,37,15,6,38,40,121,6,4,0,0,3,10,0,0,43,42,0,119,0,22,0,78,9,1,0,41,50,10,24,42,50,50,24,41,51,9,24,42,51,51,24,13,11,50,51,121,11,4,0,0,3,10,0,0,43,42,0,119,0,12,0,25,12,42,1,78,13,12,0,41,51,13,24,42,51,51,24,32,14,51,0,121,14,3,0,1,2,0,0,119,0,64,0,0,10,13,0,0,42,12,0,119,0,229,255,0,7,0,0,4,8,27,16,0,34,3,0,0,44,43,0,0,15,44,0,4,17,15,7,15,18,8,17,121,18,3,0,1,2,0,0,119,0,51,0,1,51,0,0,13,19,44,51,120,19,37,0,0,23,34,0,1,41,0,0,0,46,44,0,0,47,1,0,78,20,47,0,41,51,20,24,42,51,51,24,32,21,51,0,15,22,16,41,20,51,22,21,0,45,51,0,121,45,3,0,0,2,44,0,119,0,34,0,41,51,23,24,42,51,51,24,41,50,20,24,42,50,50,24,13,24,51,50,120,24,2,0,119,0,16,0,25,25,41,1,25,26,46,1,25,28,47,1,78,29,26,0,41,50,29,24,42,50,50,24,32,30,50,0,121,30,3,0,0,2,44,0,119,0,17,0,0,23,29,0,0,41,25,0,0,46,26,0,0,47,28,0,119,0,225,255,25,31,44,1,78,32,31,0,41,50,32,24,42,50,50,24,32,33,50,0,121,33,3,0,1,2,0,0,119,0,4,0,0,34,32,0,0,44,31,0,119,0,201,255,139,2,0,0,140,0,59,0,0,0,0,0,2,56,0,0,232,3,0,0,1,54,0,0,136,57,0,0,0,55,57,0,136,57,0,0,1,58,112,31,3,57,57,58,137,57,0,0,25,49,55,16,0,48,55,0,1,57,104,31,3,46,55,57,1,57,96,31,3,47,55,57,1,57,192,15,3,39,55,57,25,40,55,32,135,57,8,0,46,47,0,0,82,5,46,0,25,6,46,4,82,17,6,0,0,32,17,0,0,35,5,0,1,43,0,0,1,38,0,0,135,57,8,0,46,47,0,0,25,28,38,1,82,30,6,0,13,31,30,32,82,33,46,0,13,34,33,35,19,57,31,34,0,45,57,0,121,45,3,0,0,38,28,0,119,0,245,255,0,2,28,0,0,3,30,0,0,4,33,0,119,0,1,0,4,7,4,35,2,57,0,0,64,66,15,0,5,8,7,57,4,9,3,32,3,10,9,8,41,57,43,2,3,11,40,57,85,11,10,0,41,57,43,2,3,12,39,57,85,12,2,0,25,13,43,1,13,42,13,56,121,42,5,0,1,36,0,0,1,37,0,0,1,44,0,0,119,0,5,0,0,32,3,0,0,35,4,0,0,43,13,0,119,0,217,255,41,57,44,2,3,14,40,57,82,15,14,0,3,16,15,37,41,57,44,2,3,18,39,57,82,19,18,0,3,20,19,36,1,57,120,27,82,21,57,0,1,57,8,0,15,22,57,21,121,22,10,0,85,48,44,0,25,50,48,4,85,50,15,0,25,51,48,8,85,51,19,0,1,58,245,16,134,57,0,0,172,21,1,0,58,48,0,0,25,23,44,1,13,41,23,56,121,41,4,0,0,0,16,0,0,1,20,0,119,0,5,0,0,36,20,0,0,37,16,0,0,44,23,0,119,0,225,255,8,57,0,56,38,57,57,255,0,24,57,0,4,25,0,24,1,57,120,27,82,26,57,0,32,27,26,0,120,27,13,0,6,57,1,56,38,57,57,255,0,29,57,0,85,49,56,0,25,52,49,4,85,52,25,0,25,53,49,8,85,53,29,0,1,58,37,17,134,57,0,0,172,21,1,0,58,49,0,0,137,55,0,0,139,25,0,0,140,3,55,0,0,0,0,0,1,51,0,0,136,53,0,0,0,52,53,0,136,53,0,0,25,53,53,48,137,53,0,0,25,48,52,40,25,47,52,32,25,50,52,24,25,49,52,16,25,46,52,8,0,45,52,0,25,3,0,32,82,4,3,0,1,53,0,0,13,15,4,53,121,15,5,0,25,26,1,4,82,37,26,0,0,42,37,0,119,0,2,0,0,42,4,0,25,38,1,20,82,39,38,0,82,40,0,0,85,45,40,0,1,54,209,14,134,53,0,0,172,21,1,0,54,45,0,0,25,41,0,4,134,53,0,0,124,18,1,0,41,0,0,0,1,53,0,0,13,5,42,53,120,5,11,0,25,6,2,16,82,7,6,0,1,53,1,0,15,8,53,7,121,8,6,0,85,46,42,0,1,54,238,14,134,53,0,0,172,21,1,0,54,46,0,0,25,9,0,28,82,10,9,0,1,53,0,0,13,11,10,53,121,11,3,0,0,43,39,0,119,0,6,0,1,53,163,15,134,12,0,0,176,168,0,0,39,53,10,0,0,43,12,0,82,13,0,0,134,14,0,0,236,11,1,0,13,0,0,0,1,53,0,0,13,16,14,53,121,16,7,0,82,20,38,0,134,21,0,0,208,20,1,0,20,0,0,0,0,44,21,0,119,0,13,0,1,53,169,15,134,17,0,0,176,168,0,0,43,53,14,0,82,18,38,0,13,19,43,18,120,19,3,0,135,53,7,0,43,0,0,0,135,53,7,0,14,0,0,0,0,44,17,0,85,49,44,0,1,54,62,15], eb + 40960);
  HEAPU8.set([134,53,0,0,172,21,1,0,54,49,0,0,135,53,7,0,44,0,0,0,25,22,2,12,82,23,22,0,32,24,23,0,120,24,31,0,25,25,1,8,82,27,25,0,1,53,0,0,13,28,27,53,120,28,6,0,85,50,27,0,1,54,65,15,134,53,0,0,172,21,1,0,54,50,0,0,25,29,1,12,82,30,29,0,1,53,0,0,13,31,30,53,120,31,6,0,85,47,30,0,1,54,71,15,134,53,0,0,172,21,1,0,54,47,0,0,25,32,1,16,82,33,32,0,1,53,0,0,13,34,33,53,120,34,6,0,85,48,33,0,1,54,77,15,134,53,0,0,172,21,1,0,54,48,0,0,1,54,10,0,134,53,0,0,32,25,1,0,54,0,0,0,1,53,8,0,82,35,53,0,25,36,35,1,1,53,8,0,85,53,36,0,137,52,0,0,139,35,0,0,140,3,57,0,0,0,0,0,1,53,0,0,136,55,0,0,0,54,55,0,136,55,0,0,25,55,55,48,137,55,0,0,25,48,54,16,0,47,54,0,25,46,54,32,85,46,1,0,25,5,46,4,25,6,0,48,82,17,6,0,33,28,17,0,38,55,28,1,0,39,55,0,4,40,2,39,85,5,40,0,25,41,46,8,25,42,0,44,82,43,42,0,85,41,43,0,25,44,46,12,85,44,17,0,1,55,132,27,82,7,55,0,1,55,0,0,13,8,7,55,121,8,17,0,25,13,0,60,82,14,13,0,85,48,14,0,25,51,48,4,85,51,46,0,25,52,48,8,1,55,2,0,85,52,55,0,1,55,145,0,135,15,18,0,55,48,0,0,134,16,0,0,184,22,1,0,15,0,0,0,0,45,16,0,119,0,22,0,1,56,2,0,135,55,11,0,56,0,0,0,25,9,0,60,82,10,9,0,85,47,10,0,25,49,47,4,85,49,46,0,25,50,47,8,1,55,2,0,85,50,55,0,1,55,145,0,135,11,18,0,55,47,0,0,134,12,0,0,184,22,1,0,11,0,0,0,1,56,0,0,135,55,12,0,56,0,0,0,0,45,12,0,34,18,45,1,121,18,17,0,38,55,45,48,0,19,55,0,40,55,19,16,0,20,55,0,82,21,0,0,20,55,21,20,0,22,55,0,85,0,22,0,25,23,0,8,1,55,0,0,85,23,55,0,25,24,0,4,1,55,0,0,85,24,55,0,0,3,45,0,119,0,26,0,82,25,5,0,16,26,25,45,121,26,22,0,4,27,45,25,82,29,42,0,25,30,0,4,85,30,29,0,0,4,29,0,3,31,4,27,25,32,0,8,85,32,31,0,82,33,6,0,32,34,33,0,121,34,3,0,0,3,2,0,119,0,10,0,25,35,4,1,85,30,35,0,78,36,4,0,26,37,2,1,3,38,1,37,83,38,36,0,0,3,2,0,119,0,2,0,0,3,45,0,137,54,0,0,139,3,0,0,140,3,54,0,0,0,0,0,1,47,0,0,136,50,0,0,0,48,50,0,136,50,0,0,1,51,224,0,3,50,50,51,137,50,0,0,25,39,48,120,25,42,48,80,0,41,48,0,1,50,136,0,3,40,48,50,0,46,42,0,25,49,46,40,1,50,0,0,85,46,50,0,25,46,46,4,54,50,46,49,204,202,0,0,82,45,2,0,85,39,45,0,1,50,0,0,134,5,0,0,0,0,0,0,50,1,39,41,42,0,0,0,34,6,5,0,121,6,3,0,1,4,255,255,119,0,94,0,25,17,0,76,82,28,17,0,1,50,255,255,15,33,50,28,121,33,6,0,134,34,0,0,0,26,1,0,0,0,0,0,0,31,34,0,119,0,2,0,1,31,0,0,82,35,0,0,38,50,35,32,0,36,50,0,25,37,0,74,78,38,37,0,41,50,38,24,42,50,50,24,34,7,50,1,121,7,4,0,38,50,35,223,0,8,50,0,85,0,8,0,25,9,0,48,82,10,9,0,32,11,10,0,121,11,46,0,25,13,0,44,82,14,13,0,85,13,40,0,25,15,0,28,85,15,40,0,25,16,0,20,85,16,40,0,1,50,80,0,85,9,50,0,25,18,40,80,25,19,0,16,85,19,18,0,134,20,0,0,0,0,0,0,0,1,39,41,42,0,0,0,1,50,0,0,13,21,14,50,121,21,3,0,0,43,20,0,119,0,30,0,25,22,0,36,82,23,22,0,38,51,23,7,1,52,0,0,1,53,0,0,135,50,19,0,51,0,52,53,82,24,16,0,1,50,0,0,13,25,24,50,1,50,255,255,125,3,25,50,20,0,0,0,85,13,14,0,1,50,0,0,85,9,50,0,1,50,0,0,85,19,50,0,1,50,0,0,85,15,50,0,1,50,0,0,85,16,50,0,0,43,3,0,119,0,6,0,134,12,0,0,0,0,0,0,0,1,39,41,42,0,0,0,0,43,12,0,82,26,0,0,38,50,26,32,0,27,50,0,32,29,27,0,1,50,255,255,125,44,29,43,50,0,0,0,20,50,26,36,0,30,50,0,85,0,30,0,32,32,31,0,120,32,4,0,134,50,0,0,232,25,1,0,0,0,0,0,0,4,44,0,137,48,0,0,139,4,0,0,140,2,58,0,0,0,0,0,2,53,0,0,128,128,128,128,2,54,0,0,255,254,254,254,2,55,0,0,255,0,0,0,1,51,0,0,136,56,0,0,0,52,56,0,19,56,1,55,0,6,56,0,32,7,6,0,121,7,6,0,135,43,4,0,0,0,0,0,3,44,0,43,0,2,44,0,119,0,106,0,0,18,0,0,38,56,18,3,0,29,56,0,32,40,29,0,121,40,3,0,0,3,0,0,119,0,28,0,19,56,1,55,0,42,56,0,0,4,0,0,78,45,4,0,41,56,45,24,42,56,56,24,32,46,56,0,41,56,45,24,42,56,56,24,41,57,42,24,42,57,57,24,13,8,56,57,20,57,46,8,0,47,57,0,121,47,3,0,0,2,4,0,119,0,82,0,25,9,4,1,0,10,9,0,38,57,10,3,0,11,57,0,32,12,11,0,121,12,3,0,0,3,9,0,119,0,3,0,0,4,9,0,119,0,233,255,2,57,0,0,1,1,1,1,5,13,6,57,82,14,3,0,2,57,0,0,1,1,1,1,4,15,14,57,19,57,14,53,0,16,57,0,21,57,16,53,0,17,57,0,19,57,17,15,0,19,57,0,32,20,19,0,121,20,36,0,0,22,14,0,0,50,3,0,21,57,22,13,0,21,57,0,2,57,0,0,1,1,1,1,4,23,21,57,19,57,21,53,0,24,57,0,21,57,24,53,0,25,57,0,19,57,25,23,0,26,57,0,32,27,26,0,120,27,3,0,0,49,50,0,119,0,20,0,25,28,50,4,82,30,28,0,2,57,0,0,1,1,1,1,4,31,30,57,19,57,30,53,0,32,57,0,21,57,32,53,0,33,57,0,19,57,33,31,0,34,57,0,32,35,34,0,121,35,4,0,0,22,30,0,0,50,28,0,119,0,226,255,0,49,28,0,119,0,2,0,0,49,3,0,19,57,1,55,0,36,57,0,0,5,49,0,78,37,5,0,41,57,37,24,42,57,57,24,32,38,57,0,41,57,37,24,42,57,57,24,41,56,36,24,42,56,56,24,13,39,57,56,20,56,38,39,0,48,56,0,25,41,5,1,121,48,3,0,0,2,5,0,119,0,3,0,0,5,41,0,119,0,240,255,139,2,0,0,140,3,48,0,0,0,0,0,1,44,0,0,136,46,0,0,0,45,46,0,25,8,2,16,82,9,8,0,1,46,0,0,13,20,9,46,121,20,12,0,134,35,0,0,192,9,1,0,2,0,0,0,32,36,35,0,121,36,5,0,82,6,8,0,0,40,6,0,1,44,5,0,119,0,6,0,1,3,0,0,119,0,4,0,0,31,9,0,0,40,31,0,1,44,5,0,32,46,44,5,121,46,68,0,25,37,2,20,82,38,37,0,4,39,40,38,16,10,39,1,0,11,38,0,121,10,8,0,25,12,2,36,82,13,12,0,38,46,13,7,135,14,19,0,46,2,0,1,0,3,14,0,119,0,55,0,25,15,2,75,78,16,15,0,1,46,255,255,41,47,16,24,42,47,47,24,15,17,46,47,121,17,37,0,0,41,1,0,32,18,41,0,121,18,6,0,0,4,1,0,0,5,0,0,0,30,11,0,1,43,0,0,119,0,33,0,26,19,41,1,3,21,0,19,78,22,21,0,41,47,22,24,42,47,47,24,32,23,47,10,121,23,3,0,0,42,41,0,119,0,3,0,0,41,19,0,119,0,239,255,25,24,2,36,82,25,24,0,38,47,25,7,135,26,19,0,47,2,0,42,16,27,26,42,121,27,3,0,0,3,42,0,119,0,20,0,3,28,0,42,4,29,1,42,82,7,37,0,0,4,29,0,0,5,28,0,0,30,7,0,0,43,42,0,119,0,5,0,0,4,1,0,0,5,0,0,0,30,11,0,1,43,0,0,135,47,17,0,30,5,4,0,82,32,37,0,3,33,32,4,85,37,33,0,3,34,43,4,0,3,34,0,139,3,0,0,140,3,56,0,0,0,0,0,2,53,0,0,255,0,0,0,2,54,0,0,128,0,0,0,1,51,0,0,136,55,0,0,0,52,55,0,1,55,0,0,13,4,0,55,121,4,3,0,1,3,1,0,119,0,120,0,35,5,1,128,121,5,6,0,19,55,1,53,0,16,55,0,83,0,16,0,1,3,1,0,119,0,113,0,1,55,0,8,16,27,1,55,121,27,19,0,43,55,1,6,0,38,55,0,1,55,192,0,20,55,38,55,0,45,55,0,19,55,45,53,0,46,55,0,25,47,0,1,83,0,46,0,38,55,1,63,0,48,55,0,20,55,48,54,0,49,55,0,19,55,49,53,0,6,55,0,83,47,6,0,1,3,2,0,119,0,92,0,2,55,0,0,0,216,0,0,16,7,1,55,1,55,0,224,19,55,1,55,0,8,55,0,2,55,0,0,0,224,0,0,13,9,8,55,20,55,7,9,0,50,55,0,121,50,29,0,43,55,1,12,0,10,55,0,1,55,224,0,20,55,10,55,0,11,55,0,19,55,11,53,0,12,55,0,25,13,0,1,83,0,12,0,43,55,1,6,0,14,55,0,38,55,14,63,0,15,55,0,20,55,15,54,0,17,55,0,19,55,17,53,0,18,55,0,25,19,0,2,83,13,18,0,38,55,1,63,0,20,55,0,20,55,20,54,0,21,55,0,19,55,21,53,0,22,55,0,83,19,22,0,1,3,3,0,119,0,52,0,2,55,0,0,0,0,1,0,4,23,1,55,2,55,0,0,0,0,16,0,16,24,23,55,121,24,39,0,43,55,1,18,0,25,55,0,1,55,240,0,20,55,25,55,0,26,55,0,19,55,26,53,0,28,55,0,25,29,0,1,83,0,28,0,43,55,1,12,0,30,55,0,38,55,30,63,0,31,55,0,20,55,31,54,0,32,55,0,19,55,32,53,0,33,55,0,25,34,0,2,83,29,33,0,43,55,1,6,0,35,55,0,38,55,35,63,0,36,55,0,20,55,36,54,0,37,55,0,19,55,37,53,0,39,55,0,25,40,0,3,83,34,39,0,38,55,1,63,0,41,55,0,20,55,41,54,0,42,55,0,19,55,42,53,0,43,55,0,83,40,43,0,1,3,4,0,119,0,7,0,134,44,0,0,28,21,1,0,1,55,84,0,85,44,55,0,1,3,255,255,119,0,1,0,139,3,0,0,140,1,41,0,0,0,0,0,2,39,0,0,160,27,0,0,1,37,0,0,136,40,0,0,0,38,40,0,1,40,0,0,13,5,0,40,121,5,69,0,1,40,252,0,82,30,40,0,1,40,0,0,13,31,30,40,121,31,3,0,1,25,0,0,119,0,7,0,1,40,252,0,82,32,40,0,134,7,0,0,16,210,0,0,32,0,0,0,0,25,7,0,135,40,15,0,39,0,0,0,1,40,156,27,82,3,40,0,1,40,0,0,13,8,3,40,121,8,3,0,0,34,25,0,119,0,43,0,0,4,3,0,0,35,25,0,25,9,4,76,82,10,9,0,1,40,255,255,15,11,40,10,121,11,6,0,134,12,0,0,0,26,1,0,4,0,0,0,0,21,12,0,119,0,2,0,1,21,0,0,25,13,4,20,82,14,13,0,25,15,4,28,82,16,15,0,16,18,16,14,121,18,8,0,134,19,0,0,80,227,0,0,4,0,0,0,20,40,19,35,0,20,40,0,0,36,20,0,119,0,2,0,0,36,35,0,32,22,21,0,120,22,4,0,134,40,0,0,232,25,1,0,4,0,0,0,25,23,4,56,82,2,23,0,1,40,0,0,13,24,2,40,121,24,3,0,0,34,36,0,119,0,4,0,0,4,2,0,0,35,36,0,119,0,217,255,135,40,16,0,39,0,0,0,0,1,34,0,119,0,25,0,25,6,0,76,82,17,6,0,1,40,255,255,15,26,40,17,120,26,6,0,134,27,0,0,80,227,0,0,0,0,0,0,0,1,27,0,119,0,15,0,134,28,0,0,0,26,1,0,0,0,0,0,32,33,28,0,134,29,0,0,80,227,0,0,0,0,0,0,121,33,3,0,0,1,29,0,119,0,5,0,134,40,0,0,232,25,1,0,0,0,0,0,0,1,29,0,139,1,0,0,140,3,28,0,0,0,0,0,2,25,0,0,74,1,0,0,1,23,0,0,136,26,0,0,0,24,26,0,136,26,0,0,25,26,26,48,137,26,0,0,25,17,24,24,25,16,24,16,0,15,24,0,13,6,0,1,121,6,7,0,1,26,234,255,134,7,0,0,184,22,1,0,26,0,0,0,0,3,7,0,119,0,74,0,2,26,0,0,0,0,8,0,19,26,2,26,0,8,26,0,33,9,8,0,121,9,43,0,85,15,0,0,25,18,15,4,85,18,1,0,25,21,15,8,85,21,2,0,135,10,20,0,25,15,0,0,1,26,218,255,1,27,23,0,138,10,26,27,164,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,156,212,0,0,168,212,0,0,0,5,10,0,119,0,3,0,119,0,7,0,119,0,220,255,134,11,0,0,184,22,1,0,5,0,0,0,0,3,11,0,119,0,26,0,85,16,0,0,25,22,16,4,85,22,1,0,1,26,63,0,135,12,21,0,26,16,0,0,32,13,12,240,120,13,249,255,0,4,12,0,119,0,1,0,121,9,11,0,85,17,1,0,25,19,17,4,1,26,2,0,85,19,26,0,25,20,17,8,1,26,1,0,85,20,26,0,1,27,221,0,135,26,13,0,27,17,0,0,134,14,0,0,184,22,1,0,4,0,0,0,0,3,14,0,137,24,0,0,139,3,0,0,140,2,39,0,0,0,0,0,2,37,0,0,255,0,0,0,1,35,0,0,136,38,0,0,0,36,38,0,25,3,1,76,82,4,3,0,34,15,4,0,121,15,3,0,1,35,3,0,119,0,43,0,134,26,0,0,0,26,1,0,1,0,0,0,32,29,26,0,121,29,3,0,1,35,3,0,119,0,36,0,25,13,1,75,78,14,13,0,41,38,14,24,42,38,38,24,0,16,38,0,13,17,16,0,121,17,3,0,1,35,10,0,119,0,17,0,25,18,1,20,82,19,18,0,25,20,1,16,82,21,20,0,16,22,19,21,121,22,10,0,19,38,0,37,0,23,38,0,25,24,19,1,85,18,24,0,83,19,23,0,19,38,0,37,0,25,38,0,0,28,25,0,119,0,2,0,1,35,10,0,32,38,35,10,121,38,5,0,134,27,0,0,128,220,0,0,1,0,0,0,0,28,27,0,134,38,0,0,232,25,1,0,1,0,0,0,0,2,28,0,32,38,35,3,121,38,27,0,25,30,1,75,78,31,30,0,41,38,31,24,42,38,38,24,0,32,38,0,13,33,32,0,120,33,16,0,25,34,1,20,82,5,34,0,25,6,1,16,82,7,6,0,16,8,5,7,121,8,10,0,19,38,0,37,0,9,38,0,25,10,5,1,85,34,10,0,83,5,9,0,19,38,0,37,0,11,38,0,0,2,11,0,119,0,5,0,134,12,0,0,128,220,0,0,1,0,0,0,0,2,12,0,139,2,0,0,140,1,37,0,0,0,0,0,1,33,0,0,136,35,0,0,0,34,35,0,0,1,0,0,78,7,1,0,41,35,7,24,42,35,35,24,0,8,35,0,134,16,0,0,180,23,1,0,8,0,0,0,32,17,16,0,25,18,1,1,121,17,4,0,0,2,1,0,0,5,18,0,119,0,3,0,0,1,18,0,119,0,242,255,78,19,2,0,41,35,19,24,42,35,35,24,0,20,35,0,1,35,43,0,1,36,3,0,138,20,35,36,8,215,0,0,248,214,0,0,20,215,0,0,0,3,2,0,0,22,19,0,1,32,0,0,119,0,7,0,1,31,0,0,1,33,5,0,119,0,4,0,1,31,1,0,1,33,5,0,119,0,1,0,32,35,33,5,121,35,5,0,78,6,5,0,0,3,5,0,0,22,6,0,0,32,31,0,41,35,22,24,42,35,35,24,0,21,35,0,26,27,21,48,35,25,27,10,121,25,20,0,0,4,3,0,0,28,27,0,1,30,0,0,27,23,30,10,25,9,4,1,4,10,23,28,78,11,9,0,41,35,11,24,42,35,35,24,0,12,35,0,26,26,12,48,35,24,26,10,121,24,5,0,0,4,9,0,0,28,26,0,0,30,10,0,119,0,243,255,0,29,10,0,119,0,2,0,1,29,0,0,33,13,32,0,1,35,0,0,4,14,35,29,125,15,13,29,14,0,0,0,139,15,0,0,140,3,43,0,0,0,0,0,2,40,0,0,255,0,0,0,1,38,0,0,136,41,0,0,0,39,41,0,1,41,0,0,16,19,41,1,1,41,255,255,16,30,41,0,32,31,1,0,19,41,31,30,0,32,41,0,20,41,19,32,0,33,41,0,121,33,45,0,0,5,2,0,0,34,0,0,0,35,1,0,1,41,10,0,1,42,0,0,134,36,0,0,36,19,1,0,34,35,41,42,128,42,0,0,0,9,42,0,39,42,36,48,0,10,42,0,19,42,10,40,0,11,42,0,26,12,5,1,83,12,11,0,1,42,10,0,1,41,0,0,134,13,0,0,224,24,1,0,34,35,42,41,128,41,0,0,0,14,41,0,1,41,9,0,16,15,41,35,1,41,255,255,16,16,41,34,32,17,35,9,19,41,17,16,0,18,41,0,20,41,15,18,0,20,41,0,121,20,5,0,0,5,12,0,0,34,13,0,0,35,14,0,119,0,223,255,0,8,12,0,0,28,13,0,0,29,14,0,119,0,1,0,0,3,8,0,0,4,28,0,119,0,3,0,0,3,2,0,0,4,0,0,32,21,4,0,121,21,3,0,0,6,3,0,119,0,22,0,0,7,3,0,0,37,4,0,31,41,37,10,38,41,41,255,0,22,41,0,39,41,22,48,0,23,41,0,19,41,23,40,0,24,41,0,26,25,7,1,83,25,24,0,29,41,37,10,38,41,41,255,0,26,41,0,35,27,37,10,121,27,3,0,0,6,25,0,119,0,4,0,0,7,25,0,0,37,26,0,119,0,238,255,139,6,0,0,140,4,37,0,0,0,0,0,1,31,0,0,136,35,0,0,0,32,35,0,136,35,0,0,1,36,128,0,3,35,35,36,137,35,0,0,25,28,32,112,0,29,32,0,0,30,29,0,1,33,0,1,25,34,30,112,82,35,33,0,85,30,35,0,25,30,30,4,25,33,33,4,54,35,30,34,84,217,0,0,26,8,1,1,2,35,0,0,254,255,255,127,16,9,35,8,121,9,13,0,32,20,1,0,121,20,5,0,0,6,28,0,1,7,1,0,1,31,4,0,119,0,10,0,134,21,0,0,28,21,1,0,1,35,75,0,85,21,35,0,1,5,255,255,119,0,4,0,0,6,0,0,0,7,1,0,1,31,4,0,32,35,31,4,121,35,35,0,0,22,6,0,1,35,254,255,4,23,35,22,16,24,23,7,125,4,24,23,7,0,0,0,25,25,29,48,85,25,4,0,25,26,29,20,85,26,6,0,25,27,29,44,85,27,6,0,3,10,6,4,25,11,29,16,85,11,10,0,25,12,29,28,85,12,10,0,134,13,0,0,140,202,0,0,29,2,3,0,32,14,4,0,121,14,3,0,0,5,13,0,119,0,11,0,82,15,26,0,82,16,11,0,13,17,15,16,41,35,17,31,42,35,35,31,0,18,35,0,3,19,15,18,1,35,0,0,83,19,35,0,0,5,13,0,137,32,0,0,139,5,0,0,140,3,36,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,32,5,2,1,121,5,9,0,25,6,0,8,82,17,6,0,25,23,0,4,82,24,23,0,4,25,1,17,3,26,25,24,0,4,26,0,119,0,2,0,0,4,1,0,25,27,0,20,82,28,27,0,25,29,0,28,82,7,29,0,16,8,7,28,121,8,16,0,25,9,0,36,82,10,9,0,38,33,10,7,1,34,0,0,1,35,0,0,135,32,19,0,33,0,34,35,82,11,27,0,1,32,0,0,13,12,11,32,121,12,3,0,1,3,255,255,119,0,4,0,1,30,5,0,119,0,2,0,1,30,5,0,32,32,30,5,121,32,28,0,25,13,0,16,1,32,0,0,85,13,32,0,1,32,0,0,85,29,32,0,1,32,0,0,85,27,32,0,25,14,0,40,82,15,14,0,38,32,15,7,135,16,19,0,32,0,4,2,34,18,16,0,121,18,3,0,1,3,255,255,119,0,12,0,25,19,0,8,1,32,0,0,85,19,32,0,25,20,0,4,1,32,0,0,85,20,32,0,82,21,0,0,38,32,21,239,0,22,32,0,85,0,22,0,1,3,0,0,139,3,0,0,140,5,35,0,0,0,0,0,2,31,0,0,0,1,0,0,2,32,0,0,255,0,0,0,2,33,0,0,0,255,255,255,1,29,0,0,136,34,0,0,0,30,34,0,136,34,0,0,3,34,34,31,137,34,0,0,0,28,30,0,2,34,0,0,0,32,1,0,19,34,4,34,0,8,34,0,32,9,8,0,15,19,3,2,19,34,19,9,0,27,34,0,121,27,46,0,4,20,2,3,16,21,31,20,125,22,21,31,20,0,0,0,135,34,1,0,28,1,22,0,16,23,32,20,82,24,0,0,38,34,24,32,0,25,34,0,32,26,25,0,121,23,28,0,4,10,2,3,0,6,20,0,0,17,24,0,0,18,26,0,121,18,7,0,134,34,0,0,128,206,0,0,28,31,0,0,82,7,0,0,0,14,7,0,119,0,2,0,0,14,17,0,4,11,6,31,16,12,32,11,38,34,14,32,0,13,34,0,32,15,13,0,121,12,5,0,0,6,11,0,0,17,14,0,0,18,15,0,119,0,239,255,19,34,10,32,0,16,34,0,121,15,9,0,0,5,16,0,119,0,4,0,121,26,6,0,0,5,20,0,119,0,1,0,134,34,0,0,128,206,0,0,28,5,0,0,137,30,0,0,139,0,0,0,140,2,32,0,0,0,0,0,2,29,0,0,255,0,0,0,1,27,0,0,136,30,0,0,0,28,30,0,136,30,0,0,25,30,30,16,137,30,0,0,0,26,28,0,19,30,1,29,0,4,30,0,83,26,4,0,25,5,0,16,82,16,5,0,1,30,0,0,13,19,16,30,121,19,12,0,134,20,0,0,192,9,1,0,0,0,0,0,32,21,20,0,121,21,5,0,82,3,5,0,0,25,3,0,1,27,4,0,119,0,5,0,1,2,255,255,119,0,3,0,0,25,16,0,1,27,4,0,32,30,27,4,121,30,33,0,25,22,0,20,82,23,22,0,16,24,23,25,121,24,15,0,19,30,1,29,0,6,30,0,25,7,0,75,78,8,7,0,41,30,8,24,42,30,30,24,0,9,30,0,13,10,6,9,120,10,6,0,25,11,23,1,85,22,11,0,83,23,4,0,0,2,6,0,119,0,15,0,25,12,0,36,82,13,12,0,38,30,13,7,1,31,1,0,135,14,19,0,30,0,26,31,32,15,14,1,121,15,6,0,78,17,26,0,19,30,17,29,0,18,30,0,0,2,18,0,119,0,2,0,1,2,255,255,137,28,0,0,139,2,0,0,140,1,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,25,2,0,76,82,3,2,0,1,30,255,255,15,14,30,3,121,14,4,0,134,30,0,0,0,26,1,0,0,0,0,0,82,21,0,0,38,30,21,1,0,22,30,0,33,23,22,0,120,23,30,0,1,31,160,27,135,30,15,0,31,0,0,0,25,24,0,52,82,25,24,0,1,30,0,0,13,26,25,30,0,27,25,0,25,1,0,56,120,26,4,0,82,4,1,0,25,5,25,56,85,5,4,0,82,6,1,0,1,30,0,0,13,7,6,30,0,8,6,0,120,7,3,0,25,9,6,52,85,9,27,0,1,30,156,27,82,10,30,0,13,11,10,0,121,11,3,0,1,30,156,27,85,30,8,0,1,31,160,27,135,30,16,0,31,0,0,0,134,12,0,0,16,210,0,0,0,0,0,0,25,13,0,12,82,15,13,0,38,30,15,1,135,16,22,0,30,0,0,0,20,30,16,12,0,17,30,0,25,18,0,92,82,19,18,0,1,30,0,0,13,20,19,30,120,20,3,0,135,30,7,0,19,0,0,0,120,23,3,0,135,30,7,0,0,0,0,0,139,17,0,0,140,2,30,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,1,28,0,0,13,2,0,28,121,2,5,0,135,3,3,0,1,0,0,0,0,25,3,0,139,25,0,0,1,28,191,255,16,14,28,1,121,14,7,0,134,18,0,0,28,21,1,0,1,28,12,0,85,18,28,0,1,25,0,0,139,25,0,0,35,19,1,11,25,20,1,11,38,28,20,248,0,21,28,0,1,28,16,0,125,22,19,28,21,0,0,0,26,23,0,8,134,24,0,0,36,157,0,0,23,22,0,0,1,28,0,0,13,4,24,28,120,4,4,0,25,5,24,8,0,25,5,0,139,25,0,0,135,6,3,0,1,0,0,0,1,28,0,0,13,7,6,28,121,7,3,0,1,25,0,0,139,25,0,0,26,8,0,4,82,9,8,0,38,28,9,248,0,10,28,0,38,28,9,3,0,11,28,0,32,12,11,0,1,28,8,0,1,29,4,0,125,13,12,28,29,0,0,0,4,15,10,13,16,16,15,1,125,17,16,15,1,0,0,0,135,29,17,0,6,0,17,0,135,29,7,0,0,0,0,0,0,25,6,0,139,25,0,0,140,3,27,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,32,137,26,0,0,0,21,25,0,25,13,25,16,85,13,2,0,82,14,13,0,0,3,14,0,1,26,0,0,25,4,26,4,0,17,4,0,26,16,17,1,3,5,3,16,1,26,0,0,25,6,26,4,0,20,6,0,26,19,20,1,40,26,19,255,0,18,26,0,19,26,5,18,0,7,26,0,0,8,7,0,82,9,8,0,25,15,8,4,85,13,15,0,2,26,0,0,0,128,0,0,20,26,1,26,0,10,26,0,85,21,0,0,25,22,21,4,85,22,10,0,25,23,21,8,85,23,9,0,1,26,5,0,135,11,23,0,26,21,0,0,134,12,0,0,184,22,1,0,11,0,0,0,137,25,0,0,139,12,0,0,140,2,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,32,137,21,0,0,25,16,20,16,0,15,20,0,78,3,1,0,41,21,3,24,42,21,21,24,0,4,21,0,1,21,116,27,1,22,4,0,134,14,0,0,180,187,0,0,21,4,22,0,1,22,0,0,13,6,14,22,121,6,7,0,134,7,0,0,28,21,1,0,1,22,22,0,85,7,22,0,1,2,0,0,119,0,37,0,134,8,0,0,180,8,1,0,1,0,0,0,2,22,0,0,0,128,0,0,20,22,8,22,0,9,22,0,85,15,0,0,25,17,15,4,85,17,9,0,25,18,15,8,1,22,182,1,85,18,22,0,1,22,5,0,135,10,23,0,22,15,0,0,134,11,0,0,184,22,1,0,10,0,0,0,34,12,11,0,121,12,3,0,1,2,0,0,119,0,14,0,134,13,0,0,236,181,0,0,11,1,0,0,1,22,0,0,13,5,13,22,121,5,7,0,85,16,11,0,1,21,6,0,135,22,24,0,21,16,0,0,1,2,0,0,119,0,2,0,0,2,13,0,137,20,0,0,139,2,0,0,140,1,23,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,1,14,0,0,1,22,228,19,3,3,22,14,78,6,3,0,1,22,255,0,19,22,6,22,0,7,22,0,13,8,7,0,121,8,4,0,0,15,14,0,1,20,2,0,119,0,10,0,25,9,14,1,32,10,9,87,121,10,5,0,1,16,87,0,1,18,60,20,1,20,5,0,119,0,3,0,0,14,9,0,119,0,237,255,32,22,20,2,121,22,8,0,32,2,15,0,121,2,3,0,1,17,60,20,119,0,4,0,0,16,15,0,1,18,60,20,1,20,5,0,32,22,20,5,121,22,22,0,1,20,0,0,0,19,18,0,78,11,19,0,41,22,11,24,42,22,22,24,32,12,22,0,25,13,19,1,121,12,3,0,0,1,13,0,119,0,3,0,0,19,13,0,119,0,247,255,26,4,16,1,32,5,4,0,121,5,3,0,0,17,1,0,119,0,5,0,0,16,4,0,0,18,1,0,1,20,5,0,119,0,236,255,139,17,0,0,140,1,32,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,25,2,0,74,78,3,2,0,41,28,3,24,42,28,28,24,0,14,28,0,1,28,255,0,3,19,14,28,20,28,19,14,0,20,28,0,1,28,255,0,19,28,20,28,0,21,28,0,83,2,21,0,25,22,0,20,82,23,22,0,25,24,0,44,82,25,24,0,16,4,25,23,121,4,8,0,25,5,0,36,82,6,5,0,38,29,6,7,1,30,0,0,1,31,0,0,135,28,19,0,29,0,30,31,25,7,0,16,1,28,0,0,85,7,28,0,25,8,0,28,1,28,0,0,85,8,28,0,1,28,0,0,85,22,28,0,82,9,0,0,38,28,9,20,0,10,28,0,32,11,10,0,121,11,8,0,82,16,24,0,25,17,0,8,85,17,16,0,25,18,0,4,85,18,16,0,1,1,0,0,119,0,11,0,38,28,9,4,0,12,28,0,32,13,12,0,121,13,3,0,1,1,255,255,119,0,5,0,39,28,9,32,0,15,28,0,85,0,15,0,1,1,255,255,139,1,0,0,140,1,28,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,25,2,0,20,82,3,2,0,25,14,0,28,82,15,14,0,16,16,15,3,121,16,16,0,25,17,0,36,82,18,17,0,38,25,18,7,1,26,0,0,1,27,0,0,135,24,19,0,25,0,26,27,82,19,2,0,1,24,0,0,13,20,19,24,121,20,3,0,1,1,255,255,119,0,4,0,1,22,3,0,119,0,2,0,1,22,3,0,32,24,22,3,121,24,28,0,25,21,0,4,82,4,21,0,25,5,0,8,82,6,5,0,16,7,4,6,121,7,10,0,25,8,0,40,82,9,8,0,0,10,4,0,0,11,6,0,4,12,10,11,38,25,9,7,1,27,1,0,135,24,19,0,25,0,12,27,25,13,0,16,1,24,0,0,85,13,24,0,1,24,0,0,85,14,24,0,1,24,0,0,85,2,24,0,1,24,0,0,85,5,24,0,1,24,0,0,85,21,24,0,1,1,0,0,139,1,0,0,140,1,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,0,17,20,0,1,21,16,0,135,1,3,0,21,0,0,0,85,0,1,0,1,21,0,0,13,2,1,21,121,2,21,0,1,21,20,0,82,9,21,0,134,10,0,0,28,21,1,0,82,11,10,0,134,12,0,0,108,225,0,0,11,0,0,0,82,13,10,0,85,17,12,0,25,18,17,4,85,18,13,0,1,22,85,15,134,21,0,0,44,22,1,0,9,22,17,0,1,22,1,0,135,21,25,0,22,0,0,0,119,0,23,0,1,21,141,15,85,1,21,0,25,14,1,4,1,21,149,15,85,14,21,0,82,15,0,0,25,16,15,8,1,21,152,15,85,16,21,0,82,3,0,0,25,4,3,12,1,21,0,0,85,4,21,0,82,5,0,0,25,6,5,8,25,7,0,4,85,7,6,0,25,8,0,8,1,21,141,15,85,8,21,0,137,20,0,0,139,0,0,0,139,0,0,0,140,2,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,127,21,0,0,87,21,0,0,127,21,0,0,82,4,21,0,127,21,0,0,106,5,21,4,1,21,52,0,135,10,2,0,4,5,21,0,128,21,0,0,0,11,21,0,1,21,255,7,19,21,10,21,0,12,21,0,1,21,0,0,1,22,0,8,138,12,21,22,196,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0,120,5,1,0], eb + 51200);
  HEAPU8.seteb + 61440);
  HEAPU8.set([82,2,1,0,32,3,2,0,121,3,4,0,134,6,0,0,232,25,1,0,0,0,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,25,1,0,68,82,2,1,0,32,3,2,0,121,3,4,0,134,6,0,0,232,25,1,0,0,0,0,0,139,0,0,0,140,2,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,135,2,4,0,0,0,0,0,25,3,2,1,134,4,0,0,16,18,1,0,0,1,3,0,139,4,0,0,140,2,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,135,2,4,0,0,0,0,0,1,7,1,0,134,3,0,0,192,12,1,0,0,2,7,1,26,4,3,1,139,4,0,0,140,3,7,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,2,6,0,0,255,255,255,127,134,3,0,0,28,217,0,0,0,6,1,2,139,3,0,0,140,4,6,0,0,0,0,0,1,5,0,0,134,4,0,0,192,173,0,0,0,1,2,3,5,0,0,0,139,4,0,0,140,4,8,0,0,0,0,0,3,4,0,2,3,6,1,3,16,7,4,0,3,5,6,7,129,5,0,0,139,4,0,0,140,1,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,136,0,82,1,5,0,134,2,0,0,44,213,0,0,0,1,0,0,139,2,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,1,4,255,255,1,5,0,0,134,1,0,0,200,14,1,0,4,0,5,0,139,1,0,0,140,2,5,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,135,4,25,0,0,0,0,0,139,0,0,0,140,2,2,0,0,0,0,0,137,0,0,0,132,1,0,1,139,0,0,0,140,2,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,2,0,0,32,229,0,0,0,1,0,0,139,2,0,0,140,1,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,139,0,0,0,140,1,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,139,0,0,0,140,1,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,0,0,139,3,0,0,140,1,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,1,0,135,3,36,0,4,0,0,0,1,3,0,0,139,3,0,0,140,0,3,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,139,0,0,0,140,0,3,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,0,0,135,1,36,0,2,0,0,0,1,1,0,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,2,0,135,1,36,0,2,0,0,0,139,0,0,0,140,0,1,0,0,0,0,0,1,0,0,0,139,0,0,0,0,0,0,0], eb + 71680);

  var relocations = [];
  relocations = relocations.concat([364,368,372,376,380,384,388,392,396,400,404,408,412,416,420,424,428,432,436,440,444,448,452,456,460,464,468,472,476,480,484,488,492,496,500,504,508,512,796,1948,2928,3104,3396,3460,3660,3664,3668,3672,3676,3680,3684,3688,3692,3696,3700,3704,3708,3712,3716,3720,3724,3728,3732,3736,3740,3744,3748,3752,3756,3760,3764,3768,3772,3776,3780,3784,3788,3792,3796,3800,3804,3808,3812,3816,3820,3824,3828,3832,3836,3840,3844,3848,3852,3856,3860,3864,3868,3872,3876,3880,5316,6704,7332,7996,8328,8500,8928,9292,9468,9700,11384,11456,11548,11664,11852,11928,12320,12696,13612,13616,13620,13624,13628,13632,13636,13640,15336,16888,16900,17408,17664,17668,17672,17676,17680,17684,17688,17692,17696,17700,17704,17708,17712,17716,17720,17724,17728,17732,17736,17740,17744,17748,17752,17756,17760,17764,17768,17772,17776,17780,17784,17788,17792,17796,17800,17804,17808,17812,17816,17820,17824,17828,17832,17836,17840,17844,17848,17852,17856,17860,17864,17868,17872,17876,17880,17884,17888,17892,17896,17900,17904,17908,17912,17916,17920,17924,17928,17932,17936,17940,17944,17948,17952,17956,17960,17964,17968,17972,17976,17980,17984,17988,17992,17996,18000,18004,18008,18012,18016,18020,18024,18028,18032,18036,18040,18044,18048,18052,18056,18060,18064,18068,18072,18076,18080,18084,18088,18092,18096,18100,18104,18108,18112,18116,18120,18124,18128,18132,18136,18140,22312,22576,22768,22824,22984,23028,23224,23504,24076,24236,24376,24580,24584,24588,24592,24596,24600,24604,24608,24612,24616,24620,24624,24628,24632,24636,24640,24644,24648,24652,24656,24660,24664,24668,24672,24676,24680,24684,24688,24692,24696,24700,24704,24708,24712,24716,24720,24724,24844,24848,24852,24856,24860,24864,24868,24872,24876,24880,24884,24888,24892,24896,24900,24904,24908,24912,24916,24920,24924,24928,24932,24936,24940,24944,24948,24952,24956,24960,24964,24968,24972,24976,24980,24984,24988,24992,24996,25000,25004,25008,25012,25016,25020,25024,25028,25032,25036,25040,25044,25168,25172,25176,25180,25184,25188,25192,25196,25200,25204,25208,25212,25216,25220,25224,25228,25232,25236,25240,25244,25248,25252,25256,25260,25264,25268,25272,25276,25280,25284,25288,25292,25296,25300,25304,25308,25376,25460,25548,25648,26020,26436,26752,26896,26900,26904,26908,26912,26916,26920,26924,26928,26932,26936,26940,26944,26948,26952,26956,26960,26964,26968,26972,26976,26980,26984,26988,26992,26996,27000,27004,27008,27012,27016,27020,27024,27028,27032,27036,27120,27184,27224,27228,27232,27236,27284,27364,27368,27372,27376,27380,27384,27388,27392,27396,27400,27404,27408,27412,27416,27420,27424,27428,27432,27436,27440,27444,27448,27452,27456,27796,27800,27804,27808,27812,27816,27820,27824,27828,27832,27836,27840,27844,27848,27852,27856,27860,27864,27868,27872,27876,27880,27884,27888,27960,27964,27968,27972,27976,27980,27984,27988,27992,27996,28000,28004,28008,28012,28016,28020,28024,28028,28032,28036,28040,28044,28048,28052,28056,28060,28064,28068,28072,28076,28080,28084,28088,28236,28240,28244,28248,28252,28256,28260,28264,28268,28272,28276,28280,28284,28288,28292,28296,28300,28304,28308,28312,28316,28320,28324,28328,28332,28336,28340,28344,28348,28352,28356,28360,28364,28368,28372,28376,28380,28384,28388,28392,28396,28400,28404,28408,28412,28416,28420,28424,28428,28432,28436,29824,29928,30336,30376,30472,30752,30768,30888,30952,30968,31096,31144,31188,31404,31460,31992,32224,32516,32860,33584,34524,34704,34788,35608,35628,35724,35756,35764,35780,35792,35864,35880,35896,35944,35964,35980,36032,36064,36096,36132,36148,36164,36196,36232,36304,36320,36396,36404,36448,36472,36528,36572,36680,36752,36792,36800,36820,36832,36896,36912,36932,36984,37008,37028,37088,37120,37152,37192,37212,37232,37264,37296,37360,37380,37448,37456,37504,37516,37768,38344,38388,39544,39548,42020,42024,42028,42032,42036,42040,42044,42048,42052,42056,46752,51932,54336,54340,54344,54348,54352,54356,54360,54364,54368,54372,54376,54380,54384,54388,54392,54396,54400,54404,54408,54412,54416,54420,54424,55020,55024,55028,55656,58744,58748,58752,58756,58760,58764,58768,58772,58776,58780,58784,58788,58792,58796,58800,58804,58808,58812,58816,58820,58824,58828,58832,58836,58840,58844,58848,58852,58856,58860,58864,58868,58872,58876,58880,58884,58888,58892,58896,58900,58904,58908,58912,58916,58920,58924,58928,58932,58936,58940,58944,58948,58952,58956,58960,58964,58968,58972,58976,58980,58984,58988,58992,58996,59000,59004,59008,59012,59016,59020,59024,59028,59032,59036,59040,59044,59048,59052,59056,59060,59064,59068,59072,59076,59080,59084,59088,59092,59096,59100,59104,59108,59112,59116,59120,59124,59128,59132,59136,59140,59144,59148,59152,59156,59160,59164,59168,59172,59176,59180,59184,59188,59192,59196,59200,59204,59208,59212,59216,59220,59224,59228,59232,59236,59240,59244,59248,59252,59256,59260,59264,59268,59272,59276,59280,59284,59288,59292,59296,59300,59304,59308,59312,59316,59320,59324,59328,59332,59336,59340,59344,59348,59352,59356,59360,59364,59368,59372,59376,59380,59384,59388,59392,59396,59400,59404,59408,59412,59416,59420,59424,59428,59432,59436,59440,59444,59448,59452,59456,59460,59464,59468,59472,59476,59480,59484,59488,59492,59496,59500,59504,59508,59512,59516,59520,59524,59528,59532,59536,59540,59544,59548,59552,59556,59560,59564,59568,59572,59576,59580,59584,59588,59592,59596,59600,59604,59608,59612,59616,59620,59624,59628,59632,59636,59640,59644,59648,59652,59656,59660,59664,59668,59672,59676,59680,59684,59688,59692,59696,59700,59704,59708,59712,59716,59720,59724,59728,59732,59736,59740,59744,59748,59752,59756,59760,59764,59768,59772,59776,59780,59784,59788,59792,59796,59800,59804,59808,59812,59816,59820,59824,59828,59832,59836,59840,59844,59848,59852,59856,59860,59864,59868,59872,59876,59880,59884,59888,59892,59896,59900,59904,59908,59912,59916,59920,59924,59928,59932,59936,59940,59944,59948,59952,59956,59960,59964,59968,59972,59976,59980,59984,59988,59992,59996,60000,60004,60008,60012,60016,60020,60024,60028,60032,60036,60040,60044,60048,60052,60056,60060,60064,60068,60072,60076,60080,60084,60088,60092,60096,60100,60104,60108,60112,60116,60120,60124,60128,60132,60136,60140,60144,60148,60152,60156,60160,60164,60168,60172,60176,60180,60184,60188,60192,60196,60200,60204,60208,60212,60216,60220,60224,60228,60232,60236,60240,60244,60248,60252,60256,60260,60264,60268,60272,60276,60280,60284,60288,60292,60296,60300,60304,60308,60312,60316,60320,60324,60328,60332,60336,60340,60344,60348,60352,60356,60360,60364,60368,60372,60376,60380,60384,60388,60392,60396,60400,60404,60408,60412,60416,60420,60424,60428,60432,60436,60440,60444,60448,60452,60456,60460,60464,60468,60472,60476,60480,60484,60488,60492,60496,60500,60504,60508,60512,60516,60520,60524,60528,60532,60536,60540,60544,60548,60552,60556,60560,60564,60568,60572,60576,60580,60584,60588,60592,60596,60600,60604,60608,60612,60616,60620,60624,60628,60632,60636,60640,60644,60648,60652,60656,60660,60664,60668,60672,60676,60680,60684,60688,60692,60696,60700,60704,60708,60712,60716,60720,60724,60728,60732,60736,60740,60744,60748,60752,60756,60760,60764,60768,60772,60776,60780,60784,60788,60792,60796,60800,60804,60808,60812,60816,60820,60824,60828,60832,60836,60840,60844,60848,60852,60856,60860,60864,60868,60872,60876,60880,60884,60888,60892,60896,60900,60904,60908,60912,60916,60920,60924,60928,60932,60936,60940,60944,60948,60952,60956,60960,60964,60968,60972,60976,60980,60984,60988,60992,60996,61000,61004,61008,61012,61016,61020,61024,61028,61032,61036,61040,61044,61048,61052,61056,61060,61064,61068,61072,61076,61080,61084,61088,61092,61096,61100,61104,61108,61112,61116,61120,61124,61128,61132,61136,61140,61144,61148,61152,61156,61160,61164,61168,61172,61176,61180,61184,61188,61192,61196,61200,61204,61208,61212,61216,61220,61224,61228,61232,61236,61240,61244,61248,61252,61256,61260,61264,61268,61272,61276,61280,61284,61288,61292,61296,61300,61304,61308,61312,61316,61320,61324,61328,61332,61336,61340,61344,61348,61352,61356,61360,61364,61368,61372,61376,61380,61384,61388,61392,61396,61400,61404,61408,61412,61416,61420,61424,61428,61432,61436,61440,61444,61448,61452,61456,61460,61464,61468,61472,61476,61480,61484,61488,61492,61496,61500,61504,61508,61512,61516,61520,61524,61528,61532,61536,61540,61544,61548,61552,61556,61560,61564,61568,61572,61576,61580,61584,61588,61592,61596,61600,61604,61608,61612,61616,61620,61624,61628,61632,61636,61640,61644,61648,61652,61656,61660,61664,61668,61672,61676,61680,61684,61688,61692,61696,61700,61704,61708,61712,61716,61720,61724,61728,61732,61736,61740,61744,61748,61752,61756,61760,61764,61768,61772,61776,61780,61784,61788,61792,61796,61800,61804,61808,61812,61816,61820,61824,61828,61832,61836,61840,61844,61848,61852,61856,61860,61864,61868,61872,61876,61880,61884,61888,61892,61896,61900,61904,61908,61912,61916,61920,61924,61928,61932,61936,61940,61944,61948,61952,61956,61960,61964,61968,61972,61976,61980,61984,61988,61992,61996,62000,62004,62008,62012,62016,62020,62024,62028,62032,62036,62040,62044,62048,62052,62056,62060,62064,62068,62072,62076,62080,62084,62088,62092,62096,62100,62104,62108,62112,62116,62120,62124,62128,62132,62136,62140,62144,62148,62152,62156,62160,62164,62168,62172,62176,62180,62184,62188,62192,62196,62200,62204,62208,62212,62216,62220,62224,62228,62232,62236,62240,62244,62248,62252,62256,62260,62264,62268,62272,62276,62280,62284,62288,62292,62296,62300,62304,62308,62312,62316,62320,62324,62328,62332,62336,62340,62344,62348,62352,62356,62360,62364,62368,62372,62376,62380,62384,62388,62392,62396,62400,62404,62408,62412,62416,62420,62424,62428,62432,62436,62440,62444,62448,62452,62456,62460,62464,62468,62472,62476,62480,62484,62488,62492,62496,62500,62504,62508,62512,62516,62520,62524,62528,62532,62536,62540,62544,62548,62552,62556,62560,62564,62568,62572,62576,62580,62584,62588,62592,62596,62600,62604,62608,62612,62616,62620,62624,62628,62632,62636,62640,62644,62648,62652,62656,62660,62664,62668,62672,62676,62680,62684,62688,62692,62696,62700,62704,62708,62712,62716,62720,62724,62728,62732,62736,62740,62744,62748,62752,62756,62760,62764,62768,62772,62776,62780,62784,62788,62792,62796,62800,62804,62808,62812,62816,62820,62824,62828,62832,62836,62840,62844,62848,62852,62856,62860,62864,62868,62872,62876,62880,62884,62888,62892,62896,62900,62904,62908,62912,62916,62920,62924,62928,62932,62936,62940,62944,62948,62952,62956,62960,62964,62968,62972,62976,62980,62984,62988,62992,62996,63000,63004,63008,63012,63016,63020,63024,63028,63032,63036,63040,63044,63048,63052,63056,63060,63064,63068,63072,63076,63080,63084,63088,63092,63096,63100,63104,63108,63112,63116,63120,63124,63128,63132,63136,63140,63144,63148,63152,63156,63160,63164,63168,63172,63176,63180,63184,63188,63192,63196,63200,63204,63208,63212,63216,63220,63224,63228,63232,63236,63240,63244,63248,63252,63256,63260,63264,63268,63272,63276,63280,63284,63288,63292,63296,63300,63304,63308,63312,63316,63320,63324,63328,63332,63336,63340,63344,63348,63352,63356,63360,63364,63368,63372,63376,63380,63384,63388,63392,63396,63400,63404,63408,63412,63416,63420,63424,63428,63432,63436,63440,63444,63448,63452,63456,63460,63464,63468,63472,63476,63480,63484,63488,63492,63496,63500,63504,63508,63512,63516,63520,63524,63528,63532,63536,63540,63544,63548,63552,63556,63560,63564,63568,63572,63576,63580,63584,63588,63592,63596,63600,63604,63608,63612,63616,63620,63624,63628,63632,63636,63640,63644,63648,63652,63656,63660,63664,63668,63672,63676,63680,63684,63688,63692,63696,63700,63704,63708,63712,63716,63720,63724,63728,63732,63736,63740,63744,63748,63752,63756,63760,63764,63768,63772,63776,63780,63784,63788,63792,63796,63800,63804,63808,63812,63816,63820,63824,63828,63832,63836,63840,63844,63848,63852,63856,63860,63864,63868,63872,63876,63880,63884,63888,63892,63896,63900,63904,63908,63912,63916,63920,63924,63928,63932,63936,63940,63944,63948,63952,63956,63960,63964,63968,63972,63976,63980,63984,63988,63992,63996,64000,64004,64008,64012,64016,64020,64024,64028,64032,64036,64040,64044,64048,64052,64056,64060,64064,64068,64072,64076,64080,64084,64088,64092,64096,64100,64104,64108,64112,64116,64120,64124,64128,64132,64136,64140,64144,64148,64152,64156,64160,64164,64168,64172,64176,64180,64184,64188,64192,64196,64200,64204,64208,64212,64216,64220,64224,64228,64232,64236,64240,64244,64248,64252,64256,64260,64264,64268,64272,64276,64280,64284,64288,64292,64296,64300,64304,64308,64312,64316,64320,64324,64328,64332,64336,64340,64344,64348,64352,64356,64360,64364,64368,64372,64376,64380,64384,64388,64392,64396,64400,64404,64408,64412,64416,64420,64424,64428,64432,64436,64440,64444,64448,64452,64456,64460,64464,64468,64472,64476,64480,64484,64488,64492,64496,64500,64504,64508,64512,64516,64520,64524,64528,64532,64536,64540,64544,64548,64552,64556,64560,64564,64568,64572,64576,64580,64584,64588,64592,64596,64600,64604,64608,64612,64616,64620,64624,64628,64632,64636,64640,64644,64648,64652,64656,64660,64664,64668,64672,64676,64680,64684,64688,64692,64696,64700,64704,64708,64712,64716,64720,64724,64728,64732,64736,64740,64744,64748,64752,64756,64760,64764,64768,64772,64776,64780,64784,64788,64792,64796,64800,64804,64808,64812,64816,64820,64824,64828,64832,64836,64840,64844,64848,64852,64856,64860,64864,64868,64872,64876,64880,64884,64888,64892,64896,64900,64904,64908,64912,64916,64920,64924,64928,64932,64936,64940,64944,64948,64952,64956,64960,64964,64968,64972,64976,64980,64984,64988,64992,64996,65000,65004,65008,65012,65016,65020,65024,65028,65032,65036,65040,65044,65048,65052,65056,65060,65064,65068,65072,65076,65080,65084,65088,65092,65096,65100,65104,65108,65112,65116,65120,65124,65128,65132,65136,65140,65144,65148,65152,65156,65160,65164,65168,65172,65176,65180,65184,65188,65192,65196,65200,65204,65208,65212,65216,65220,65224,65228,65232,65236,65240,65244,65248,65252,65256,65260,65264,65268,65272,65276,65280,65284,65288,65292,65296,65300,65304,65308,65312,65316,65320,65324,65328,65332,65336,65340,65344,65348,65352,65356,65360,65364,65368,65372,65376,65380,65384,65388,65392,65396,65400,65404,65408,65412,65416,65420,65424,65428,65432,65436,65440,65444,65448,65452,65456,65460,65464,65468,65472,65476,65480,65484,65488,65492,65496,65500,65504,65508,65512,65516,65520,65524,65528,65532,65536,65540,65544,65548,65552,65556,65560,65564,65568,65572,65576,65580,65584,65588,65592,65596,65600,65604,65608,65612,65616,65620,65624,65628,65632,65636,65640,65644,65648,65652,65656,65660,65664,65668,65672,65676,65680,65684,65688,65692,65696,65700,65704,65708,65712,65716,65720,65724,65728,65732,65736,65740,65744,65748,65752,65756,65760,65764,65768,65772,65776,65780,65784,65788,65792,65796,65800,65804,65808,65812,65816,65820,65824,65828,65832,65836,65840,65844,65848,65852,65856,65860,65864,65868,65872,65876,65880,65884,65888,65892,65896,65900,65904,65908,65912,65916,65920,65924,65928,65932,65936,65940,65944,65948,65952,65956,65960,65964,65968,65972,65976,65980,65984,65988,65992,65996,66000,66004,66008,66012,66016,66020,66024,66028,66032,66036,66040,66044,66048,66052,66056,66060,66064,66068,66072,66076,66080,66084,66088,66092,66096,66100,66104,66108,66112,66116,66120,66124,66128,66132,66136,66140,66144,66148,66152,66156,66160,66164,66168,66172,66176,66180,66184,66188,66192,66196,66200,66204,66208,66212,66216,66220,66224,66228,66232,66236,66240,66244,66248,66252,66256,66260,66264,66268,66272,66276,66280,66284,66288,66292,66296,66300,66304,66308,66312,66316,66320,66324,66328,66332,66336,66340,66344,66348,66352,66356,66360,66364,66368,66372,66376,66380,66384,66388,66392,66396,66400,66404,66408,66412,66416,66420,66424,66428,66432,66436,66440,66444,66448,66452,66456,66460,66464,66468,66472,66476,66480,66484,66488,66492,66496,66500,66504,66508,66512,66516,66520,66524,66528,66532,66536,66540,66544,66548,66552,66556,66560,66564,66568,66572,66576,66580,66584,66588,66592,66596,66600,66604,66608,66612,66616,66620,66624,66628,66632,66636,66640,66644,66648,66652,66656,66660,66664,66668,66672,66676,66680,66684,66688,66692,66696,66700,66704,66708,66712,66716,66720,66724,66728,66732,66736,66740,66744,66748,66752,66756,66760,66764,66768,66772,66776,66780,66784,66788,66792,66796,66800,66804,66808,66812,66816,66820,66824,66828,66832,66836,66840,66844,66848,66852,66856,66860,66864,66868,66872,66876,66880,66884,66888,66892,66896,66900,66904,66908,66912,66916,66920,66924,66928,66932,208,828,3424,4092,4304,4780,5280,5948,5996,6044,6104,6164,6220,6264,6916,6956,7008,10836,11160,11208,11248,11340,11636,11732,11824,12044,12184,12300,12444,12540,12832,12968,13040,13076,13272,13312,13376,13416,13556,13568,15168,15280,15540,15716,15844,15928,16040,16576,16624,16676,16712,16768,16816,17016,17392,17564,17644,18696,18732,19340,19780,20548,22220,22256,22392,22428,22448,22476,22504,22516,22588,22616,22644,22728,22748,22800,22832,22860,22944,22964,23004,23036,23064,23148,23168,23236,23256,24040,24084,24112,24180,24200,24220,24244,24256,24320,24340,24360,24484,25108,25360,25444,25532,25632,25752,25772,25784,25848,25868,25920,25940,25968,25988,26028,26040,26088,26108,26232,26244,26304,26324,26552,26736,26816,27104,28536,28604,28664,28712,28760,28808,28876,28944,29224,29268,29364,29492,29512,29592,29612,29644,29664,29696,29716,29780,29800,29884,29904,30004,30024,30036,30056,30068,30148,30168,30180,30272,30320,30436,30512,30588,30736,30860,30924,31060,31168,31280,31376,31440,31504,31604,31628,31756,31820,31968,32004,32020,32068,32132,32248,32292,32572,32748,33340,33480,33816,33852,34032,34376,34532,34560,34660,34680,34744,34764,34828,34852,35012,35336,35408,35436,38752,38800,38836,38892,38960,38984,38996,39028,39044,39132,39172,39200,39212,39252,39268,39324,39356,39368,39404,39420,39436,39452,39464,39476,39496,39560,39584,39616,39628,39660,39676,39720,39732,39760,39772,39812,39828,39844,39864,39896,39908,39948,39964,39980,40016,40040,40072,40084,40124,40140,40188,40208,40560,41936,43328,43340,43380,43400,43412,43636,43960,44028,44040,44084,44104,44164,44188,44200,44244,44264,44460,44788,45396,45520,45628,45752,46132,46196,46652,46676,46764,46824,47516,47616,47848,47936,48736,48824,48924,49072,49284,49360,49392,49416,49552,49588,49664,49684,49796,49836,49864,50712,50832,50968,50984,51036,51080,51100,51128,51152,51204,51268,51308,51348,51364,51572,51648,51952,52004,52140,52272,52340,52908,53752,53856,53936,53984,54024,54112,54132,54148,54172,54256,54448,54552,54628,54764,54780,54892,54952,55316,55368,55708,55820,56332,56432,56528,56764,56912,57056,57112,57428,57512,57536,57560,57624,57652,58496,58508,58540,67040,67152,67176,67280,67320,67388,67400,67424,67468,67488,67568,67596,67716,67792,67852,67896,68572,68784,68848,68864,68888,68908,69072,69112,69132,69208,69404,69464,69616,69676,69700,69732,69756,70104,70132,70420,70472,70576,70776,70848,70992,71068,71136,71196,71256,71320,71340,71396,71444,71552,71696,71748,71796,71844,71892,71920,72000,72044,72132]);

  for (var i = 0; i < relocations.length; i++) {
    //assert(relocations[i] % 4 === 0);
    //assert(relocations[i] >= 0 && relocations[i] < eb + 72392); // in range
    //assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        if (ENVIRONMENT_IS_BROWSIX) {
          Module["noFSInit"] = true;
          return;
        }
  
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        var argArray = [arg];
        browserIterationFunc = function() {
          Runtime.dynCall('vi', func, argArray);
        };
      } else {
        browserIterationFunc = function() {
          Runtime.dynCall('v', func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:function () {
        if (this.initted) return;
        this.initted = true;
      },setState:function (s) {
        this.ensureInit();
        this.state = s;
        asm.setAsyncState(s);
      },resumeFromFork:function resume(pc, post) {
        EmterpreterAsync.setState(2);
        EmterpreterAsync.postAsync = post || null;
        asm.emterpret(pc); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
        if (EmterpreterAsync.state === 0) {
          // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
          Browser.resumeAsyncCallbacks();
        }
        if (EmterpreterAsync.state === 0) {
          EmterpreterAsync.asyncFinalizers.forEach(function(func) {
            func();
          });
          EmterpreterAsync.asyncFinalizers.length = 0;
        }
      },handle:function (doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, asm.emtStackSave()>>2));
          var stacktop = asm.stackSave();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            asm.emterpret(stack[0]); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              EmterpreterAsync.asyncFinalizers.forEach(function(func) {
                func();
              });
              EmterpreterAsync.asyncFinalizers.length = 0;
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};
  
  var _fflush=undefined;
  Module["_fflush"] = _fflush;
  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        // ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        // ENV['PATH'] = '/';
        // ENV['PWD'] = '/';
        // ENV['HOME'] = '/home/web_user';
        // ENV['LANG'] = 'C';
        // ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_NORMAL);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_NORMAL);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      },browsix:{async:true,waitOff:-1,syncMsg:{trap:0,args:[0,0,0,0,0,0]},SyscallResponseFrom:function (ev) {
          var requiredOnData = ['id', 'name', 'args'];
          if (!ev.data)
            return;
          for (var i = 0; i < requiredOnData.length; i++) {
            if (!ev.data.hasOwnProperty(requiredOnData[i]))
              return;
          }
          var args = ev.data.args; //.map(convertApiErrors);
          return {id: ev.data.id, name: ev.data.name, args: args};
        },syscall:{msgIdSeq:1,outstanding:{},signalHandlers:{init:[function init1(data) {
          // 0: args
          // 1: environ
          // 2: debug flag
          // 3: pid (if fork)
          // 4: heap (if fork)
          // 5: fork args (if fork)
  
          var args = data.args[0];
          var environ = data.args[1];
          // args[4] is a copy of the heap - replace anything we just
          // alloc'd with it.
          if (data.args[4]) {
            var pid = data.args[3];
            var heap = data.args[4];
            var forkArgs = data.args[5];
  
            Runtime.process.parentBuffer = heap;
            Runtime.process.pid = pid;
            Runtime.process.forkArgs = forkArgs;
  
            updateGlobalBuffer(Runtime.process.parentBuffer);
            updateGlobalBufferViews();
  
            assert(HEAP32.buffer === Runtime.process.parentBuffer);
  
            asm.stackRestore(forkArgs.stackSave);
            asm.emtStackRestore(forkArgs.emtStackTop);
          }
  
          args = [args[0]].concat(args);
  
          Runtime.process.argv = args;
          Runtime.process.env = environ;
  
          SYSCALLS.browsix.async = true;
          setTimeout(function () { Runtime.process.emit('ready'); }, 0);
        }]},syscallAsync:function (cb, name, args, transferrables) {
            var msgId = this.nextMsgId();
            this.outstanding[msgId] = cb;
            self.postMessage({
              id: msgId,
              name: name,
              args: args,
            }, transferrables);
          },sync:function (trap, a1, a2, a3, a4, a5, a6) {
            var waitOff = SYSCALLS.browsix.waitOff;
            var syncMsg = SYSCALLS.browsix.syncMsg;
            syncMsg.trap = trap|0;
            syncMsg.args[0] = a1|0;
            syncMsg.args[1] = a2|0;
            syncMsg.args[2] = a3|0;
            syncMsg.args[3] = a4|0;
            syncMsg.args[4] = a5|0;
            syncMsg.args[5] = a6|0;
  
            Atomics.store(HEAP32, waitOff >> 2, 0);
            self.postMessage(syncMsg);
            var paranoid = Atomics.load(HEAP32, waitOff >> 2)|0;
            if (paranoid !== 1 && paranoid !== 0) {
              Module.printErr('WARN: someone wrote over our futex alloc(' + waitOff + '): ' + paranoid);
              debugger;
            }
            Atomics.wait(HEAP32, waitOff >> 2, 0);
            Atomics.store(HEAP32, waitOff >> 2, 0);
            return Atomics.load(HEAP32, (waitOff >> 2) + 1);
          },exit:function (code) {
            // FIXME: this will only work in sync mode.
            Module['_fflush'](0);
            if (SYSCALLS.browsix.async) {
              this.syscallAsync(null, 'exit', [code]);
            } else {
              this.sync(252 /* SYS_exit_group */, code);
            }
            close();
          },addEventListener:function (type, handler) {
            if (!handler)
              return;
            if (this.signalHandlers[type])
              this.signalHandlers[type].push(handler);
            else
              this.signalHandlers[type] = [handler];
          },resultHandler:function (ev) {
            var response = SYSCALLS.browsix.SyscallResponseFrom(ev);
            if (!response) {
              console.log('bad usyscall message, dropping');
              console.log(ev);
              return;
            }
            if (response.name) {
              var handlers = this.signalHandlers[response.name];
              if (handlers) {
                for (var i = 0; i < handlers.length; i++)
                  handlers[i](response);
              }
              else {
                console.log('unhandled signal ' + response.name);
              }
              return;
            }
            this.complete(response.id, response.args);
          },complete:function (id, args) {
            var cb = this.outstanding[id];
            delete this.outstanding[id];
            if (cb) {
              cb.apply(undefined, args);
            }
            else {
              console.log('unknown callback for msg ' + id + ' - ' + args);
            }
          },nextMsgId:function () {
            return ++this.msgIdSeq;
          }}}};function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd1 = SYSCALLS.get(), fd2 = SYSCALLS.get();
  
          var done = function(result) {
            resume(function() {
              return result|0;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'dup3', [fd1, fd2, 0]);
        });
      }
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var PROCINFO={ppid:1,pid:42,sid:42,pgid:42};function ___syscall20(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getpid
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var done = function(err, pid) {
            resume(function() {
              return err ? (err|0) : pid;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'getpid');
        });
      }
      return PROCINFO.pid;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function ___syscall114(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // wait4
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var pid = SYSCALLS.get(), wstatus = SYSCALLS.get(), options = SYSCALLS.get(), rusage = SYSCALLS.get();
  
          var done = function(ret, wstatusIn, rusageIn) {
            if (wstatus) {
              HEAP32[wstatus>>2] = wstatusIn;
            }
            if (rusageIn) {
              console.log('FIXME: wait4 rusage');
            }
  
            resume(function() {
              return ret;
            });
          };
          var sys_name = 'wait4';
          var args = [pid, options];
          SYSCALLS.browsix.syscall.syscallAsync(done, sys_name, args);
        });
      }
      abort('cannot wait on child processes');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd1 = SYSCALLS.get(), fd2 = SYSCALLS.get(), flags = SYSCALLS.get();
  
          var done = function(result) {
            resume(function() {
              return result|0;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'dup3', [fd1, fd2, flags]);
        });
      }
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -ERRNO_CODES.EINVAL;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall175(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rt_sigprocmask
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var how = SYSCALLS.get(), set = SYSCALLS.get(), oldset = SYSCALLS.get();
  
          resume(function() {
            return 0;
          });
  
          // var done = function(ret, oldset) {
          //   resume(function() {
          //     return ret;
          //   });
          // };
          // SYSCALLS.browsix.syscall.syscallAsync(done, 'sigprocmask', [how, set, oldset]);;
        });
      }
      //console.log('TODO: sigprocmask');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd = SYSCALLS.get(), op = SYSCALLS.get();
  
          var done = function(result) {
            resume(function() {
              return result|0;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'ioctl', [fd, op]);
        });
      }
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall11(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // execve
      if (ENVIRONMENT_IS_BROWSIX) {
        function strp(inp) {
          var ho = [HEAPU8,inp];
          var h = ho[0], ptr = ho[1];
  
          var i = 0;
          var t;
          while (true) {
            t = HEAPU8[(((ptr)+(i))>>0)];
            if (t === 0)
              break;
            i++;
          }
          return h.subarray(ptr, ptr+i);
        }
  
        // pulls a null-terimated array of strings out of memory, into an
        // array of Uint8Arrays.
        function arrp(inp) {
          var ho = [HEAPU32,inp];
          var h = ho[0], ptr = ho[1];
  
          var arr = []
          var i = 0;
          var t;
          while (true) {
            t = HEAPU32[(((ptr)+(i))>>2)];
            if (t === 0)
              break;
            arr.push(strp(t));
            i += 4;
          }
          return arr;
        }
  
        return EmterpreterAsync.handle(function(resume) {
          var filename_p = SYSCALLS.get(), argv = SYSCALLS.get(), envp = SYSCALLS.get();
  
          var filename = strp(filename_p);
          var args = arrp(argv);
          var env = arrp(envp);
  
          // exec can fail if the file is not there, or not executable.
          // If successful, this syscall won't complete.
          var done = function(err) {
            resume(function() {
              return err;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'execve', [filename, args, env]);
        });
      }
      abort('execve not supported without Browsix');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var pathname_p = SYSCALLS.get();
          var ho = [HEAPU8,pathname_p];
          var h = ho[0], ptr = ho[1];
  
          var i = 0;
          var t;
          while (true) {
            t = HEAPU8[(((ptr)+(i))>>0)];
            if (t === 0)
              break;
            i++;
          }
          var pathname = h.slice(ptr, ptr+i);
  
          var done = function(err) {
            resume(function() {
              return err;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'unlink', [pathname]);
        });
      }
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var pathname_p = SYSCALLS.get();
          var ho = [HEAPU8,pathname_p];
          var h = ho[0], ptr = ho[1];
  
          var i = 0;
          var t;
          while (true) {
            t = HEAPU8[(((ptr)+(i))>>0)];
            if (t === 0)
              break;
            i++;
          }
          var pathname = h.slice(ptr, ptr+i);
  
          var done = function(err) {
            resume(function() {
              return err;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'chdir', [pathname]);
        });
      }
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall2(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fork
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var pc = HEAP32[EMTSTACKTOP>>2];
  
          var args = {
            pc: HEAP32[EMTSTACKTOP>>2],
            stackSave: asm.stackSave(),
            emtStackTop: EMTSTACKTOP,
          }
  
          var done = function(ret) {
            resume(function() {
              return ret;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'fork', [HEAPU8.buffer, args]);
        });
      }
      abort('fork not supported without Browsix');
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var pathname_p = SYSCALLS.get(), flags = SYSCALLS.get(), mode = SYSCALLS.get();
          var ho = [HEAPU8,pathname_p];
          var h = ho[0], ptr = ho[1];
  
          var i = 0;
          var t;
          while (true) {
            t = HEAPU8[(((ptr)+(i))>>0)];
            if (t === 0)
              break;
            i++;
          }
          var pathname = h.slice(ptr, ptr+i);
  
          var done = function(err, fd) {
            resume(function() {
                return err ? err : fd;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'open', [pathname, flags, mode]);
      });
      }
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd = SYSCALLS.get();
          var done = function(err) {
            resume(function() {
              return err;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'close', [fd]);
        });
      }
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }
  
  
  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  
  function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
      writeStringToMemory(s, buf);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = Runtime.stackSave();
      var rv = _asctime_r(_localtime_r(time, Runtime.stackAlloc(44)), buf);
      Runtime.stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd = SYSCALLS.get(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
          assert(offset_high === 0);
  
          var done = function(err, off) {
            if (!err) {
              HEAP32[((result)>>2)]=off;
            }
            resume(function() {
              return err;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'llseek', [fd, offset_high, offset_low, whence]);
      });
      }
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
  
          var fd = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  
          bufs = [];
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov)+(i*8))>>2)];
            var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
            if (len === 0)
              continue;
            bufs.push(HEAPU8.subarray(ptr, ptr+len));
          }
  
          if (!bufs.length) {
            return resume(function() {
              console.log('readv early 0');
              return 0;
            });
          }
  
          var lenRead = 0;
  
          function readOne() {
            var buf = bufs.shift();
            var done = function(err, len, data) {
  
              if (!err) {
                lenRead += len;
                buf.set(data);
              }
  
              if (bufs.length) {
                readOne();
              } else {
                resume(function() {
                  return err ? err : lenRead;
                });
              }
            };
            SYSCALLS.browsix.syscall.syscallAsync(done, 'pread', [fd, buf.length, -1]);
          }
          readOne();
        });
      }
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
  
          var fd = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  
          bufs = [];
          for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov)+(i*8))>>2)];
            var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
            if (len === 0)
              continue;
            bufs.push(HEAPU8.slice(ptr, ptr+len));
          }
  
          if (!bufs.length) {
            return resume(function() {
              return 0;
            });
          }
  
          var written = 0;
  
          function writeOne() {
            var buf = bufs.shift();
            var done = function(err, len) {
              if (!err)
                written += len;
  
              if (bufs.length) {
                writeOne();
              } else {
                resume(function() {
                  return err ? err : written;
                });
              }
            };
            SYSCALLS.browsix.syscall.syscallAsync(done, 'pwrite', [fd, buf, -1]);
          }
          writeOne();
        });
      }
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd = SYSCALLS.get(), cmd = SYSCALLS.get();
          var arg = 0;
  
          // only some of the commands have multiple arguments.
          switch (cmd) {
          case 0:
          case 4:
          case 12:
          case 12:
            arg = SYSCALLS.get();
          }
  
          var done = function(err) {
            resume(function() {
              return err;
            });
          };
          return SYSCALLS.browsix.syscall.syscallAsync(done, 'fcntl64', [fd, cmd, arg]);
        });
      }
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall41(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup
      if (ENVIRONMENT_IS_BROWSIX) {
        return EmterpreterAsync.handle(function(resume) {
          var fd1 = SYSCALLS.get();
  
          var done = function(result) {
            resume(function() {
              return result|0;
            });
          };
          SYSCALLS.browsix.syscall.syscallAsync(done, 'dup', [fd1]);
        });
      }
      var old = SYSCALLS.getStreamFromFD();
      return FS.open(old.path, old.flags, 0).fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
if (!ENVIRONMENT_IS_BROWSIX) ___buildEnvironment(ENV);;
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);



function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "___syscall63": ___syscall63, "_ctime": _ctime, "___syscall41": ___syscall41, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_nanosleep": _nanosleep, "___syscall20": ___syscall20, "_usleep": _usleep, "___buildEnvironment": ___buildEnvironment, "_localtime_r": _localtime_r, "_tzset": _tzset, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "___syscall330": ___syscall330, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_cleanup_push": _pthread_cleanup_push, "__exit": __exit, "_mktime": _mktime, "___syscall175": ___syscall175, "_abort": _abort, "_asctime_r": _asctime_r, "___syscall114": ___syscall114, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall12": ___syscall12, "___syscall11": ___syscall11, "___syscall10": ___syscall10, "___syscall2": ___syscall2, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_gettimeofday": _gettimeofday, "_ctime_r": _ctime_r, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
Module.asmLibraryArg['EMTSTACKTOP'] = EMTSTACKTOP; Module.asmLibraryArg['EMT_STACK_MAX'] = EMT_STACK_MAX; Module.asmLibraryArg['eb'] = eb;
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var ___syscall63=env.___syscall63;
  var _ctime=env._ctime;
  var ___syscall41=env.___syscall41;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _nanosleep=env._nanosleep;
  var ___syscall20=env.___syscall20;
  var _usleep=env._usleep;
  var ___buildEnvironment=env.___buildEnvironment;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var ___syscall330=env.___syscall330;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var __exit=env.__exit;
  var _mktime=env._mktime;
  var ___syscall175=env.___syscall175;
  var _abort=env._abort;
  var _asctime_r=env._asctime_r;
  var ___syscall114=env.___syscall114;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall12=env.___syscall12;
  var ___syscall11=env.___syscall11;
  var ___syscall10=env.___syscall10;
  var ___syscall2=env.___syscall2;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _gettimeofday=env._gettimeofday;
  var _ctime_r=env._ctime_r;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;
  var asyncState = 0;


var EMTSTACKTOP = env.EMTSTACKTOP|0;
var EMT_STACK_MAX = env.EMT_STACK_MAX|0;
var eb = env.eb|0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0, $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $magic$i$i = sp;
 $0 = $bytes >>> 0 < 245;
 do {
  if ($0) {
   $1 = $bytes >>> 0 < 11;
   $2 = $bytes + 11 | 0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1773] | 0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8 | 0) == 0;
   if (!$9) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = $11 + $5 | 0;
    $13 = $12 << 1;
    $14 = 7132 + ($13 << 2) | 0;
    $15 = $14 + 8 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($14 | 0) == ($18 | 0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1773] = $22;
     } else {
      $23 = HEAP32[7108 >> 2] | 0;
      $24 = $18 >>> 0 < $23 >>> 0;
      if ($24) {
       _abort();
      }
      $25 = $18 + 12 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      $27 = ($26 | 0) == ($16 | 0);
      if ($27) {
       HEAP32[$25 >> 2] = $14;
       HEAP32[$15 >> 2] = $18;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = $16 + 4 | 0;
    HEAP32[$30 >> 2] = $29;
    $31 = $16 + $28 | 0;
    $32 = $31 + 4 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33 | 1;
    HEAP32[$32 >> 2] = $34;
    $$0 = $17;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $35 = HEAP32[7100 >> 2] | 0;
   $36 = $4 >>> 0 > $35 >>> 0;
   if ($36) {
    $37 = ($7 | 0) == 0;
    if (!$37) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = 0 - $39 | 0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = 0 - $42 | 0;
     $44 = $42 & $43;
     $45 = $44 + -1 | 0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = $63 + $64 | 0;
     $66 = $65 << 1;
     $67 = 7132 + ($66 << 2) | 0;
     $68 = $67 + 8 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     $70 = $69 + 8 | 0;
     $71 = HEAP32[$70 >> 2] | 0;
     $72 = ($67 | 0) == ($71 | 0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[1773] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[7108 >> 2] | 0;
       $77 = $71 >>> 0 < $76 >>> 0;
       if ($77) {
        _abort();
       }
       $78 = $71 + 12 | 0;
       $79 = HEAP32[$78 >> 2] | 0;
       $80 = ($79 | 0) == ($69 | 0);
       if ($80) {
        HEAP32[$78 >> 2] = $67;
        HEAP32[$68 >> 2] = $71;
        $$pre = HEAP32[7100 >> 2] | 0;
        $89 = $$pre;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $81 = $65 << 3;
     $82 = $81 - $4 | 0;
     $83 = $4 | 3;
     $84 = $69 + 4 | 0;
     HEAP32[$84 >> 2] = $83;
     $85 = $69 + $4 | 0;
     $86 = $82 | 1;
     $87 = $85 + 4 | 0;
     HEAP32[$87 >> 2] = $86;
     $88 = $85 + $82 | 0;
     HEAP32[$88 >> 2] = $82;
     $90 = ($89 | 0) == 0;
     if (!$90) {
      $91 = HEAP32[7112 >> 2] | 0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = 7132 + ($93 << 2) | 0;
      $95 = HEAP32[1773] | 0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97 | 0) == 0;
      if ($98) {
       $99 = $95 | $96;
       HEAP32[1773] = $99;
       $$pre71 = $94 + 8 | 0;
       $$pre$phiZ2D = $$pre71;
       $F4$0 = $94;
      } else {
       $100 = $94 + 8 | 0;
       $101 = HEAP32[$100 >> 2] | 0;
       $102 = HEAP32[7108 >> 2] | 0;
       $103 = $101 >>> 0 < $102 >>> 0;
       if ($103) {
        _abort();
       } else {
        $$pre$phiZ2D = $100;
        $F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $91;
      $104 = $F4$0 + 12 | 0;
      HEAP32[$104 >> 2] = $91;
      $105 = $91 + 8 | 0;
      HEAP32[$105 >> 2] = $F4$0;
      $106 = $91 + 12 | 0;
      HEAP32[$106 >> 2] = $94;
     }
     HEAP32[7100 >> 2] = $82;
     HEAP32[7112 >> 2] = $85;
     $$0 = $70;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $107 = HEAP32[7096 >> 2] | 0;
    $108 = ($107 | 0) == 0;
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = 0 - $107 | 0;
     $110 = $107 & $109;
     $111 = $110 + -1 | 0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = $129 + $130 | 0;
     $132 = 7396 + ($131 << 2) | 0;
     $133 = HEAP32[$132 >> 2] | 0;
     $134 = $133 + 4 | 0;
     $135 = HEAP32[$134 >> 2] | 0;
     $136 = $135 & -8;
     $137 = $136 - $4 | 0;
     $rsize$0$i = $137;
     $t$0$i = $133;
     $v$0$i = $133;
     while (1) {
      $138 = $t$0$i + 16 | 0;
      $139 = HEAP32[$138 >> 2] | 0;
      $140 = ($139 | 0) == (0 | 0);
      if ($140) {
       $141 = $t$0$i + 20 | 0;
       $142 = HEAP32[$141 >> 2] | 0;
       $143 = ($142 | 0) == (0 | 0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;
        $v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = $145 + 4 | 0;
      $146 = HEAP32[$144 >> 2] | 0;
      $147 = $146 & -8;
      $148 = $147 - $4 | 0;
      $149 = $148 >>> 0 < $rsize$0$i >>> 0;
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;
      $t$0$i = $145;
      $v$0$i = $$v$0$i;
     }
     $150 = HEAP32[7108 >> 2] | 0;
     $151 = $v$0$i$lcssa >>> 0 < $150 >>> 0;
     if ($151) {
      _abort();
     }
     $152 = $v$0$i$lcssa + $4 | 0;
     $153 = $v$0$i$lcssa >>> 0 < $152 >>> 0;
     if (!$153) {
      _abort();
     }
     $154 = $v$0$i$lcssa + 24 | 0;
     $155 = HEAP32[$154 >> 2] | 0;
     $156 = $v$0$i$lcssa + 12 | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     $158 = ($157 | 0) == ($v$0$i$lcssa | 0);
     do {
      if ($158) {
       $168 = $v$0$i$lcssa + 20 | 0;
       $169 = HEAP32[$168 >> 2] | 0;
       $170 = ($169 | 0) == (0 | 0);
       if ($170) {
        $171 = $v$0$i$lcssa + 16 | 0;
        $172 = HEAP32[$171 >> 2] | 0;
        $173 = ($172 | 0) == (0 | 0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;
         $RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;
        $RP$1$i = $168;
       }
       while (1) {
        $174 = $R$1$i + 20 | 0;
        $175 = HEAP32[$174 >> 2] | 0;
        $176 = ($175 | 0) == (0 | 0);
        if (!$176) {
         $R$1$i = $175;
         $RP$1$i = $174;
         continue;
        }
        $177 = $R$1$i + 16 | 0;
        $178 = HEAP32[$177 >> 2] | 0;
        $179 = ($178 | 0) == (0 | 0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;
         $RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;
         $RP$1$i = $177;
        }
       }
       $180 = $RP$1$i$lcssa >>> 0 < $150 >>> 0;
       if ($180) {
        _abort();
       } else {
        HEAP32[$RP$1$i$lcssa >> 2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = $v$0$i$lcssa + 8 | 0;
       $160 = HEAP32[$159 >> 2] | 0;
       $161 = $160 >>> 0 < $150 >>> 0;
       if ($161) {
        _abort();
       }
       $162 = $160 + 12 | 0;
       $163 = HEAP32[$162 >> 2] | 0;
       $164 = ($163 | 0) == ($v$0$i$lcssa | 0);
       if (!$164) {
        _abort();
       }
       $165 = $157 + 8 | 0;
       $166 = HEAP32[$165 >> 2] | 0;
       $167 = ($166 | 0) == ($v$0$i$lcssa | 0);
       if ($167) {
        HEAP32[$162 >> 2] = $157;
        HEAP32[$165 >> 2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $181 = ($155 | 0) == (0 | 0);
     do {
      if (!$181) {
       $182 = $v$0$i$lcssa + 28 | 0;
       $183 = HEAP32[$182 >> 2] | 0;
       $184 = 7396 + ($183 << 2) | 0;
       $185 = HEAP32[$184 >> 2] | 0;
       $186 = ($v$0$i$lcssa | 0) == ($185 | 0);
       if ($186) {
        HEAP32[$184 >> 2] = $R$3$i;
        $cond$i = ($R$3$i | 0) == (0 | 0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[7096 >> 2] | 0;
         $190 = $189 & $188;
         HEAP32[7096 >> 2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[7108 >> 2] | 0;
        $192 = $155 >>> 0 < $191 >>> 0;
        if ($192) {
         _abort();
        }
        $193 = $155 + 16 | 0;
        $194 = HEAP32[$193 >> 2] | 0;
        $195 = ($194 | 0) == ($v$0$i$lcssa | 0);
        if ($195) {
         HEAP32[$193 >> 2] = $R$3$i;
        } else {
         $196 = $155 + 20 | 0;
         HEAP32[$196 >> 2] = $R$3$i;
        }
        $197 = ($R$3$i | 0) == (0 | 0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[7108 >> 2] | 0;
       $199 = $R$3$i >>> 0 < $198 >>> 0;
       if ($199) {
        _abort();
       }
       $200 = $R$3$i + 24 | 0;
       HEAP32[$200 >> 2] = $155;
       $201 = $v$0$i$lcssa + 16 | 0;
       $202 = HEAP32[$201 >> 2] | 0;
       $203 = ($202 | 0) == (0 | 0);
       do {
        if (!$203) {
         $204 = $202 >>> 0 < $198 >>> 0;
         if ($204) {
          _abort();
         } else {
          $205 = $R$3$i + 16 | 0;
          HEAP32[$205 >> 2] = $202;
          $206 = $202 + 24 | 0;
          HEAP32[$206 >> 2] = $R$3$i;
          break;
         }
        }
       } while (0);
       $207 = $v$0$i$lcssa + 20 | 0;
       $208 = HEAP32[$207 >> 2] | 0;
       $209 = ($208 | 0) == (0 | 0);
       if (!$209) {
        $210 = HEAP32[7108 >> 2] | 0;
        $211 = $208 >>> 0 < $210 >>> 0;
        if ($211) {
         _abort();
        } else {
         $212 = $R$3$i + 20 | 0;
         HEAP32[$212 >> 2] = $208;
         $213 = $208 + 24 | 0;
         HEAP32[$213 >> 2] = $R$3$i;
         break;
        }
       }
      }
     } while (0);
     $214 = $rsize$0$i$lcssa >>> 0 < 16;
     if ($214) {
      $215 = $rsize$0$i$lcssa + $4 | 0;
      $216 = $215 | 3;
      $217 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$217 >> 2] = $216;
      $218 = $v$0$i$lcssa + $215 | 0;
      $219 = $218 + 4 | 0;
      $220 = HEAP32[$219 >> 2] | 0;
      $221 = $220 | 1;
      HEAP32[$219 >> 2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$223 >> 2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = $152 + 4 | 0;
      HEAP32[$225 >> 2] = $224;
      $226 = $152 + $rsize$0$i$lcssa | 0;
      HEAP32[$226 >> 2] = $rsize$0$i$lcssa;
      $227 = HEAP32[7100 >> 2] | 0;
      $228 = ($227 | 0) == 0;
      if (!$228) {
       $229 = HEAP32[7112 >> 2] | 0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = 7132 + ($231 << 2) | 0;
       $233 = HEAP32[1773] | 0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235 | 0) == 0;
       if ($236) {
        $237 = $233 | $234;
        HEAP32[1773] = $237;
        $$pre$i = $232 + 8 | 0;
        $$pre$phi$iZ2D = $$pre$i;
        $F1$0$i = $232;
       } else {
        $238 = $232 + 8 | 0;
        $239 = HEAP32[$238 >> 2] | 0;
        $240 = HEAP32[7108 >> 2] | 0;
        $241 = $239 >>> 0 < $240 >>> 0;
        if ($241) {
         _abort();
        } else {
         $$pre$phi$iZ2D = $238;
         $F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $229;
       $242 = $F1$0$i + 12 | 0;
       HEAP32[$242 >> 2] = $229;
       $243 = $229 + 8 | 0;
       HEAP32[$243 >> 2] = $F1$0$i;
       $244 = $229 + 12 | 0;
       HEAP32[$244 >> 2] = $232;
      }
      HEAP32[7100 >> 2] = $rsize$0$i$lcssa;
      HEAP32[7112 >> 2] = $152;
     }
     $245 = $v$0$i$lcssa + 8 | 0;
     $$0 = $245;
     STACKTOP = sp;
     return $$0 | 0;
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = $bytes >>> 0 > 4294967231;
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = $bytes + 11 | 0;
    $248 = $247 & -8;
    $249 = HEAP32[7096 >> 2] | 0;
    $250 = ($249 | 0) == 0;
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = 0 - $248 | 0;
     $252 = $247 >>> 8;
     $253 = ($252 | 0) == 0;
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = $248 >>> 0 > 16777215;
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = $252 + 1048320 | 0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = $258 + 520192 | 0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = $263 + 245760 | 0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = 14 - $267 | 0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = $268 + $270 | 0;
       $272 = $271 << 1;
       $273 = $271 + 7 | 0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = 7396 + ($idx$0$i << 2) | 0;
     $278 = HEAP32[$277 >> 2] | 0;
     $279 = ($278 | 0) == (0 | 0);
     L123 : do {
      if ($279) {
       $rsize$3$i = $251;
       $t$2$i = 0;
       $v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i | 0) == 31;
       $281 = $idx$0$i >>> 1;
       $282 = 25 - $281 | 0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;
       $rst$0$i = 0;
       $sizebits$0$i = $284;
       $t$0$i4 = $278;
       $v$0$i6 = 0;
       while (1) {
        $285 = $t$0$i4 + 4 | 0;
        $286 = HEAP32[$285 >> 2] | 0;
        $287 = $286 & -8;
        $288 = $287 - $248 | 0;
        $289 = $288 >>> 0 < $rsize$0$i5 >>> 0;
        if ($289) {
         $290 = ($287 | 0) == ($248 | 0);
         if ($290) {
          $rsize$412$i = $288;
          $t$411$i = $t$0$i4;
          $v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;
          $v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;
         $v$1$i = $v$0$i6;
        }
        $291 = $t$0$i4 + 20 | 0;
        $292 = HEAP32[$291 >> 2] | 0;
        $293 = $sizebits$0$i >>> 31;
        $294 = ($t$0$i4 + 16 | 0) + ($293 << 2) | 0;
        $295 = HEAP32[$294 >> 2] | 0;
        $296 = ($292 | 0) == (0 | 0);
        $297 = ($292 | 0) == ($295 | 0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295 | 0) == (0 | 0);
        $299 = $298 & 1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;
         $t$2$i = $rst$1$i;
         $v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $sizebits$0$$i;
         $t$0$i4 = $295;
         $v$0$i6 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      $301 = ($t$2$i | 0) == (0 | 0);
      $302 = ($v$3$i | 0) == (0 | 0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = 0 - $303 | 0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306 | 0) == 0;
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = 0 - $306 | 0;
       $309 = $306 & $308;
       $310 = $309 + -1 | 0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = $328 + $329 | 0;
       $331 = 7396 + ($330 << 2) | 0;
       $332 = HEAP32[$331 >> 2] | 0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i | 0) == (0 | 0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;
       $v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;
       $t$411$i = $t$4$ph$i;
       $v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0;
       $334 = $t$411$i + 4 | 0;
       $335 = HEAP32[$334 >> 2] | 0;
       $336 = $335 & -8;
       $337 = $336 - $248 | 0;
       $338 = $337 >>> 0 < $rsize$412$i >>> 0;
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = $t$411$i + 16 | 0;
       $340 = HEAP32[$339 >> 2] | 0;
       $341 = ($340 | 0) == (0 | 0);
       if (!$341) {
        $rsize$412$i = $$rsize$4$i;
        $t$411$i = $340;
        $v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = $t$411$i + 20 | 0;
       $343 = HEAP32[$342 >> 2] | 0;
       $344 = ($343 | 0) == (0 | 0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;
        $v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;
        $t$411$i = $343;
        $v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i | 0) == (0 | 0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[7100 >> 2] | 0;
      $347 = $346 - $248 | 0;
      $348 = $rsize$4$lcssa$i >>> 0 < $347 >>> 0;
      if ($348) {
       $349 = HEAP32[7108 >> 2] | 0;
       $350 = $v$4$lcssa$i >>> 0 < $349 >>> 0;
       if ($350) {
        _abort();
       }
       $351 = $v$4$lcssa$i + $248 | 0;
       $352 = $v$4$lcssa$i >>> 0 < $351 >>> 0;
       if (!$352) {
        _abort();
       }
       $353 = $v$4$lcssa$i + 24 | 0;
       $354 = HEAP32[$353 >> 2] | 0;
       $355 = $v$4$lcssa$i + 12 | 0;
       $356 = HEAP32[$355 >> 2] | 0;
       $357 = ($356 | 0) == ($v$4$lcssa$i | 0);
       do {
        if ($357) {
         $367 = $v$4$lcssa$i + 20 | 0;
         $368 = HEAP32[$367 >> 2] | 0;
         $369 = ($368 | 0) == (0 | 0);
         if ($369) {
          $370 = $v$4$lcssa$i + 16 | 0;
          $371 = HEAP32[$370 >> 2] | 0;
          $372 = ($371 | 0) == (0 | 0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;
           $RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;
          $RP$1$i8 = $367;
         }
         while (1) {
          $373 = $R$1$i9 + 20 | 0;
          $374 = HEAP32[$373 >> 2] | 0;
          $375 = ($374 | 0) == (0 | 0);
          if (!$375) {
           $R$1$i9 = $374;
           $RP$1$i8 = $373;
           continue;
          }
          $376 = $R$1$i9 + 16 | 0;
          $377 = HEAP32[$376 >> 2] | 0;
          $378 = ($377 | 0) == (0 | 0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;
           $RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;
           $RP$1$i8 = $376;
          }
         }
         $379 = $RP$1$i8$lcssa >>> 0 < $349 >>> 0;
         if ($379) {
          _abort();
         } else {
          HEAP32[$RP$1$i8$lcssa >> 2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = $v$4$lcssa$i + 8 | 0;
         $359 = HEAP32[$358 >> 2] | 0;
         $360 = $359 >>> 0 < $349 >>> 0;
         if ($360) {
          _abort();
         }
         $361 = $359 + 12 | 0;
         $362 = HEAP32[$361 >> 2] | 0;
         $363 = ($362 | 0) == ($v$4$lcssa$i | 0);
         if (!$363) {
          _abort();
         }
         $364 = $356 + 8 | 0;
         $365 = HEAP32[$364 >> 2] | 0;
         $366 = ($365 | 0) == ($v$4$lcssa$i | 0);
         if ($366) {
          HEAP32[$361 >> 2] = $356;
          HEAP32[$364 >> 2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $380 = ($354 | 0) == (0 | 0);
       do {
        if (!$380) {
         $381 = $v$4$lcssa$i + 28 | 0;
         $382 = HEAP32[$381 >> 2] | 0;
         $383 = 7396 + ($382 << 2) | 0;
         $384 = HEAP32[$383 >> 2] | 0;
         $385 = ($v$4$lcssa$i | 0) == ($384 | 0);
         if ($385) {
          HEAP32[$383 >> 2] = $R$3$i11;
          $cond$i12 = ($R$3$i11 | 0) == (0 | 0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[7096 >> 2] | 0;
           $389 = $388 & $387;
           HEAP32[7096 >> 2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[7108 >> 2] | 0;
          $391 = $354 >>> 0 < $390 >>> 0;
          if ($391) {
           _abort();
          }
          $392 = $354 + 16 | 0;
          $393 = HEAP32[$392 >> 2] | 0;
          $394 = ($393 | 0) == ($v$4$lcssa$i | 0);
          if ($394) {
           HEAP32[$392 >> 2] = $R$3$i11;
          } else {
           $395 = $354 + 20 | 0;
           HEAP32[$395 >> 2] = $R$3$i11;
          }
          $396 = ($R$3$i11 | 0) == (0 | 0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[7108 >> 2] | 0;
         $398 = $R$3$i11 >>> 0 < $397 >>> 0;
         if ($398) {
          _abort();
         }
         $399 = $R$3$i11 + 24 | 0;
         HEAP32[$399 >> 2] = $354;
         $400 = $v$4$lcssa$i + 16 | 0;
         $401 = HEAP32[$400 >> 2] | 0;
         $402 = ($401 | 0) == (0 | 0);
         do {
          if (!$402) {
           $403 = $401 >>> 0 < $397 >>> 0;
           if ($403) {
            _abort();
           } else {
            $404 = $R$3$i11 + 16 | 0;
            HEAP32[$404 >> 2] = $401;
            $405 = $401 + 24 | 0;
            HEAP32[$405 >> 2] = $R$3$i11;
            break;
           }
          }
         } while (0);
         $406 = $v$4$lcssa$i + 20 | 0;
         $407 = HEAP32[$406 >> 2] | 0;
         $408 = ($407 | 0) == (0 | 0);
         if (!$408) {
          $409 = HEAP32[7108 >> 2] | 0;
          $410 = $407 >>> 0 < $409 >>> 0;
          if ($410) {
           _abort();
          } else {
           $411 = $R$3$i11 + 20 | 0;
           HEAP32[$411 >> 2] = $407;
           $412 = $407 + 24 | 0;
           HEAP32[$412 >> 2] = $R$3$i11;
           break;
          }
         }
        }
       } while (0);
       $413 = $rsize$4$lcssa$i >>> 0 < 16;
       do {
        if ($413) {
         $414 = $rsize$4$lcssa$i + $248 | 0;
         $415 = $414 | 3;
         $416 = $v$4$lcssa$i + 4 | 0;
         HEAP32[$416 >> 2] = $415;
         $417 = $v$4$lcssa$i + $414 | 0;
         $418 = $417 + 4 | 0;
         $419 = HEAP32[$418 >> 2] | 0;
         $420 = $419 | 1;
         HEAP32[$418 >> 2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = $v$4$lcssa$i + 4 | 0;
         HEAP32[$422 >> 2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = $351 + 4 | 0;
         HEAP32[$424 >> 2] = $423;
         $425 = $351 + $rsize$4$lcssa$i | 0;
         HEAP32[$425 >> 2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = $rsize$4$lcssa$i >>> 0 < 256;
         if ($427) {
          $428 = $426 << 1;
          $429 = 7132 + ($428 << 2) | 0;
          $430 = HEAP32[1773] | 0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432 | 0) == 0;
          if ($433) {
           $434 = $430 | $431;
           HEAP32[1773] = $434;
           $$pre$i13 = $429 + 8 | 0;
           $$pre$phi$i14Z2D = $$pre$i13;
           $F5$0$i = $429;
          } else {
           $435 = $429 + 8 | 0;
           $436 = HEAP32[$435 >> 2] | 0;
           $437 = HEAP32[7108 >> 2] | 0;
           $438 = $436 >>> 0 < $437 >>> 0;
           if ($438) {
            _abort();
           } else {
            $$pre$phi$i14Z2D = $435;
            $F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D >> 2] = $351;
          $439 = $F5$0$i + 12 | 0;
          HEAP32[$439 >> 2] = $351;
          $440 = $351 + 8 | 0;
          HEAP32[$440 >> 2] = $F5$0$i;
          $441 = $351 + 12 | 0;
          HEAP32[$441 >> 2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442 | 0) == 0;
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = $rsize$4$lcssa$i >>> 0 > 16777215;
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = $442 + 1048320 | 0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = $448 + 520192 | 0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = $453 + 245760 | 0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = 14 - $457 | 0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = $458 + $460 | 0;
           $462 = $461 << 1;
           $463 = $461 + 7 | 0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = 7396 + ($I7$0$i << 2) | 0;
         $468 = $351 + 28 | 0;
         HEAP32[$468 >> 2] = $I7$0$i;
         $469 = $351 + 16 | 0;
         $470 = $469 + 4 | 0;
         HEAP32[$470 >> 2] = 0;
         HEAP32[$469 >> 2] = 0;
         $471 = HEAP32[7096 >> 2] | 0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473 | 0) == 0;
         if ($474) {
          $475 = $471 | $472;
          HEAP32[7096 >> 2] = $475;
          HEAP32[$467 >> 2] = $351;
          $476 = $351 + 24 | 0;
          HEAP32[$476 >> 2] = $467;
          $477 = $351 + 12 | 0;
          HEAP32[$477 >> 2] = $351;
          $478 = $351 + 8 | 0;
          HEAP32[$478 >> 2] = $351;
          break;
         }
         $479 = HEAP32[$467 >> 2] | 0;
         $480 = ($I7$0$i | 0) == 31;
         $481 = $I7$0$i >>> 1;
         $482 = 25 - $481 | 0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;
         $T$0$i = $479;
         while (1) {
          $485 = $T$0$i + 4 | 0;
          $486 = HEAP32[$485 >> 2] | 0;
          $487 = $486 & -8;
          $488 = ($487 | 0) == ($rsize$4$lcssa$i | 0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = ($T$0$i + 16 | 0) + ($489 << 2) | 0;
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490 >> 2] | 0;
          $493 = ($492 | 0) == (0 | 0);
          if ($493) {
           $$lcssa157 = $490;
           $T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;
           $T$0$i = $492;
          }
         }
         if ((label | 0) == 145) {
          $494 = HEAP32[7108 >> 2] | 0;
          $495 = $$lcssa157 >>> 0 < $494 >>> 0;
          if ($495) {
           _abort();
          } else {
           HEAP32[$$lcssa157 >> 2] = $351;
           $496 = $351 + 24 | 0;
           HEAP32[$496 >> 2] = $T$0$i$lcssa156;
           $497 = $351 + 12 | 0;
           HEAP32[$497 >> 2] = $351;
           $498 = $351 + 8 | 0;
           HEAP32[$498 >> 2] = $351;
           break;
          }
         } else if ((label | 0) == 148) {
          $499 = $T$0$i$lcssa + 8 | 0;
          $500 = HEAP32[$499 >> 2] | 0;
          $501 = HEAP32[7108 >> 2] | 0;
          $502 = $500 >>> 0 >= $501 >>> 0;
          $not$7$i = $T$0$i$lcssa >>> 0 >= $501 >>> 0;
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = $500 + 12 | 0;
           HEAP32[$504 >> 2] = $351;
           HEAP32[$499 >> 2] = $351;
           $505 = $351 + 8 | 0;
           HEAP32[$505 >> 2] = $500;
           $506 = $351 + 12 | 0;
           HEAP32[$506 >> 2] = $T$0$i$lcssa;
           $507 = $351 + 24 | 0;
           HEAP32[$507 >> 2] = 0;
           break;
          } else {
           _abort();
          }
         }
        }
       } while (0);
       $508 = $v$4$lcssa$i + 8 | 0;
       $$0 = $508;
       STACKTOP = sp;
       return $$0 | 0;
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while (0);
 $509 = HEAP32[7100 >> 2] | 0;
 $510 = $509 >>> 0 < $nb$0 >>> 0;
 if (!$510) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[7112 >> 2] | 0;
  $513 = $511 >>> 0 > 15;
  if ($513) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[7112 >> 2] = $514;
   HEAP32[7100 >> 2] = $511;
   $515 = $511 | 1;
   $516 = $514 + 4 | 0;
   HEAP32[$516 >> 2] = $515;
   $517 = $514 + $511 | 0;
   HEAP32[$517 >> 2] = $511;
   $518 = $nb$0 | 3;
   $519 = $512 + 4 | 0;
   HEAP32[$519 >> 2] = $518;
  } else {
   HEAP32[7100 >> 2] = 0;
   HEAP32[7112 >> 2] = 0;
   $520 = $509 | 3;
   $521 = $512 + 4 | 0;
   HEAP32[$521 >> 2] = $520;
   $522 = $512 + $509 | 0;
   $523 = $522 + 4 | 0;
   $524 = HEAP32[$523 >> 2] | 0;
   $525 = $524 | 1;
   HEAP32[$523 >> 2] = $525;
  }
  $526 = $512 + 8 | 0;
  $$0 = $526;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $527 = HEAP32[7104 >> 2] | 0;
 $528 = $527 >>> 0 > $nb$0 >>> 0;
 if ($528) {
  $529 = $527 - $nb$0 | 0;
  HEAP32[7104 >> 2] = $529;
  $530 = HEAP32[7116 >> 2] | 0;
  $531 = $530 + $nb$0 | 0;
  HEAP32[7116 >> 2] = $531;
  $532 = $529 | 1;
  $533 = $531 + 4 | 0;
  HEAP32[$533 >> 2] = $532;
  $534 = $nb$0 | 3;
  $535 = $530 + 4 | 0;
  HEAP32[$535 >> 2] = $534;
  $536 = $530 + 8 | 0;
  $$0 = $536;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $537 = HEAP32[1891] | 0;
 $538 = ($537 | 0) == 0;
 if ($538) {
  HEAP32[7572 >> 2] = 4096;
  HEAP32[7568 >> 2] = 4096;
  HEAP32[7576 >> 2] = -1;
  HEAP32[7580 >> 2] = -1;
  HEAP32[7584 >> 2] = 0;
  HEAP32[7536 >> 2] = 0;
  $539 = $magic$i$i;
  $540 = $539 & -16;
  $541 = $540 ^ 1431655768;
  HEAP32[$magic$i$i >> 2] = $541;
  HEAP32[1891] = $541;
 }
 $542 = $nb$0 + 48 | 0;
 $543 = HEAP32[7572 >> 2] | 0;
 $544 = $nb$0 + 47 | 0;
 $545 = $543 + $544 | 0;
 $546 = 0 - $543 | 0;
 $547 = $545 & $546;
 $548 = $547 >>> 0 > $nb$0 >>> 0;
 if (!$548) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $549 = HEAP32[7532 >> 2] | 0;
 $550 = ($549 | 0) == 0;
 if (!$550) {
  $551 = HEAP32[7524 >> 2] | 0;
  $552 = $551 + $547 | 0;
  $553 = $552 >>> 0 <= $551 >>> 0;
  $554 = $552 >>> 0 > $549 >>> 0;
  $or$cond1$i16 = $553 | $554;
  if ($or$cond1$i16) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $555 = HEAP32[7536 >> 2] | 0;
 $556 = $555 & 4;
 $557 = ($556 | 0) == 0;
 L254 : do {
  if ($557) {
   $558 = HEAP32[7116 >> 2] | 0;
   $559 = ($558 | 0) == (0 | 0);
   L256 : do {
    if ($559) {
     label = 171;
    } else {
     $sp$0$i$i = 7540;
     while (1) {
      $560 = HEAP32[$sp$0$i$i >> 2] | 0;
      $561 = $560 >>> 0 > $558 >>> 0;
      if (!$561) {
       $562 = $sp$0$i$i + 4 | 0;
       $563 = HEAP32[$562 >> 2] | 0;
       $564 = $560 + $563 | 0;
       $565 = $564 >>> 0 > $558 >>> 0;
       if ($565) {
        $$lcssa153 = $sp$0$i$i;
        $$lcssa155 = $562;
        break;
       }
      }
      $566 = $sp$0$i$i + 8 | 0;
      $567 = HEAP32[$566 >> 2] | 0;
      $568 = ($567 | 0) == (0 | 0);
      if ($568) {
       label = 171;
       break L256;
      } else {
       $sp$0$i$i = $567;
      }
     }
     $591 = HEAP32[7104 >> 2] | 0;
     $592 = $545 - $591 | 0;
     $593 = $592 & $546;
     $594 = $593 >>> 0 < 2147483647;
     if ($594) {
      $595 = _sbrk($593 | 0) | 0;
      $596 = HEAP32[$$lcssa153 >> 2] | 0;
      $597 = HEAP32[$$lcssa155 >> 2] | 0;
      $598 = $596 + $597 | 0;
      $599 = ($595 | 0) == ($598 | 0);
      if ($599) {
       $600 = ($595 | 0) == (-1 | 0);
       if (!$600) {
        $tbase$746$i = $595;
        $tsize$745$i = $593;
        label = 191;
        break L254;
       }
      } else {
       $br$2$ph$i = $595;
       $ssize$2$ph$i = $593;
       label = 181;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $569 = _sbrk(0) | 0;
     $570 = ($569 | 0) == (-1 | 0);
     if (!$570) {
      $571 = $569;
      $572 = HEAP32[7568 >> 2] | 0;
      $573 = $572 + -1 | 0;
      $574 = $573 & $571;
      $575 = ($574 | 0) == 0;
      if ($575) {
       $ssize$0$i = $547;
      } else {
       $576 = $573 + $571 | 0;
       $577 = 0 - $572 | 0;
       $578 = $576 & $577;
       $579 = $547 - $571 | 0;
       $580 = $579 + $578 | 0;
       $ssize$0$i = $580;
      }
      $581 = HEAP32[7524 >> 2] | 0;
      $582 = $581 + $ssize$0$i | 0;
      $583 = $ssize$0$i >>> 0 > $nb$0 >>> 0;
      $584 = $ssize$0$i >>> 0 < 2147483647;
      $or$cond$i17 = $583 & $584;
      if ($or$cond$i17) {
       $585 = HEAP32[7532 >> 2] | 0;
       $586 = ($585 | 0) == 0;
       if (!$586) {
        $587 = $582 >>> 0 <= $581 >>> 0;
        $588 = $582 >>> 0 > $585 >>> 0;
        $or$cond2$i = $587 | $588;
        if ($or$cond2$i) {
         break;
        }
       }
       $589 = _sbrk($ssize$0$i | 0) | 0;
       $590 = ($589 | 0) == ($569 | 0);
       if ($590) {
        $tbase$746$i = $569;
        $tsize$745$i = $ssize$0$i;
        label = 191;
        break L254;
       } else {
        $br$2$ph$i = $589;
        $ssize$2$ph$i = $ssize$0$i;
        label = 181;
       }
      }
     }
    }
   } while (0);
   L276 : do {
    if ((label | 0) == 181) {
     $601 = 0 - $ssize$2$ph$i | 0;
     $602 = ($br$2$ph$i | 0) != (-1 | 0);
     $603 = $ssize$2$ph$i >>> 0 < 2147483647;
     $or$cond7$i = $603 & $602;
     $604 = $542 >>> 0 > $ssize$2$ph$i >>> 0;
     $or$cond8$i = $604 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $605 = HEAP32[7572 >> 2] | 0;
       $606 = $544 - $ssize$2$ph$i | 0;
       $607 = $606 + $605 | 0;
       $608 = 0 - $605 | 0;
       $609 = $607 & $608;
       $610 = $609 >>> 0 < 2147483647;
       if ($610) {
        $611 = _sbrk($609 | 0) | 0;
        $612 = ($611 | 0) == (-1 | 0);
        if ($612) {
         _sbrk($601 | 0) | 0;
         break L276;
        } else {
         $613 = $609 + $ssize$2$ph$i | 0;
         $ssize$5$i = $613;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while (0);
     $614 = ($br$2$ph$i | 0) == (-1 | 0);
     if (!$614) {
      $tbase$746$i = $br$2$ph$i;
      $tsize$745$i = $ssize$5$i;
      label = 191;
      break L254;
     }
    }
   } while (0);
   $615 = HEAP32[7536 >> 2] | 0;
   $616 = $615 | 4;
   HEAP32[7536 >> 2] = $616;
   label = 188;
  } else {
   label = 188;
  }
 } while (0);
 if ((label | 0) == 188) {
  $617 = $547 >>> 0 < 2147483647;
  if ($617) {
   $618 = _sbrk($547 | 0) | 0;
   $619 = _sbrk(0) | 0;
   $620 = ($618 | 0) != (-1 | 0);
   $621 = ($619 | 0) != (-1 | 0);
   $or$cond5$i = $620 & $621;
   $622 = $618 >>> 0 < $619 >>> 0;
   $or$cond10$i = $622 & $or$cond5$i;
   if ($or$cond10$i) {
    $623 = $619;
    $624 = $618;
    $625 = $623 - $624 | 0;
    $626 = $nb$0 + 40 | 0;
    $$not$i = $625 >>> 0 > $626 >>> 0;
    if ($$not$i) {
     $tbase$746$i = $618;
     $tsize$745$i = $625;
     label = 191;
    }
   }
  }
 }
 if ((label | 0) == 191) {
  $627 = HEAP32[7524 >> 2] | 0;
  $628 = $627 + $tsize$745$i | 0;
  HEAP32[7524 >> 2] = $628;
  $629 = HEAP32[7528 >> 2] | 0;
  $630 = $628 >>> 0 > $629 >>> 0;
  if ($630) {
   HEAP32[7528 >> 2] = $628;
  }
  $631 = HEAP32[7116 >> 2] | 0;
  $632 = ($631 | 0) == (0 | 0);
  do {
   if ($632) {
    $633 = HEAP32[7108 >> 2] | 0;
    $634 = ($633 | 0) == (0 | 0);
    $635 = $tbase$746$i >>> 0 < $633 >>> 0;
    $or$cond11$i = $634 | $635;
    if ($or$cond11$i) {
     HEAP32[7108 >> 2] = $tbase$746$i;
    }
    HEAP32[7540 >> 2] = $tbase$746$i;
    HEAP32[7544 >> 2] = $tsize$745$i;
    HEAP32[7552 >> 2] = 0;
    $636 = HEAP32[1891] | 0;
    HEAP32[7128 >> 2] = $636;
    HEAP32[7124 >> 2] = -1;
    $i$01$i$i = 0;
    while (1) {
     $637 = $i$01$i$i << 1;
     $638 = 7132 + ($637 << 2) | 0;
     $639 = $638 + 12 | 0;
     HEAP32[$639 >> 2] = $638;
     $640 = $638 + 8 | 0;
     HEAP32[$640 >> 2] = $638;
     $641 = $i$01$i$i + 1 | 0;
     $exitcond$i$i = ($641 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $641;
     }
    }
    $642 = $tsize$745$i + -40 | 0;
    $643 = $tbase$746$i + 8 | 0;
    $644 = $643;
    $645 = $644 & 7;
    $646 = ($645 | 0) == 0;
    $647 = 0 - $644 | 0;
    $648 = $647 & 7;
    $649 = $646 ? 0 : $648;
    $650 = $tbase$746$i + $649 | 0;
    $651 = $642 - $649 | 0;
    HEAP32[7116 >> 2] = $650;
    HEAP32[7104 >> 2] = $651;
    $652 = $651 | 1;
    $653 = $650 + 4 | 0;
    HEAP32[$653 >> 2] = $652;
    $654 = $650 + $651 | 0;
    $655 = $654 + 4 | 0;
    HEAP32[$655 >> 2] = 40;
    $656 = HEAP32[7580 >> 2] | 0;
    HEAP32[7120 >> 2] = $656;
   } else {
    $sp$068$i = 7540;
    while (1) {
     $657 = HEAP32[$sp$068$i >> 2] | 0;
     $658 = $sp$068$i + 4 | 0;
     $659 = HEAP32[$658 >> 2] | 0;
     $660 = $657 + $659 | 0;
     $661 = ($tbase$746$i | 0) == ($660 | 0);
     if ($661) {
      $$lcssa147 = $657;
      $$lcssa149 = $658;
      $$lcssa151 = $659;
      $sp$068$i$lcssa = $sp$068$i;
      label = 201;
      break;
     }
     $662 = $sp$068$i + 8 | 0;
     $663 = HEAP32[$662 >> 2] | 0;
     $664 = ($663 | 0) == (0 | 0);
     if ($664) {
      break;
     } else {
      $sp$068$i = $663;
     }
    }
    if ((label | 0) == 201) {
     $665 = $sp$068$i$lcssa + 12 | 0;
     $666 = HEAP32[$665 >> 2] | 0;
     $667 = $666 & 8;
     $668 = ($667 | 0) == 0;
     if ($668) {
      $669 = $631 >>> 0 >= $$lcssa147 >>> 0;
      $670 = $631 >>> 0 < $tbase$746$i >>> 0;
      $or$cond48$i = $670 & $669;
      if ($or$cond48$i) {
       $671 = $$lcssa151 + $tsize$745$i | 0;
       HEAP32[$$lcssa149 >> 2] = $671;
       $672 = HEAP32[7104 >> 2] | 0;
       $673 = $631 + 8 | 0;
       $674 = $673;
       $675 = $674 & 7;
       $676 = ($675 | 0) == 0;
       $677 = 0 - $674 | 0;
       $678 = $677 & 7;
       $679 = $676 ? 0 : $678;
       $680 = $631 + $679 | 0;
       $681 = $tsize$745$i - $679 | 0;
       $682 = $681 + $672 | 0;
       HEAP32[7116 >> 2] = $680;
       HEAP32[7104 >> 2] = $682;
       $683 = $682 | 1;
       $684 = $680 + 4 | 0;
       HEAP32[$684 >> 2] = $683;
       $685 = $680 + $682 | 0;
       $686 = $685 + 4 | 0;
       HEAP32[$686 >> 2] = 40;
       $687 = HEAP32[7580 >> 2] | 0;
       HEAP32[7120 >> 2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[7108 >> 2] | 0;
    $689 = $tbase$746$i >>> 0 < $688 >>> 0;
    if ($689) {
     HEAP32[7108 >> 2] = $tbase$746$i;
     $753 = $tbase$746$i;
    } else {
     $753 = $688;
    }
    $690 = $tbase$746$i + $tsize$745$i | 0;
    $sp$167$i = 7540;
    while (1) {
     $691 = HEAP32[$sp$167$i >> 2] | 0;
     $692 = ($691 | 0) == ($690 | 0);
     if ($692) {
      $$lcssa144 = $sp$167$i;
      $sp$167$i$lcssa = $sp$167$i;
      label = 209;
      break;
     }
     $693 = $sp$167$i + 8 | 0;
     $694 = HEAP32[$693 >> 2] | 0;
     $695 = ($694 | 0) == (0 | 0);
     if ($695) {
      $sp$0$i$i$i = 7540;
      break;
     } else {
      $sp$167$i = $694;
     }
    }
    if ((label | 0) == 209) {
     $696 = $sp$167$i$lcssa + 12 | 0;
     $697 = HEAP32[$696 >> 2] | 0;
     $698 = $697 & 8;
     $699 = ($698 | 0) == 0;
     if ($699) {
      HEAP32[$$lcssa144 >> 2] = $tbase$746$i;
      $700 = $sp$167$i$lcssa + 4 | 0;
      $701 = HEAP32[$700 >> 2] | 0;
      $702 = $701 + $tsize$745$i | 0;
      HEAP32[$700 >> 2] = $702;
      $703 = $tbase$746$i + 8 | 0;
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705 | 0) == 0;
      $707 = 0 - $704 | 0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = $tbase$746$i + $709 | 0;
      $711 = $690 + 8 | 0;
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713 | 0) == 0;
      $715 = 0 - $712 | 0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = $690 + $717 | 0;
      $719 = $718;
      $720 = $710;
      $721 = $719 - $720 | 0;
      $722 = $710 + $nb$0 | 0;
      $723 = $721 - $nb$0 | 0;
      $724 = $nb$0 | 3;
      $725 = $710 + 4 | 0;
      HEAP32[$725 >> 2] = $724;
      $726 = ($718 | 0) == ($631 | 0);
      do {
       if ($726) {
        $727 = HEAP32[7104 >> 2] | 0;
        $728 = $727 + $723 | 0;
        HEAP32[7104 >> 2] = $728;
        HEAP32[7116 >> 2] = $722;
        $729 = $728 | 1;
        $730 = $722 + 4 | 0;
        HEAP32[$730 >> 2] = $729;
       } else {
        $731 = HEAP32[7112 >> 2] | 0;
        $732 = ($718 | 0) == ($731 | 0);
        if ($732) {
         $733 = HEAP32[7100 >> 2] | 0;
         $734 = $733 + $723 | 0;
         HEAP32[7100 >> 2] = $734;
         HEAP32[7112 >> 2] = $722;
         $735 = $734 | 1;
         $736 = $722 + 4 | 0;
         HEAP32[$736 >> 2] = $735;
         $737 = $722 + $734 | 0;
         HEAP32[$737 >> 2] = $734;
         break;
        }
        $738 = $718 + 4 | 0;
        $739 = HEAP32[$738 >> 2] | 0;
        $740 = $739 & 3;
        $741 = ($740 | 0) == 1;
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = $739 >>> 0 < 256;
         L328 : do {
          if ($744) {
           $745 = $718 + 8 | 0;
           $746 = HEAP32[$745 >> 2] | 0;
           $747 = $718 + 12 | 0;
           $748 = HEAP32[$747 >> 2] | 0;
           $749 = $743 << 1;
           $750 = 7132 + ($749 << 2) | 0;
           $751 = ($746 | 0) == ($750 | 0);
           do {
            if (!$751) {
             $752 = $746 >>> 0 < $753 >>> 0;
             if ($752) {
              _abort();
             }
             $754 = $746 + 12 | 0;
             $755 = HEAP32[$754 >> 2] | 0;
             $756 = ($755 | 0) == ($718 | 0);
             if ($756) {
              break;
             }
             _abort();
            }
           } while (0);
           $757 = ($748 | 0) == ($746 | 0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[1773] | 0;
            $761 = $760 & $759;
            HEAP32[1773] = $761;
            break;
           }
           $762 = ($748 | 0) == ($750 | 0);
           do {
            if ($762) {
             $$pre9$i$i = $748 + 8 | 0;
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $763 = $748 >>> 0 < $753 >>> 0;
             if ($763) {
              _abort();
             }
             $764 = $748 + 8 | 0;
             $765 = HEAP32[$764 >> 2] | 0;
             $766 = ($765 | 0) == ($718 | 0);
             if ($766) {
              $$pre$phi10$i$iZ2D = $764;
              break;
             }
             _abort();
            }
           } while (0);
           $767 = $746 + 12 | 0;
           HEAP32[$767 >> 2] = $748;
           HEAP32[$$pre$phi10$i$iZ2D >> 2] = $746;
          } else {
           $768 = $718 + 24 | 0;
           $769 = HEAP32[$768 >> 2] | 0;
           $770 = $718 + 12 | 0;
           $771 = HEAP32[$770 >> 2] | 0;
           $772 = ($771 | 0) == ($718 | 0);
           do {
            if ($772) {
             $782 = $718 + 16 | 0;
             $783 = $782 + 4 | 0;
             $784 = HEAP32[$783 >> 2] | 0;
             $785 = ($784 | 0) == (0 | 0);
             if ($785) {
              $786 = HEAP32[$782 >> 2] | 0;
              $787 = ($786 | 0) == (0 | 0);
              if ($787) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $786;
               $RP$1$i$i = $782;
              }
             } else {
              $R$1$i$i = $784;
              $RP$1$i$i = $783;
             }
             while (1) {
              $788 = $R$1$i$i + 20 | 0;
              $789 = HEAP32[$788 >> 2] | 0;
              $790 = ($789 | 0) == (0 | 0);
              if (!$790) {
               $R$1$i$i = $789;
               $RP$1$i$i = $788;
               continue;
              }
              $791 = $R$1$i$i + 16 | 0;
              $792 = HEAP32[$791 >> 2] | 0;
              $793 = ($792 | 0) == (0 | 0);
              if ($793) {
               $R$1$i$i$lcssa = $R$1$i$i;
               $RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $792;
               $RP$1$i$i = $791;
              }
             }
             $794 = $RP$1$i$i$lcssa >>> 0 < $753 >>> 0;
             if ($794) {
              _abort();
             } else {
              HEAP32[$RP$1$i$i$lcssa >> 2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $773 = $718 + 8 | 0;
             $774 = HEAP32[$773 >> 2] | 0;
             $775 = $774 >>> 0 < $753 >>> 0;
             if ($775) {
              _abort();
             }
             $776 = $774 + 12 | 0;
             $777 = HEAP32[$776 >> 2] | 0;
             $778 = ($777 | 0) == ($718 | 0);
             if (!$778) {
              _abort();
             }
             $779 = $771 + 8 | 0;
             $780 = HEAP32[$779 >> 2] | 0;
             $781 = ($780 | 0) == ($718 | 0);
             if ($781) {
              HEAP32[$776 >> 2] = $771;
              HEAP32[$779 >> 2] = $774;
              $R$3$i$i = $771;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           $795 = ($769 | 0) == (0 | 0);
           if ($795) {
            break;
           }
           $796 = $718 + 28 | 0;
           $797 = HEAP32[$796 >> 2] | 0;
           $798 = 7396 + ($797 << 2) | 0;
           $799 = HEAP32[$798 >> 2] | 0;
           $800 = ($718 | 0) == ($799 | 0);
           do {
            if ($800) {
             HEAP32[$798 >> 2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[7096 >> 2] | 0;
             $804 = $803 & $802;
             HEAP32[7096 >> 2] = $804;
             break L328;
            } else {
             $805 = HEAP32[7108 >> 2] | 0;
             $806 = $769 >>> 0 < $805 >>> 0;
             if ($806) {
              _abort();
             }
             $807 = $769 + 16 | 0;
             $808 = HEAP32[$807 >> 2] | 0;
             $809 = ($808 | 0) == ($718 | 0);
             if ($809) {
              HEAP32[$807 >> 2] = $R$3$i$i;
             } else {
              $810 = $769 + 20 | 0;
              HEAP32[$810 >> 2] = $R$3$i$i;
             }
             $811 = ($R$3$i$i | 0) == (0 | 0);
             if ($811) {
              break L328;
             }
            }
           } while (0);
           $812 = HEAP32[7108 >> 2] | 0;
           $813 = $R$3$i$i >>> 0 < $812 >>> 0;
           if ($813) {
            _abort();
           }
           $814 = $R$3$i$i + 24 | 0;
           HEAP32[$814 >> 2] = $769;
           $815 = $718 + 16 | 0;
           $816 = HEAP32[$815 >> 2] | 0;
           $817 = ($816 | 0) == (0 | 0);
           do {
            if (!$817) {
             $818 = $816 >>> 0 < $812 >>> 0;
             if ($818) {
              _abort();
             } else {
              $819 = $R$3$i$i + 16 | 0;
              HEAP32[$819 >> 2] = $816;
              $820 = $816 + 24 | 0;
              HEAP32[$820 >> 2] = $R$3$i$i;
              break;
             }
            }
           } while (0);
           $821 = $815 + 4 | 0;
           $822 = HEAP32[$821 >> 2] | 0;
           $823 = ($822 | 0) == (0 | 0);
           if ($823) {
            break;
           }
           $824 = HEAP32[7108 >> 2] | 0;
           $825 = $822 >>> 0 < $824 >>> 0;
           if ($825) {
            _abort();
           } else {
            $826 = $R$3$i$i + 20 | 0;
            HEAP32[$826 >> 2] = $822;
            $827 = $822 + 24 | 0;
            HEAP32[$827 >> 2] = $R$3$i$i;
            break;
           }
          }
         } while (0);
         $828 = $718 + $742 | 0;
         $829 = $742 + $723 | 0;
         $oldfirst$0$i$i = $828;
         $qsize$0$i$i = $829;
        } else {
         $oldfirst$0$i$i = $718;
         $qsize$0$i$i = $723;
        }
        $830 = $oldfirst$0$i$i + 4 | 0;
        $831 = HEAP32[$830 >> 2] | 0;
        $832 = $831 & -2;
        HEAP32[$830 >> 2] = $832;
        $833 = $qsize$0$i$i | 1;
        $834 = $722 + 4 | 0;
        HEAP32[$834 >> 2] = $833;
        $835 = $722 + $qsize$0$i$i | 0;
        HEAP32[$835 >> 2] = $qsize$0$i$i;
        $836 = $qsize$0$i$i >>> 3;
        $837 = $qsize$0$i$i >>> 0 < 256;
        if ($837) {
         $838 = $836 << 1;
         $839 = 7132 + ($838 << 2) | 0;
         $840 = HEAP32[1773] | 0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842 | 0) == 0;
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[1773] = $844;
           $$pre$i16$i = $839 + 8 | 0;
           $$pre$phi$i17$iZ2D = $$pre$i16$i;
           $F4$0$i$i = $839;
          } else {
           $845 = $839 + 8 | 0;
           $846 = HEAP32[$845 >> 2] | 0;
           $847 = HEAP32[7108 >> 2] | 0;
           $848 = $846 >>> 0 < $847 >>> 0;
           if (!$848) {
            $$pre$phi$i17$iZ2D = $845;
            $F4$0$i$i = $846;
            break;
           }
           _abort();
          }
         } while (0);
         HEAP32[$$pre$phi$i17$iZ2D >> 2] = $722;
         $849 = $F4$0$i$i + 12 | 0;
         HEAP32[$849 >> 2] = $722;
         $850 = $722 + 8 | 0;
         HEAP32[$850 >> 2] = $F4$0$i$i;
         $851 = $722 + 12 | 0;
         HEAP32[$851 >> 2] = $839;
         break;
        }
        $852 = $qsize$0$i$i >>> 8;
        $853 = ($852 | 0) == 0;
        do {
         if ($853) {
          $I7$0$i$i = 0;
         } else {
          $854 = $qsize$0$i$i >>> 0 > 16777215;
          if ($854) {
           $I7$0$i$i = 31;
           break;
          }
          $855 = $852 + 1048320 | 0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = $858 + 520192 | 0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = $863 + 245760 | 0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = 14 - $867 | 0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = $868 + $870 | 0;
          $872 = $871 << 1;
          $873 = $871 + 7 | 0;
          $874 = $qsize$0$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $I7$0$i$i = $876;
         }
        } while (0);
        $877 = 7396 + ($I7$0$i$i << 2) | 0;
        $878 = $722 + 28 | 0;
        HEAP32[$878 >> 2] = $I7$0$i$i;
        $879 = $722 + 16 | 0;
        $880 = $879 + 4 | 0;
        HEAP32[$880 >> 2] = 0;
        HEAP32[$879 >> 2] = 0;
        $881 = HEAP32[7096 >> 2] | 0;
        $882 = 1 << $I7$0$i$i;
        $883 = $881 & $882;
        $884 = ($883 | 0) == 0;
        if ($884) {
         $885 = $881 | $882;
         HEAP32[7096 >> 2] = $885;
         HEAP32[$877 >> 2] = $722;
         $886 = $722 + 24 | 0;
         HEAP32[$886 >> 2] = $877;
         $887 = $722 + 12 | 0;
         HEAP32[$887 >> 2] = $722;
         $888 = $722 + 8 | 0;
         HEAP32[$888 >> 2] = $722;
         break;
        }
        $889 = HEAP32[$877 >> 2] | 0;
        $890 = ($I7$0$i$i | 0) == 31;
        $891 = $I7$0$i$i >>> 1;
        $892 = 25 - $891 | 0;
        $893 = $890 ? 0 : $892;
        $894 = $qsize$0$i$i << $893;
        $K8$0$i$i = $894;
        $T$0$i18$i = $889;
        while (1) {
         $895 = $T$0$i18$i + 4 | 0;
         $896 = HEAP32[$895 >> 2] | 0;
         $897 = $896 & -8;
         $898 = ($897 | 0) == ($qsize$0$i$i | 0);
         if ($898) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 279;
          break;
         }
         $899 = $K8$0$i$i >>> 31;
         $900 = ($T$0$i18$i + 16 | 0) + ($899 << 2) | 0;
         $901 = $K8$0$i$i << 1;
         $902 = HEAP32[$900 >> 2] | 0;
         $903 = ($902 | 0) == (0 | 0);
         if ($903) {
          $$lcssa = $900;
          $T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 276;
          break;
         } else {
          $K8$0$i$i = $901;
          $T$0$i18$i = $902;
         }
        }
        if ((label | 0) == 276) {
         $904 = HEAP32[7108 >> 2] | 0;
         $905 = $$lcssa >>> 0 < $904 >>> 0;
         if ($905) {
          _abort();
         } else {
          HEAP32[$$lcssa >> 2] = $722;
          $906 = $722 + 24 | 0;
          HEAP32[$906 >> 2] = $T$0$i18$i$lcssa139;
          $907 = $722 + 12 | 0;
          HEAP32[$907 >> 2] = $722;
          $908 = $722 + 8 | 0;
          HEAP32[$908 >> 2] = $722;
          break;
         }
        } else if ((label | 0) == 279) {
         $909 = $T$0$i18$i$lcssa + 8 | 0;
         $910 = HEAP32[$909 >> 2] | 0;
         $911 = HEAP32[7108 >> 2] | 0;
         $912 = $910 >>> 0 >= $911 >>> 0;
         $not$$i20$i = $T$0$i18$i$lcssa >>> 0 >= $911 >>> 0;
         $913 = $912 & $not$$i20$i;
         if ($913) {
          $914 = $910 + 12 | 0;
          HEAP32[$914 >> 2] = $722;
          HEAP32[$909 >> 2] = $722;
          $915 = $722 + 8 | 0;
          HEAP32[$915 >> 2] = $910;
          $916 = $722 + 12 | 0;
          HEAP32[$916 >> 2] = $T$0$i18$i$lcssa;
          $917 = $722 + 24 | 0;
          HEAP32[$917 >> 2] = 0;
          break;
         } else {
          _abort();
         }
        }
       }
      } while (0);
      $1048 = $710 + 8 | 0;
      $$0 = $1048;
      STACKTOP = sp;
      return $$0 | 0;
     } else {
      $sp$0$i$i$i = 7540;
     }
    }
    while (1) {
     $918 = HEAP32[$sp$0$i$i$i >> 2] | 0;
     $919 = $918 >>> 0 > $631 >>> 0;
     if (!$919) {
      $920 = $sp$0$i$i$i + 4 | 0;
      $921 = HEAP32[$920 >> 2] | 0;
      $922 = $918 + $921 | 0;
      $923 = $922 >>> 0 > $631 >>> 0;
      if ($923) {
       $$lcssa142 = $922;
       break;
      }
     }
     $924 = $sp$0$i$i$i + 8 | 0;
     $925 = HEAP32[$924 >> 2] | 0;
     $sp$0$i$i$i = $925;
    }
    $926 = $$lcssa142 + -47 | 0;
    $927 = $926 + 8 | 0;
    $928 = $927;
    $929 = $928 & 7;
    $930 = ($929 | 0) == 0;
    $931 = 0 - $928 | 0;
    $932 = $931 & 7;
    $933 = $930 ? 0 : $932;
    $934 = $926 + $933 | 0;
    $935 = $631 + 16 | 0;
    $936 = $934 >>> 0 < $935 >>> 0;
    $937 = $936 ? $631 : $934;
    $938 = $937 + 8 | 0;
    $939 = $937 + 24 | 0;
    $940 = $tsize$745$i + -40 | 0;
    $941 = $tbase$746$i + 8 | 0;
    $942 = $941;
    $943 = $942 & 7;
    $944 = ($943 | 0) == 0;
    $945 = 0 - $942 | 0;
    $946 = $945 & 7;
    $947 = $944 ? 0 : $946;
    $948 = $tbase$746$i + $947 | 0;
    $949 = $940 - $947 | 0;
    HEAP32[7116 >> 2] = $948;
    HEAP32[7104 >> 2] = $949;
    $950 = $949 | 1;
    $951 = $948 + 4 | 0;
    HEAP32[$951 >> 2] = $950;
    $952 = $948 + $949 | 0;
    $953 = $952 + 4 | 0;
    HEAP32[$953 >> 2] = 40;
    $954 = HEAP32[7580 >> 2] | 0;
    HEAP32[7120 >> 2] = $954;
    $955 = $937 + 4 | 0;
    HEAP32[$955 >> 2] = 27;
    HEAP32[$938 >> 2] = HEAP32[7540 >> 2] | 0;
    HEAP32[$938 + 4 >> 2] = HEAP32[7540 + 4 >> 2] | 0;
    HEAP32[$938 + 8 >> 2] = HEAP32[7540 + 8 >> 2] | 0;
    HEAP32[$938 + 12 >> 2] = HEAP32[7540 + 12 >> 2] | 0;
    HEAP32[7540 >> 2] = $tbase$746$i;
    HEAP32[7544 >> 2] = $tsize$745$i;
    HEAP32[7552 >> 2] = 0;
    HEAP32[7548 >> 2] = $938;
    $p$0$i$i = $939;
    while (1) {
     $956 = $p$0$i$i + 4 | 0;
     HEAP32[$956 >> 2] = 7;
     $957 = $956 + 4 | 0;
     $958 = $957 >>> 0 < $$lcssa142 >>> 0;
     if ($958) {
      $p$0$i$i = $956;
     } else {
      break;
     }
    }
    $959 = ($937 | 0) == ($631 | 0);
    if (!$959) {
     $960 = $937;
     $961 = $631;
     $962 = $960 - $961 | 0;
     $963 = HEAP32[$955 >> 2] | 0;
     $964 = $963 & -2;
     HEAP32[$955 >> 2] = $964;
     $965 = $962 | 1;
     $966 = $631 + 4 | 0;
     HEAP32[$966 >> 2] = $965;
     HEAP32[$937 >> 2] = $962;
     $967 = $962 >>> 3;
     $968 = $962 >>> 0 < 256;
     if ($968) {
      $969 = $967 << 1;
      $970 = 7132 + ($969 << 2) | 0;
      $971 = HEAP32[1773] | 0;
      $972 = 1 << $967;
      $973 = $971 & $972;
      $974 = ($973 | 0) == 0;
      if ($974) {
       $975 = $971 | $972;
       HEAP32[1773] = $975;
       $$pre$i$i = $970 + 8 | 0;
       $$pre$phi$i$iZ2D = $$pre$i$i;
       $F$0$i$i = $970;
      } else {
       $976 = $970 + 8 | 0;
       $977 = HEAP32[$976 >> 2] | 0;
       $978 = HEAP32[7108 >> 2] | 0;
       $979 = $977 >>> 0 < $978 >>> 0;
       if ($979) {
        _abort();
       } else {
        $$pre$phi$i$iZ2D = $976;
        $F$0$i$i = $977;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $631;
      $980 = $F$0$i$i + 12 | 0;
      HEAP32[$980 >> 2] = $631;
      $981 = $631 + 8 | 0;
      HEAP32[$981 >> 2] = $F$0$i$i;
      $982 = $631 + 12 | 0;
      HEAP32[$982 >> 2] = $970;
      break;
     }
     $983 = $962 >>> 8;
     $984 = ($983 | 0) == 0;
     if ($984) {
      $I1$0$i$i = 0;
     } else {
      $985 = $962 >>> 0 > 16777215;
      if ($985) {
       $I1$0$i$i = 31;
      } else {
       $986 = $983 + 1048320 | 0;
       $987 = $986 >>> 16;
       $988 = $987 & 8;
       $989 = $983 << $988;
       $990 = $989 + 520192 | 0;
       $991 = $990 >>> 16;
       $992 = $991 & 4;
       $993 = $992 | $988;
       $994 = $989 << $992;
       $995 = $994 + 245760 | 0;
       $996 = $995 >>> 16;
       $997 = $996 & 2;
       $998 = $993 | $997;
       $999 = 14 - $998 | 0;
       $1000 = $994 << $997;
       $1001 = $1000 >>> 15;
       $1002 = $999 + $1001 | 0;
       $1003 = $1002 << 1;
       $1004 = $1002 + 7 | 0;
       $1005 = $962 >>> $1004;
       $1006 = $1005 & 1;
       $1007 = $1006 | $1003;
       $I1$0$i$i = $1007;
      }
     }
     $1008 = 7396 + ($I1$0$i$i << 2) | 0;
     $1009 = $631 + 28 | 0;
     HEAP32[$1009 >> 2] = $I1$0$i$i;
     $1010 = $631 + 20 | 0;
     HEAP32[$1010 >> 2] = 0;
     HEAP32[$935 >> 2] = 0;
     $1011 = HEAP32[7096 >> 2] | 0;
     $1012 = 1 << $I1$0$i$i;
     $1013 = $1011 & $1012;
     $1014 = ($1013 | 0) == 0;
     if ($1014) {
      $1015 = $1011 | $1012;
      HEAP32[7096 >> 2] = $1015;
      HEAP32[$1008 >> 2] = $631;
      $1016 = $631 + 24 | 0;
      HEAP32[$1016 >> 2] = $1008;
      $1017 = $631 + 12 | 0;
      HEAP32[$1017 >> 2] = $631;
      $1018 = $631 + 8 | 0;
      HEAP32[$1018 >> 2] = $631;
      break;
     }
     $1019 = HEAP32[$1008 >> 2] | 0;
     $1020 = ($I1$0$i$i | 0) == 31;
     $1021 = $I1$0$i$i >>> 1;
     $1022 = 25 - $1021 | 0;
     $1023 = $1020 ? 0 : $1022;
     $1024 = $962 << $1023;
     $K2$0$i$i = $1024;
     $T$0$i$i = $1019;
     while (1) {
      $1025 = $T$0$i$i + 4 | 0;
      $1026 = HEAP32[$1025 >> 2] | 0;
      $1027 = $1026 & -8;
      $1028 = ($1027 | 0) == ($962 | 0);
      if ($1028) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 305;
       break;
      }
      $1029 = $K2$0$i$i >>> 31;
      $1030 = ($T$0$i$i + 16 | 0) + ($1029 << 2) | 0;
      $1031 = $K2$0$i$i << 1;
      $1032 = HEAP32[$1030 >> 2] | 0;
      $1033 = ($1032 | 0) == (0 | 0);
      if ($1033) {
       $$lcssa141 = $1030;
       $T$0$i$i$lcssa140 = $T$0$i$i;
       label = 302;
       break;
      } else {
       $K2$0$i$i = $1031;
       $T$0$i$i = $1032;
      }
     }
     if ((label | 0) == 302) {
      $1034 = HEAP32[7108 >> 2] | 0;
      $1035 = $$lcssa141 >>> 0 < $1034 >>> 0;
      if ($1035) {
       _abort();
      } else {
       HEAP32[$$lcssa141 >> 2] = $631;
       $1036 = $631 + 24 | 0;
       HEAP32[$1036 >> 2] = $T$0$i$i$lcssa140;
       $1037 = $631 + 12 | 0;
       HEAP32[$1037 >> 2] = $631;
       $1038 = $631 + 8 | 0;
       HEAP32[$1038 >> 2] = $631;
       break;
      }
     } else if ((label | 0) == 305) {
      $1039 = $T$0$i$i$lcssa + 8 | 0;
      $1040 = HEAP32[$1039 >> 2] | 0;
      $1041 = HEAP32[7108 >> 2] | 0;
      $1042 = $1040 >>> 0 >= $1041 >>> 0;
      $not$$i$i = $T$0$i$i$lcssa >>> 0 >= $1041 >>> 0;
      $1043 = $1042 & $not$$i$i;
      if ($1043) {
       $1044 = $1040 + 12 | 0;
       HEAP32[$1044 >> 2] = $631;
       HEAP32[$1039 >> 2] = $631;
       $1045 = $631 + 8 | 0;
       HEAP32[$1045 >> 2] = $1040;
       $1046 = $631 + 12 | 0;
       HEAP32[$1046 >> 2] = $T$0$i$i$lcssa;
       $1047 = $631 + 24 | 0;
       HEAP32[$1047 >> 2] = 0;
       break;
      } else {
       _abort();
      }
     }
    }
   }
  } while (0);
  $1049 = HEAP32[7104 >> 2] | 0;
  $1050 = $1049 >>> 0 > $nb$0 >>> 0;
  if ($1050) {
   $1051 = $1049 - $nb$0 | 0;
   HEAP32[7104 >> 2] = $1051;
   $1052 = HEAP32[7116 >> 2] | 0;
   $1053 = $1052 + $nb$0 | 0;
   HEAP32[7116 >> 2] = $1053;
   $1054 = $1051 | 1;
   $1055 = $1053 + 4 | 0;
   HEAP32[$1055 >> 2] = $1054;
   $1056 = $nb$0 | 3;
   $1057 = $1052 + 4 | 0;
   HEAP32[$1057 >> 2] = $1056;
   $1058 = $1052 + 8 | 0;
   $$0 = $1058;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $1059 = ___errno_location() | 0;
 HEAP32[$1059 >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}
function emterpret(pc) {
 pc = pc | 0;
 var sp = 0, inst = 0, lx = 0, ly = 0, lz = 0;
 var ld = 0.0;
 HEAP32[EMTSTACKTOP >> 2] = pc;
 sp = EMTSTACKTOP + 8 | 0;
 lx = HEAPU16[pc + 2 >> 1] | 0;
 EMTSTACKTOP = EMTSTACKTOP + (lx + 1 << 3) | 0;
 if ((asyncState | 0) != 2) {} else {
  pc = (HEAP32[sp - 4 >> 2] | 0) - 8 | 0;
 }
 pc = pc + 4 | 0;
 while (1) {
  pc = pc + 4 | 0;
  inst = HEAP32[pc >> 2] | 0;
  lx = inst >> 8 & 255;
  ly = inst >> 16 & 255;
  lz = inst >>> 24;
  switch (inst & 255) {
  case 0:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 1:
   HEAP32[sp + (lx << 3) >> 2] = inst >> 16;
   break;
  case 2:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[pc >> 2] | 0;
   break;
  case 3:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 4:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 5:
   ly = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   HEAP32[sp + (lx << 3) >> 2] = ly;
   break;
  case 6:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 7:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 8:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 9:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) % (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 13:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 14:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 15:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 16:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0 | 0;
   break;
  case 18:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 <= HEAP32[sp + (lz << 3) >> 2] >>> 0 | 0;
   break;
  case 19:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 20:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 | (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 21:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 22:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) << (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 24:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >>> (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 25:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) | 0;
   break;
  case 26:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (inst >> 24) | 0;
   break;
  case 27:
   ly = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, inst >> 24) | 0;
   HEAP32[sp + (lx << 3) >> 2] = ly;
   break;
  case 28:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (inst >> 24) | 0;
   break;
  case 29:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (lz >>> 0) >>> 0;
   break;
  case 30:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (inst >> 24) | 0;
   break;
  case 31:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) % (lz >>> 0) >>> 0;
   break;
  case 32:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == inst >> 24 | 0;
   break;
  case 33:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != inst >> 24 | 0;
   break;
  case 34:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < inst >> 24 | 0;
   break;
  case 35:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < lz >>> 0 | 0;
   break;
  case 37:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 <= lz >>> 0 | 0;
   break;
  case 38:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & inst >> 24;
   break;
  case 39:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 | inst >> 24;
   break;
  case 40:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ inst >> 24;
   break;
  case 41:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) << lz;
   break;
  case 42:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >> lz;
   break;
  case 43:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >>> lz;
   break;
  case 45:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 46:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 47:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 48:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 52:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 53:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 54:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 55:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 58:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 59:
   HEAPF64[sp + (lx << 3) >> 3] = +(inst >> 16);
   break;
  case 60:
   pc = pc + 4 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[pc >> 2] | 0);
   break;
  case 61:
   pc = pc + 4 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[pc >> 2];
   break;
  case 62:
   HEAP32[tempDoublePtr >> 2] = HEAP32[pc + 4 >> 2];
   HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[pc + 8 >> 2];
   pc = pc + 8 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[tempDoublePtr >> 3];
   break;
  case 63:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] + +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 64:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] - +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 65:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] * +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 68:
   HEAPF64[sp + (lx << 3) >> 3] = -+HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 69:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] == +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 70:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] != +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 75:
   HEAP32[sp + (lx << 3) >> 2] = ~~+HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 76:
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[sp + (ly << 3) >> 2] | 0);
   break;
  case 77:
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[sp + (ly << 3) >> 2] >>> 0);
   break;
  case 78:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 82:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 83:
   HEAP8[HEAP32[sp + (lx << 3) >> 2] >> 0] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 84:
   HEAP16[HEAP32[sp + (lx << 3) >> 2] >> 1] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 85:
   HEAP32[HEAP32[sp + (lx << 3) >> 2] >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 86:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[HEAP32[sp + (ly << 3) >> 2] >> 3];
   break;
  case 87:
   HEAPF64[HEAP32[sp + (lx << 3) >> 2] >> 3] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 90:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 0];
   break;
  case 94:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 2];
   break;
  case 95:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 97:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 102:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 0];
   break;
  case 106:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 2];
   break;
  case 107:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 109:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 119:
   pc = pc + (inst >> 16 << 2) | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 120:
   if (HEAP32[sp + (lx << 3) >> 2] | 0) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 121:
   if (!(HEAP32[sp + (lx << 3) >> 2] | 0)) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 125:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 ? HEAP32[sp + (lz << 3) >> 2] | 0 : HEAP32[sp + ((HEAPU8[pc >> 0] | 0) << 3) >> 2] | 0;
   break;
  case 127:
   HEAP32[sp + (lx << 3) >> 2] = tempDoublePtr;
   break;
  case 128:
   HEAP32[sp + (lx << 3) >> 2] = tempRet0;
   break;
  case 129:
   tempRet0 = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 130:
   switch (ly | 0) {
   case 0:
    {
     HEAP32[sp + (lx << 3) >> 2] = cttz_i8;
     continue;
    }
   case 1:
    {
     HEAP32[sp + (lx << 3) >> 2] = STACK_MAX;
     continue;
    }
   default:
   }
   break;
  case 132:
   switch (inst >> 8 & 255) {
   case 0:
    {
     cttz_i8 = HEAP32[sp + (lz << 3) >> 2] | 0;
     continue;
    }
   case 1:
    {
     STACK_MAX = HEAP32[sp + (lz << 3) >> 2] | 0;
     continue;
    }
   default:
   }
   break;
  case 134:
   lz = HEAPU8[(HEAP32[pc + 4 >> 2] | 0) + 1 | 0] | 0;
   ly = 0;
   if ((asyncState | 0) != 2) {
    while ((ly | 0) < (lz | 0)) {
     HEAP32[EMTSTACKTOP + (ly << 3) + 8 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) >> 2] | 0;
     HEAP32[EMTSTACKTOP + (ly << 3) + 12 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) + 4 >> 2] | 0;
     ly = ly + 1 | 0;
    }
   }
   HEAP32[sp - 4 >> 2] = pc;
   emterpret(HEAP32[pc + 4 >> 2] | 0);
   if ((asyncState | 0) == 1) {
    EMTSTACKTOP = sp - 8 | 0;
    return;
   }
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[EMTSTACKTOP >> 2] | 0;
   HEAP32[sp + (lx << 3) + 4 >> 2] = HEAP32[EMTSTACKTOP + 4 >> 2] | 0;
   pc = pc + (4 + lz + 3 >> 2 << 2) | 0;
   break;
  case 135:
   switch (inst >>> 16 | 0) {
   case 0:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _bitshift64Shl(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 1:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memset(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 2:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _bitshift64Lshr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 3:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _malloc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 4:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _strlen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 5:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ctime(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 6:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _abort();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 7:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 8:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gettimeofday(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 9:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = Math_clz32(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 10:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall146(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 11:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _pthread_cleanup_push(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 12:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _pthread_cleanup_pop(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 13:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall221(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 14:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall54(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 15:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ___lock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 16:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ___unlock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 17:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memcpy(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 18:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall145(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 19:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = FUNCTION_TABLE_iiii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 7](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 20:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall330(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 21:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall63(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 22:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = FUNCTION_TABLE_ii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 1](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 23:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall5(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 24:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall6(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 25:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _exit(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 26:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 27:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall20(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 28:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall140(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 29:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _nanosleep(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 30:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall114(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 31:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall11(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 32:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall175(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 33:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall10(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 34:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall12(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 35:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall41(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 36:
    {
     HEAP32[sp - 4 >> 2] = pc;
     abort(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   default:
   }
   break;
  case 136:
   HEAP32[sp + (lx << 3) >> 2] = STACKTOP;
   break;
  case 137:
   STACKTOP = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 138:
   lz = HEAP32[sp + (lz << 3) >> 2] | 0;
   lx = (HEAP32[sp + (lx << 3) >> 2] | 0) - (HEAP32[sp + (ly << 3) >> 2] | 0) >>> 0;
   if (lx >>> 0 >= lz >>> 0) {
    pc = pc + (lz << 2) | 0;
    continue;
   }
   pc = HEAP32[pc + 4 + (lx << 2) >> 2] | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 139:
   EMTSTACKTOP = sp - 8 | 0;
   HEAP32[EMTSTACKTOP >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   HEAP32[EMTSTACKTOP + 4 >> 2] = HEAP32[sp + (lx << 3) + 4 >> 2] | 0;
   return;
   break;
  case 141:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (inst >>> 16 << 3) >> 2] | 0;
   break;
  case 142:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (inst >>> 16 << 3) >> 3];
   break;
  case 143:
   HEAP32[sp + (inst >>> 16 << 3) >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 144:
   HEAPF64[sp + (inst >>> 16 << 3) >> 3] = +HEAPF64[sp + (lx << 3) >> 3];
   break;
  default:
  }
 }
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($mem | 0) == (0 | 0);
 if ($0) {
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[7108 >> 2] | 0;
 $3 = $1 >>> 0 < $2 >>> 0;
 if ($3) {
  _abort();
 }
 $4 = $mem + -4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 & 3;
 $7 = ($6 | 0) == 1;
 if ($7) {
  _abort();
 }
 $8 = $5 & -8;
 $9 = $1 + $8 | 0;
 $10 = $5 & 1;
 $11 = ($10 | 0) == 0;
 do {
  if ($11) {
   $12 = HEAP32[$1 >> 2] | 0;
   $13 = ($6 | 0) == 0;
   if ($13) {
    return;
   }
   $14 = 0 - $12 | 0;
   $15 = $1 + $14 | 0;
   $16 = $12 + $8 | 0;
   $17 = $15 >>> 0 < $2 >>> 0;
   if ($17) {
    _abort();
   }
   $18 = HEAP32[7112 >> 2] | 0;
   $19 = ($15 | 0) == ($18 | 0);
   if ($19) {
    $104 = $9 + 4 | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = $105 & 3;
    $107 = ($106 | 0) == 3;
    if (!$107) {
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
    HEAP32[7100 >> 2] = $16;
    $108 = $105 & -2;
    HEAP32[$104 >> 2] = $108;
    $109 = $16 | 1;
    $110 = $15 + 4 | 0;
    HEAP32[$110 >> 2] = $109;
    $111 = $15 + $16 | 0;
    HEAP32[$111 >> 2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = $12 >>> 0 < 256;
   if ($21) {
    $22 = $15 + 8 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $15 + 12 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $20 << 1;
    $27 = 7132 + ($26 << 2) | 0;
    $28 = ($23 | 0) == ($27 | 0);
    if (!$28) {
     $29 = $23 >>> 0 < $2 >>> 0;
     if ($29) {
      _abort();
     }
     $30 = $23 + 12 | 0;
     $31 = HEAP32[$30 >> 2] | 0;
     $32 = ($31 | 0) == ($15 | 0);
     if (!$32) {
      _abort();
     }
    }
    $33 = ($25 | 0) == ($23 | 0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[1773] | 0;
     $37 = $36 & $35;
     HEAP32[1773] = $37;
     $p$1 = $15;
     $psize$1 = $16;
     break;
    }
    $38 = ($25 | 0) == ($27 | 0);
    if ($38) {
     $$pre42 = $25 + 8 | 0;
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = $25 >>> 0 < $2 >>> 0;
     if ($39) {
      _abort();
     }
     $40 = $25 + 8 | 0;
     $41 = HEAP32[$40 >> 2] | 0;
     $42 = ($41 | 0) == ($15 | 0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
     }
    }
    $43 = $23 + 12 | 0;
    HEAP32[$43 >> 2] = $25;
    HEAP32[$$pre$phi43Z2D >> 2] = $23;
    $p$1 = $15;
    $psize$1 = $16;
    break;
   }
   $44 = $15 + 24 | 0;
   $45 = HEAP32[$44 >> 2] | 0;
   $46 = $15 + 12 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   $48 = ($47 | 0) == ($15 | 0);
   do {
    if ($48) {
     $58 = $15 + 16 | 0;
     $59 = $58 + 4 | 0;
     $60 = HEAP32[$59 >> 2] | 0;
     $61 = ($60 | 0) == (0 | 0);
     if ($61) {
      $62 = HEAP32[$58 >> 2] | 0;
      $63 = ($62 | 0) == (0 | 0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;
       $RP$1 = $58;
      }
     } else {
      $R$1 = $60;
      $RP$1 = $59;
     }
     while (1) {
      $64 = $R$1 + 20 | 0;
      $65 = HEAP32[$64 >> 2] | 0;
      $66 = ($65 | 0) == (0 | 0);
      if (!$66) {
       $R$1 = $65;
       $RP$1 = $64;
       continue;
      }
      $67 = $R$1 + 16 | 0;
      $68 = HEAP32[$67 >> 2] | 0;
      $69 = ($68 | 0) == (0 | 0);
      if ($69) {
       $R$1$lcssa = $R$1;
       $RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;
       $RP$1 = $67;
      }
     }
     $70 = $RP$1$lcssa >>> 0 < $2 >>> 0;
     if ($70) {
      _abort();
     } else {
      HEAP32[$RP$1$lcssa >> 2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = $15 + 8 | 0;
     $50 = HEAP32[$49 >> 2] | 0;
     $51 = $50 >>> 0 < $2 >>> 0;
     if ($51) {
      _abort();
     }
     $52 = $50 + 12 | 0;
     $53 = HEAP32[$52 >> 2] | 0;
     $54 = ($53 | 0) == ($15 | 0);
     if (!$54) {
      _abort();
     }
     $55 = $47 + 8 | 0;
     $56 = HEAP32[$55 >> 2] | 0;
     $57 = ($56 | 0) == ($15 | 0);
     if ($57) {
      HEAP32[$52 >> 2] = $47;
      HEAP32[$55 >> 2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $71 = ($45 | 0) == (0 | 0);
   if ($71) {
    $p$1 = $15;
    $psize$1 = $16;
   } else {
    $72 = $15 + 28 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = 7396 + ($73 << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = ($15 | 0) == ($75 | 0);
    if ($76) {
     HEAP32[$74 >> 2] = $R$3;
     $cond20 = ($R$3 | 0) == (0 | 0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[7096 >> 2] | 0;
      $80 = $79 & $78;
      HEAP32[7096 >> 2] = $80;
      $p$1 = $15;
      $psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[7108 >> 2] | 0;
     $82 = $45 >>> 0 < $81 >>> 0;
     if ($82) {
      _abort();
     }
     $83 = $45 + 16 | 0;
     $84 = HEAP32[$83 >> 2] | 0;
     $85 = ($84 | 0) == ($15 | 0);
     if ($85) {
      HEAP32[$83 >> 2] = $R$3;
     } else {
      $86 = $45 + 20 | 0;
      HEAP32[$86 >> 2] = $R$3;
     }
     $87 = ($R$3 | 0) == (0 | 0);
     if ($87) {
      $p$1 = $15;
      $psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[7108 >> 2] | 0;
    $89 = $R$3 >>> 0 < $88 >>> 0;
    if ($89) {
     _abort();
    }
    $90 = $R$3 + 24 | 0;
    HEAP32[$90 >> 2] = $45;
    $91 = $15 + 16 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = ($92 | 0) == (0 | 0);
    do {
     if (!$93) {
      $94 = $92 >>> 0 < $88 >>> 0;
      if ($94) {
       _abort();
      } else {
       $95 = $R$3 + 16 | 0;
       HEAP32[$95 >> 2] = $92;
       $96 = $92 + 24 | 0;
       HEAP32[$96 >> 2] = $R$3;
       break;
      }
     }
    } while (0);
    $97 = $91 + 4 | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = ($98 | 0) == (0 | 0);
    if ($99) {
     $p$1 = $15;
     $psize$1 = $16;
    } else {
     $100 = HEAP32[7108 >> 2] | 0;
     $101 = $98 >>> 0 < $100 >>> 0;
     if ($101) {
      _abort();
     } else {
      $102 = $R$3 + 20 | 0;
      HEAP32[$102 >> 2] = $98;
      $103 = $98 + 24 | 0;
      HEAP32[$103 >> 2] = $R$3;
      $p$1 = $15;
      $psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;
   $psize$1 = $8;
  }
 } while (0);
 $112 = $p$1 >>> 0 < $9 >>> 0;
 if (!$112) {
  _abort();
 }
 $113 = $9 + 4 | 0;
 $114 = HEAP32[$113 >> 2] | 0;
 $115 = $114 & 1;
 $116 = ($115 | 0) == 0;
 if ($116) {
  _abort();
 }
 $117 = $114 & 2;
 $118 = ($117 | 0) == 0;
 if ($118) {
  $119 = HEAP32[7116 >> 2] | 0;
  $120 = ($9 | 0) == ($119 | 0);
  if ($120) {
   $121 = HEAP32[7104 >> 2] | 0;
   $122 = $121 + $psize$1 | 0;
   HEAP32[7104 >> 2] = $122;
   HEAP32[7116 >> 2] = $p$1;
   $123 = $122 | 1;
   $124 = $p$1 + 4 | 0;
   HEAP32[$124 >> 2] = $123;
   $125 = HEAP32[7112 >> 2] | 0;
   $126 = ($p$1 | 0) == ($125 | 0);
   if (!$126) {
    return;
   }
   HEAP32[7112 >> 2] = 0;
   HEAP32[7100 >> 2] = 0;
   return;
  }
  $127 = HEAP32[7112 >> 2] | 0;
  $128 = ($9 | 0) == ($127 | 0);
  if ($128) {
   $129 = HEAP32[7100 >> 2] | 0;
   $130 = $129 + $psize$1 | 0;
   HEAP32[7100 >> 2] = $130;
   HEAP32[7112 >> 2] = $p$1;
   $131 = $130 | 1;
   $132 = $p$1 + 4 | 0;
   HEAP32[$132 >> 2] = $131;
   $133 = $p$1 + $130 | 0;
   HEAP32[$133 >> 2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = $134 + $psize$1 | 0;
  $136 = $114 >>> 3;
  $137 = $114 >>> 0 < 256;
  do {
   if ($137) {
    $138 = $9 + 8 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = $9 + 12 | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $142 = $136 << 1;
    $143 = 7132 + ($142 << 2) | 0;
    $144 = ($139 | 0) == ($143 | 0);
    if (!$144) {
     $145 = HEAP32[7108 >> 2] | 0;
     $146 = $139 >>> 0 < $145 >>> 0;
     if ($146) {
      _abort();
     }
     $147 = $139 + 12 | 0;
     $148 = HEAP32[$147 >> 2] | 0;
     $149 = ($148 | 0) == ($9 | 0);
     if (!$149) {
      _abort();
     }
    }
    $150 = ($141 | 0) == ($139 | 0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1773] | 0;
     $154 = $153 & $152;
     HEAP32[1773] = $154;
     break;
    }
    $155 = ($141 | 0) == ($143 | 0);
    if ($155) {
     $$pre40 = $141 + 8 | 0;
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[7108 >> 2] | 0;
     $157 = $141 >>> 0 < $156 >>> 0;
     if ($157) {
      _abort();
     }
     $158 = $141 + 8 | 0;
     $159 = HEAP32[$158 >> 2] | 0;
     $160 = ($159 | 0) == ($9 | 0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
     }
    }
    $161 = $139 + 12 | 0;
    HEAP32[$161 >> 2] = $141;
    HEAP32[$$pre$phi41Z2D >> 2] = $139;
   } else {
    $162 = $9 + 24 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = $9 + 12 | 0;
    $165 = HEAP32[$164 >> 2] | 0;
    $166 = ($165 | 0) == ($9 | 0);
    do {
     if ($166) {
      $177 = $9 + 16 | 0;
      $178 = $177 + 4 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      $180 = ($179 | 0) == (0 | 0);
      if ($180) {
       $181 = HEAP32[$177 >> 2] | 0;
       $182 = ($181 | 0) == (0 | 0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;
        $RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;
       $RP10$1 = $178;
      }
      while (1) {
       $183 = $R8$1 + 20 | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       $185 = ($184 | 0) == (0 | 0);
       if (!$185) {
        $R8$1 = $184;
        $RP10$1 = $183;
        continue;
       }
       $186 = $R8$1 + 16 | 0;
       $187 = HEAP32[$186 >> 2] | 0;
       $188 = ($187 | 0) == (0 | 0);
       if ($188) {
        $R8$1$lcssa = $R8$1;
        $RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;
        $RP10$1 = $186;
       }
      }
      $189 = HEAP32[7108 >> 2] | 0;
      $190 = $RP10$1$lcssa >>> 0 < $189 >>> 0;
      if ($190) {
       _abort();
      } else {
       HEAP32[$RP10$1$lcssa >> 2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = $9 + 8 | 0;
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = HEAP32[7108 >> 2] | 0;
      $170 = $168 >>> 0 < $169 >>> 0;
      if ($170) {
       _abort();
      }
      $171 = $168 + 12 | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      $173 = ($172 | 0) == ($9 | 0);
      if (!$173) {
       _abort();
      }
      $174 = $165 + 8 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      $176 = ($175 | 0) == ($9 | 0);
      if ($176) {
       HEAP32[$171 >> 2] = $165;
       HEAP32[$174 >> 2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $191 = ($163 | 0) == (0 | 0);
    if (!$191) {
     $192 = $9 + 28 | 0;
     $193 = HEAP32[$192 >> 2] | 0;
     $194 = 7396 + ($193 << 2) | 0;
     $195 = HEAP32[$194 >> 2] | 0;
     $196 = ($9 | 0) == ($195 | 0);
     if ($196) {
      HEAP32[$194 >> 2] = $R8$3;
      $cond21 = ($R8$3 | 0) == (0 | 0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[7096 >> 2] | 0;
       $200 = $199 & $198;
       HEAP32[7096 >> 2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[7108 >> 2] | 0;
      $202 = $163 >>> 0 < $201 >>> 0;
      if ($202) {
       _abort();
      }
      $203 = $163 + 16 | 0;
      $204 = HEAP32[$203 >> 2] | 0;
      $205 = ($204 | 0) == ($9 | 0);
      if ($205) {
       HEAP32[$203 >> 2] = $R8$3;
      } else {
       $206 = $163 + 20 | 0;
       HEAP32[$206 >> 2] = $R8$3;
      }
      $207 = ($R8$3 | 0) == (0 | 0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[7108 >> 2] | 0;
     $209 = $R8$3 >>> 0 < $208 >>> 0;
     if ($209) {
      _abort();
     }
     $210 = $R8$3 + 24 | 0;
     HEAP32[$210 >> 2] = $163;
     $211 = $9 + 16 | 0;
     $212 = HEAP32[$211 >> 2] | 0;
     $213 = ($212 | 0) == (0 | 0);
     do {
      if (!$213) {
       $214 = $212 >>> 0 < $208 >>> 0;
       if ($214) {
        _abort();
       } else {
        $215 = $R8$3 + 16 | 0;
        HEAP32[$215 >> 2] = $212;
        $216 = $212 + 24 | 0;
        HEAP32[$216 >> 2] = $R8$3;
        break;
       }
      }
     } while (0);
     $217 = $211 + 4 | 0;
     $218 = HEAP32[$217 >> 2] | 0;
     $219 = ($218 | 0) == (0 | 0);
     if (!$219) {
      $220 = HEAP32[7108 >> 2] | 0;
      $221 = $218 >>> 0 < $220 >>> 0;
      if ($221) {
       _abort();
      } else {
       $222 = $R8$3 + 20 | 0;
       HEAP32[$222 >> 2] = $218;
       $223 = $218 + 24 | 0;
       HEAP32[$223 >> 2] = $R8$3;
       break;
      }
     }
    }
   }
  } while (0);
  $224 = $135 | 1;
  $225 = $p$1 + 4 | 0;
  HEAP32[$225 >> 2] = $224;
  $226 = $p$1 + $135 | 0;
  HEAP32[$226 >> 2] = $135;
  $227 = HEAP32[7112 >> 2] | 0;
  $228 = ($p$1 | 0) == ($227 | 0);
  if ($228) {
   HEAP32[7100 >> 2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113 >> 2] = $229;
  $230 = $psize$1 | 1;
  $231 = $p$1 + 4 | 0;
  HEAP32[$231 >> 2] = $230;
  $232 = $p$1 + $psize$1 | 0;
  HEAP32[$232 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = $psize$2 >>> 0 < 256;
 if ($234) {
  $235 = $233 << 1;
  $236 = 7132 + ($235 << 2) | 0;
  $237 = HEAP32[1773] | 0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239 | 0) == 0;
  if ($240) {
   $241 = $237 | $238;
   HEAP32[1773] = $241;
   $$pre = $236 + 8 | 0;
   $$pre$phiZ2D = $$pre;
   $F18$0 = $236;
  } else {
   $242 = $236 + 8 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   $244 = HEAP32[7108 >> 2] | 0;
   $245 = $243 >>> 0 < $244 >>> 0;
   if ($245) {
    _abort();
   } else {
    $$pre$phiZ2D = $242;
    $F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  $246 = $F18$0 + 12 | 0;
  HEAP32[$246 >> 2] = $p$1;
  $247 = $p$1 + 8 | 0;
  HEAP32[$247 >> 2] = $F18$0;
  $248 = $p$1 + 12 | 0;
  HEAP32[$248 >> 2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249 | 0) == 0;
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = $psize$2 >>> 0 > 16777215;
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = $249 + 1048320 | 0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = $255 + 520192 | 0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = $260 + 245760 | 0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = 14 - $264 | 0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = $265 + $267 | 0;
   $269 = $268 << 1;
   $270 = $268 + 7 | 0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = 7396 + ($I20$0 << 2) | 0;
 $275 = $p$1 + 28 | 0;
 HEAP32[$275 >> 2] = $I20$0;
 $276 = $p$1 + 16 | 0;
 $277 = $p$1 + 20 | 0;
 HEAP32[$277 >> 2] = 0;
 HEAP32[$276 >> 2] = 0;
 $278 = HEAP32[7096 >> 2] | 0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280 | 0) == 0;
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[7096 >> 2] = $282;
   HEAP32[$274 >> 2] = $p$1;
   $283 = $p$1 + 24 | 0;
   HEAP32[$283 >> 2] = $274;
   $284 = $p$1 + 12 | 0;
   HEAP32[$284 >> 2] = $p$1;
   $285 = $p$1 + 8 | 0;
   HEAP32[$285 >> 2] = $p$1;
  } else {
   $286 = HEAP32[$274 >> 2] | 0;
   $287 = ($I20$0 | 0) == 31;
   $288 = $I20$0 >>> 1;
   $289 = 25 - $288 | 0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;
   $T$0 = $286;
   while (1) {
    $292 = $T$0 + 4 | 0;
    $293 = HEAP32[$292 >> 2] | 0;
    $294 = $293 & -8;
    $295 = ($294 | 0) == ($psize$2 | 0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = ($T$0 + 16 | 0) + ($296 << 2) | 0;
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297 >> 2] | 0;
    $300 = ($299 | 0) == (0 | 0);
    if ($300) {
     $$lcssa = $297;
     $T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;
     $T$0 = $299;
    }
   }
   if ((label | 0) == 127) {
    $301 = HEAP32[7108 >> 2] | 0;
    $302 = $$lcssa >>> 0 < $301 >>> 0;
    if ($302) {
     _abort();
    } else {
     HEAP32[$$lcssa >> 2] = $p$1;
     $303 = $p$1 + 24 | 0;
     HEAP32[$303 >> 2] = $T$0$lcssa48;
     $304 = $p$1 + 12 | 0;
     HEAP32[$304 >> 2] = $p$1;
     $305 = $p$1 + 8 | 0;
     HEAP32[$305 >> 2] = $p$1;
     break;
    }
   } else if ((label | 0) == 130) {
    $306 = $T$0$lcssa + 8 | 0;
    $307 = HEAP32[$306 >> 2] | 0;
    $308 = HEAP32[7108 >> 2] | 0;
    $309 = $307 >>> 0 >= $308 >>> 0;
    $not$ = $T$0$lcssa >>> 0 >= $308 >>> 0;
    $310 = $309 & $not$;
    if ($310) {
     $311 = $307 + 12 | 0;
     HEAP32[$311 >> 2] = $p$1;
     HEAP32[$306 >> 2] = $p$1;
     $312 = $p$1 + 8 | 0;
     HEAP32[$312 >> 2] = $307;
     $313 = $p$1 + 12 | 0;
     HEAP32[$313 >> 2] = $T$0$lcssa;
     $314 = $p$1 + 24 | 0;
     HEAP32[$314 >> 2] = 0;
     break;
    } else {
     _abort();
    }
   }
  }
 } while (0);
 $315 = HEAP32[7124 >> 2] | 0;
 $316 = $315 + -1 | 0;
 HEAP32[7124 >> 2] = $316;
 $317 = ($316 | 0) == 0;
 if ($317) {
  $sp$0$in$i = 7548;
 } else {
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  $318 = ($sp$0$i | 0) == (0 | 0);
  $319 = $sp$0$i + 8 | 0;
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[7124 >> 2] = -1;
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1 | 0) == 0;
 L1 : do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;
   $21 = $0;
   while (1) {
    $3 = HEAP8[$$014 >> 0] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = $$014 + 1 | 0;
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7 | 0) == 0;
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;
     $21 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   $10 = $9 + -16843009 | 0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13 | 0) == 0;
   $15 = $w$0 + 4 | 0;
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20 & 255;
  $17 = $16 << 24 >> 24 == 0;
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    $$pre = HEAP8[$18 >> 0] | 0;
    $19 = $$pre << 24 >> 24 == 0;
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = $$pn - $0 | 0;
 return $$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $a$0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a$1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $b$0;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $b$1;
  HEAP32[EMTSTACKTOP + 40 >> 2] = $rem;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 44480 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $a$0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a$1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $b$0;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $b$1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 70436 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $a$0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a$1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $b$0;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $b$1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 71904 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = a;
  HEAP32[EMTSTACKTOP + 16 >> 2] = b;
  HEAP32[EMTSTACKTOP + 24 >> 2] = c;
  HEAP32[EMTSTACKTOP + 32 >> 2] = d;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 71568 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = a;
  HEAP32[EMTSTACKTOP + 16 >> 2] = b;
  HEAP32[EMTSTACKTOP + 24 >> 2] = c;
  HEAP32[EMTSTACKTOP + 32 >> 2] = d;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 71936 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $off;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $whence;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 67612 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _main($argc, $argv, $env) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 $env = $env | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $argc;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $argv;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $env;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 17220 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 68432 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 45952 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 51400 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $s;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $l;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 69976 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 72244 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = stackBase;
  HEAP32[EMTSTACKTOP + 16 >> 2] = stackMax;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 72088 | 0);
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function update_heap() {
 HEAP8 = Module["HEAP8"];
 HEAP16 = Module["HEAP16"];
 HEAP32 = Module["HEAP32"];
 HEAPU8 = Module["HEAPU8"];
 HEAPU16 = Module["HEAPU16"];
 HEAPU32 = Module["HEAPU32"];
 HEAPF32 = Module["HEAPF32"];
 HEAPF64 = Module["HEAPF64"];
}

function ___stdio_close($f) {
 $f = $f | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 70356 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = x;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 70592 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _fflush($f) {
 $f = $f | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 53776 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b0(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 72320 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _cleanup_109($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 71656 | 0);
}

function _cleanup($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 71708 | 0);
}

function b2(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 72348 | 0);
}

function ___errno_location() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 70940 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 7](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _pthread_self() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 72372 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 1](a1 | 0) | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 3](a1 | 0);
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS

var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,___stdio_write,___stdio_seek,___stdout_write,_sn_write,___stdio_read,b1,b1];
var FUNCTION_TABLE_vi = [b2,_cleanup_109,_cleanup,b2];

  return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _i64Add: _i64Add, _pthread_self: _pthread_self, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Shl: _bitshift64Shl, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, ___udivmoddi4: ___udivmoddi4, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, emterpret: emterpret, setAsyncState: setAsyncState, emtStackSave: emtStackSave, emtStackRestore: emtStackRestore, update_heap: update_heap, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  // build the environment here, because we're just going to malloc
  // what we need to back our environment.
  ___buildEnvironment(ENV);

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  var initialEmtStackTop = asm.emtStackSave();

  try {

    var ret = Module['_main'](argc, argv, HEAP32[_environ>>2]);


    if (ENVIRONMENT_IS_BROWSIX && EmterpreterAsync.state !== 1)
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      asm.emtStackRestore(initialEmtStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  // we don't care about noExitRuntime for explicit exit calls in Browsix()
  if (ENVIRONMENT_IS_BROWSIX) {
    EXITSTATUS = status;
    Runtime.process.exit(status);
    // this will terminate the worker's execution as an uncaught
    // Exception, which is what we want.
    throw new ExitStatus(status);
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


if (ENVIRONMENT_IS_BROWSIX) {
  self.onmessage = SYSCALLS.browsix.syscall.resultHandler.bind(SYSCALLS.browsix.syscall);
  EmterpreterAsync.asyncFinalizers.push(function() {
    Module['noExitRuntime'] = false;
    // at this point, the return value of main is on the top of the
    // stack, which should be used as our exit code.
    exit(HEAP32[EMTSTACKTOP >> 2], true);
  });
  Runtime.process.once('ready', function() {
    Module['thisProgram'] = Runtime.process.argv[0];
    for (var k in Runtime.process.env) {
      if (!Runtime.process.env.hasOwnProperty(k))
        continue;
      ENV[k] = Runtime.process.env[k];
    }
    ENV = Runtime.process.env;
    ENV['_'] = Runtime.process.argv[0];

    if (Runtime.process.pid) {
      assert(HEAP32.buffer === Runtime.process.parentBuffer);
      assert(HEAP32[EMTSTACKTOP>>2] === Runtime.process.forkArgs.pc);

      EmterpreterAsync.resumeFromFork(Runtime.process.forkArgs.pc, function() {
        // child returns 0 from fork
        return 0;
      });
    } else {
      run(Runtime.process.argv.slice(2));
    }
  });
}

if (!ENVIRONMENT_IS_BROWSIX) {
  var oldHEAP8 = HEAP8;
  ret = new ArrayBuffer(TOTAL_MEMORY);
  var temp = new Int8Array(ret);
  temp.set(oldHEAP8);
  _emscripten_replace_memory(ret);
  updateGlobalBuffer(ret);
  updateGlobalBufferViews();
  run();
}

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}









