#!/usr/bin/env node
'use strict';
var fs = require('fs');
var readline = require('readline');
var util_1 = require('util');
function log(fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var cb = undefined;
    if (args.length && typeof args[args.length - 1] === 'function') {
        cb = args[args.length - 1];
        args = args.slice(0, -1);
    }
    var prog = process.argv[1].split('/').slice(-1);
    var msg = prog + ': ' + util_1.format.apply(undefined, [fmt].concat(args)) + '\n';
    if (cb)
        process.stderr.write(msg, cb);
    else
        process.stderr.write(msg);
}
function parseArgs(args, handlers) {
    var ok = true;
    var positionalArgs = args.filter(function (arg) { return arg.substring(0, 1) !== '-'; });
    args = args.filter(function (arg) { return arg.substring(0, 1) === '-'; });
    var errs = 0;
    function done() {
        errs--;
        if (!errs)
            process.exit(1);
    }
    function error() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        errs++;
        ok = false;
        log.apply(this, args.concat([done]));
    }
    function usage() {
        errs++;
        var prog = process.argv[1].split('/').slice(-1);
        var flags = Object.keys(handlers).concat(['h']).sort().join('');
        var msg = util_1.format('usage: %s [-%s] ARGS\n', prog, flags);
        process.stderr.write(msg, done);
    }
    outer: for (var i = 0; i < args.length; i++) {
        var argList = args[i].slice(1);
        if (argList.length && argList[0] === '-') {
            error('unknown option "%s"', args[i]);
            continue;
        }
        for (var j = 0; j < argList.length; j++) {
            var arg = argList[j];
            if (handlers[arg]) {
                handlers[arg]();
            }
            else if (arg === 'h') {
                ok = false;
                break outer;
            }
            else {
                error('invalid option "%s"', arg);
            }
        }
    }
    if (!ok)
        usage();
    return [positionalArgs, ok];
}
function grep(pattern, inputs, output, code) {
    if (!inputs || !inputs.length) {
        process.exit(code);
        return;
    }
    var re = new RegExp(pattern, "g");
    var current = inputs[0];
    inputs = inputs.slice(1);
    if (!current) {
        setTimeout(grep, pattern, 0, inputs, output, code);
        return;
    }
    current.on('readable', function () {
        var rl = readline.createInterface({
            input: current,
            output: null
        });
        rl.on('line', function (line) {
            if (line.match(re)) {
                output.write(line + '\n');
            }
        });
    });
    current.on('end', function () {
        setTimeout(grep, 0, inputs, output, code);
    });
}
function main() {
    var _a = parseArgs(process.argv.slice(2), {}), args = _a[0], ok = _a[1];
    if (!ok)
        return;
    var code = 0;
    if (!args.length) {
        parseArgs(['-h'], {});
        return;
    }
    var pattern = args[0];
    args = args.slice(1);
    if (!args.length)
        args = ['-'];
    var files = [];
    var opened = 0;
    args.map(function (path, i) {
        if (path === '-') {
            files[i] = process.stdin;
            if (++opened === args.length)
                setTimeout(grep, 0, pattern, files, process.stdout, code);
            return;
        }
        fs.open(path, 'r', function (err, fd) {
            if (err) {
                files[i] = null;
                code = 1;
                log(err.message);
            }
            else {
                files[i] = fs.createReadStream(path, { fd: fd });
            }
            if (++opened === args.length)
                setTimeout(grep, 0, pattern, files, process.stdout, code);
        });
    });
}
main();
