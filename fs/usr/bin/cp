#!/usr/bin/env node
'use strict';
var fs = require('fs');
var util_1 = require('util');
function log(fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var cb = undefined;
    if (args.length && typeof args[args.length - 1] === 'function') {
        cb = args[args.length - 1];
        args = args.slice(0, -1);
    }
    var prog = process.argv[1].split('/').slice(-1);
    var msg = prog + ': ' + util_1.format.apply(undefined, [fmt].concat(args)) + '\n';
    if (cb)
        process.stderr.write(msg, cb);
    else
        process.stderr.write(msg);
}
function parseArgs(args, handlers) {
    var ok = true;
    var positionalArgs = args.filter(function (arg) { return arg.substring(0, 1) !== '-'; });
    args = args.filter(function (arg) { return arg.substring(0, 1) === '-'; });
    var errs = 0;
    function done() {
        errs--;
        if (!errs)
            process.exit(1);
    }
    function error() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        errs++;
        ok = false;
        log.apply(this, args.concat([done]));
    }
    function usage() {
        errs++;
        var prog = process.argv[1].split('/').slice(-1);
        var flags = Object.keys(handlers).concat(['h']).sort().join('');
        var msg = util_1.format('usage: %s [-%s] ARGS\n', prog, flags);
        process.stderr.write(msg, done);
    }
    outer: for (var i = 0; i < args.length; i++) {
        var argList = args[i].slice(1);
        if (argList.length && argList[0] === '-') {
            error('unknown option "%s"', args[i]);
            continue;
        }
        for (var j = 0; j < argList.length; j++) {
            var arg = argList[j];
            if (handlers[arg]) {
                handlers[arg]();
            }
            else if (arg === 'h') {
                ok = false;
                break outer;
            }
            else {
                error('invalid option "%s"', arg);
            }
        }
    }
    if (!ok)
        usage();
    return [positionalArgs, ok];
}
function main() {
    'use strict';
    var _a = parseArgs(process.argv.slice(2), {}), args = _a[0], ok = _a[1];
    var code = 0;
    var outstanding = args.length;
    function finished() {
        outstanding--;
        if (outstanding <= 0) {
            process.exit(code);
        }
    }
    if (!outstanding) {
        code = -1;
        log('missing file operand', finished);
        return;
    }
    if (outstanding === 1) {
        code = -1;
        log('missing destination file operand after ‘%s’', args, finished);
        return;
    }
    function onReadStreamError(err) {
        code = 1;
        log(err.message);
        this.close();
    }
    function onWriteStreamError(err) {
        code = 1;
        log(err.message);
        this.end();
    }
    function copy(src, dest) {
        fs.stat(src, function (oerr, stats) {
            if (oerr) {
                code = 1;
                log(oerr.message, finished);
            }
            else if (stats.isFile()) {
                var rs = fs.createReadStream(src);
                rs.on('error', onReadStreamError);
                var ws = fs.createWriteStream(dest);
                ws.on('error', onWriteStreamError);
                ws.on('finish', finished);
                rs.pipe(ws);
            }
            else if (stats.isDirectory()) {
                code = 1;
                log('omitting directory ‘%s’', src, finished);
            }
            else {
                code = 1;
                log('unrecognised command', finished);
            }
        });
    }
    var dest = args[--outstanding];
    fs.stat(dest, function (oerr, stats) {
        if (dest[dest.length - 1] === '/' && (oerr || (stats && !stats.isDirectory()))) {
            code = 1;
            log("target ‘%s’ is not a directory", dest, finished);
        }
        else if (oerr) {
            if (outstanding === 1 && oerr.code === "ENOENT") {
                copy(args[0], dest);
            }
            else {
                code = 1;
                log(oerr.message, finished);
                process.exit(code);
                return;
            }
        }
        else if (outstanding === 1 && stats.isFile()) {
            if (args[0] !== dest) {
                copy(args[0], dest);
            }
            else {
                code = 1;
                log('‘%s’ and ‘%s’ are the same file', args[0], dest, finished);
            }
        }
        else if (stats.isDirectory()) {
            for (var i = 0, end = outstanding; i < end; i++) {
                copy(args[i], dest + '/' + args[i].split('/').pop());
            }
        }
        else {
            code = 1;
            log("target ‘%s’ is not a directory", dest, finished);
        }
    });
}
main();
