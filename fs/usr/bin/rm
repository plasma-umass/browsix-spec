#!/usr/bin/env node
'use strict';
var fs = require('fs');
var path = require('path');
var util_1 = require('util');
function log(fmt) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var cb = undefined;
    if (args.length && typeof args[args.length - 1] === 'function') {
        cb = args[args.length - 1];
        args = args.slice(0, -1);
    }
    var prog = process.argv[1].split('/').slice(-1);
    var msg = prog + ': ' + util_1.format.apply(undefined, [fmt].concat(args)) + '\n';
    if (cb)
        process.stderr.write(msg, cb);
    else
        process.stderr.write(msg);
}
function parseArgs(args, handlers, argsRequired) {
    if (argsRequired === void 0) { argsRequired = false; }
    var ok = true;
    var positionalArgs = args.filter(function (arg) { return arg.substring(0, 1) !== '-'; });
    args = args.filter(function (arg) { return arg.substring(0, 1) === '-'; });
    var errs = 0;
    function done() {
        errs--;
        if (!errs)
            process.exit(1);
    }
    function error() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        errs++;
        ok = false;
        log.apply(this, args.concat([done]));
    }
    function usage() {
        errs++;
        var prog = process.argv[1].split('/').slice(-1);
        var flags = Object.keys(handlers).concat(['h']).sort().join('');
        var msg = util_1.format('usage: %s [-%s] ARGS\n', prog, flags);
        process.stderr.write(msg, done);
    }
    outer: for (var i = 0; i < args.length; i++) {
        var argList = args[i].slice(1);
        if (argList.length && argList[0] === '-') {
            error('unknown option "%s"', args[i]);
            continue;
        }
        for (var j = 0; j < argList.length; j++) {
            var arg = argList[j];
            if (handlers[arg]) {
                handlers[arg]();
            }
            else if (arg === 'h') {
                ok = false;
                break outer;
            }
            else {
                error('invalid option "%s"', arg);
            }
        }
    }
    if (!ok || (argsRequired && positionalArgs.length === 0))
        usage();
    return [positionalArgs, ok];
}
function frmdir(dir, cb) {
    fs.readdir(dir, function (err, files) {
        if (err) {
            cb(err);
            return;
        }
        cleandir(dir, files, 0, function (err) {
            if (err) {
                cb(err);
                return;
            }
            fs.rmdir(dir, function (err) {
                if (err) {
                    cb(err);
                }
                else {
                    cb(null);
                }
            });
        });
    });
}
function cleandir(dir, files, i, cb) {
    if (i === files.length) {
        cb(null);
        return;
    }
    if (files[i] === '.deletedFiles.log') {
        i++;
    }
    var filename = path.join(dir, files[i]);
    fs.stat(filename, function (err, stats) {
        if (err) {
            cb(err);
            return;
        }
        if (stats.isFile()) {
            fs.unlink(filename, function (err) {
                if (err) {
                    cb(err);
                    return;
                }
                cleandir(dir, files, i + 1, cb);
            });
        }
        else {
            frmdir(filename, function (err) {
                if (err) {
                    cb(err);
                    return;
                }
                cleandir(dir, files, i + 1, cb);
            });
        }
    });
}
function main() {
    'use strict';
    var argv = process.argv;
    var pathToScript = argv[1];
    var force = false;
    var recursive = false;
    var code = 0;
    var completed = 0;
    var _a = parseArgs(process.argv.slice(2), {
        'r': function () { return recursive = true; },
        'f': function () { return force = true; },
    }, true), args = _a[0], ok = _a[1];
    function finished() {
        completed++;
        if (completed === args.length)
            process.exit(code);
    }
    args.map(function (path, i) {
        fs.stat(path, function (err, stats) {
            if (err) {
                if (!force) {
                    code = 1;
                    log('%s', err, finished);
                }
                else {
                    finished();
                }
                return;
            }
            if (stats.isFile()) {
                fs.unlink(path, function (oerr) {
                    if (oerr) {
                        code = 1;
                        log('unlink: %s', oerr, finished);
                    }
                    else {
                        finished();
                    }
                });
            }
            else {
                if (recursive) {
                    frmdir(path, function (oerr) {
                        if (oerr) {
                            code = 1;
                            log('frmdir: %s', oerr, finished);
                        }
                        else {
                            finished();
                        }
                        return;
                    });
                }
                else {
                    code = 1;
                    log("cannot remove '%s':  Is a directory", path, finished);
                }
            }
        });
    });
}
main();
